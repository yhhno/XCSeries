最重要的就是情绪，心态。它在开始，它贯穿了始终。它影响其他
缺少用脑子？=》如何纠正=》然后才是如何用脑子？
缺少逻辑过程，老是经验主义
一看到就怕？怕就不会进行下去了
如何用脑子呢？无比自信的，情绪高昂的 时刻分析情况，看到本质，预想方案
每次错误的带来的情绪代价有点大


终极问题：怎么样的状况，我自己去学东西时能有这效果呢？=》是不是缺少个对一个事情真正认识的例子，作为对比。或者说是一个渐变的过程，不是有一个招式就可以了=》也类似于，我到底要掌握什么样的能力，=》才能像优秀的人一样，才能做好每一件事呢。=》我们根本就没有逻辑过程这个意识。=》心中事先没有个预想的过程。=》=》消除一开始的慌，预想下，然后参考某个例子，去进行，也就是说要有某个模式，不可能我些什么都是从零开始的把=》我跟这个课程学习，就是按照作者的标准来行事，也就是学习一个高标准=》为什么跟他学好简单，自己学好难哦=》是不是模式有问题，=》这些根本就不够，预想了内容，但是我们能自我去实现这些内容吗？=》也就是不知道该怎么进行，有了逻辑过程的念头，那逻辑过程怎么推进，傻了眼=》一个小小的问题，就可能引起了卡壳。 太脆弱了
终极要求： 我不是靠着经验去做事的，去活的。  =》要用脑子去学，去做，去观察。=>如何用脑子呢？无比自信的，情绪高昂的 时刻分析情况，看到本质，预想方案
疑问： 为什么跟他学好简单，自己学好难哦=》是不是模式有问题，
问题：即便是跟着学习过一遍，还是独自没有仔细的走一遍逻辑过程 =》巨大的问题，当我课后自己去实践代码时，竟然毫无头绪不知道干什么？如何下手？=》什么原因造成的、

我怎么忘了之前是多么的优秀呢？
既然他没有很多新的概念，所以我就可以很快速的去完成，


问题6：这就是http协议vs 之前接触http协议是什么样子呢？http和request，根本就没关联起来，这说明了什么?=>当时的学习方式有问题，非常片面，不系统，导致只是简单了解下，对底层知识这种程度的了解 怎么能去学习更高层次的知识呢？
问题4：确实主方向，一次过程是这样的，一次publish是发布一个message，message是不是到了一个exchange，是，那一个exchange是不是把消息是不是发送给一个queue，不一定，那一个queue是不是只有一个consumer，不一定，其中，只有publish丢个消息，和设置好条件，其他的都是自动完成，=》就是用形成这样的认识，才透彻，当然是要在一个主方向的前提下了。=》当然实际过程是，多次publish=》
问题4.1要扩展思维，不仅仅是在一个程序里处理所有东西。
问题3:业务的分析，我怎么能分析出两条路呢。以及每条路是怎么走的呢？  这是个大学问？
问题1：新东西，应该是新机制，好奇他到底是什么呢？ 当时是和direct是不同的，不然怎么新的呢？=》先缺少脑子，再缺少逻辑过程=》逻辑过程必须有个模式，必须要总结出来=>这个是学习的逻辑过程
问题4.1不太理解， =》那就试着去理解，想想既然是解决了轮询，那轮询是干嘛的，是像服务器询问有消息不，而这是有消息有自动发送给你，就是queue发消息给你consumer=》虽然不太理解，但还是要尝试去理解的。=》找个方向点去理解
问题6：命令行实时在心中，逻辑过程不可少，也说明了对reset理解不够，仅仅是格式化，格式化后是什么效果，实际是不清楚的，=这个是学习的逻辑过程有问题
问题0：当时看到这里时，心里就充满了怕怕的，蒙的，不知道我自己要做什么了。
问题1：一开始看到这段英文肯定是心里怕怕的，要做的就是战胜这种怕怕，去找个主方向，走一下逻辑过程，把它给了解透透的
问题1.1 只有英文介绍，那英文阅读是不是很重要
问题1：到现在，我们才讲到消息队列的本质，不是应该在第一节课就讲到吗？也就是在此之前，就一直不知道为何而奔跑。
问题7： C#驱动有rpc的简单实现，=》我能不能从高层概念了解到最底层的逻辑过程？ 或者是能不能从很多信息中，总结出一个主方向，一个逻辑过程呢
问题8：如何封装也是一个技巧，=》当我知道最底层的过程，能不能写出来，=》写出来能不能封装下，
问题0:理解和知道如何实现，同样重要，应该先理解，后知道如何实现，如果都不知道怎么用？那谈什么实现呢?
问题4：逻辑过程缺失=>顺着他的文档，很容易缺失逻辑过程=》我学习就是学习他的方法，形成自己的方法论，这现象可不好

总结技巧=》或者是学习方法，就是要总结个模式，然后在去学习新东西时，如虎添翼。不然真的是讲到那个程度就学到那个程度。=>最终要形成各个思维导图，了然于胸，这样对特性了解清楚，才能结合业务，去实现业务呀
0.心态情绪信念热情                                                            =》最重要
0.切记经验主义，要不厌其烦的主方向+逻辑过程
1.学习一个技术的目的也就是本质，如消息队列的本质是将同步系统异步化               =》主方向
2.一个技术的脉络或者架构图 和实现的细节 如wcf的soa思想和binding的分类，和rabbitmq的架构图   =》逻辑过程
3.这只是学习能力，最多是理解，往后的应用能力呢，更别说设计能力了啦，=》非常欠缺=》那欠缺的是什么呢？

问题0：如果是我学些的话：看一篇文章，有实例的那种，也许会demo下，也许就收藏了，而且毫无感觉VS用脑子的，有感觉得进行：先概况和本质，再安装，再管理，再详解配置文件，连接rabbitmq，（此后就是细节）交换机机制direct之workqueue，交换机机制direct之routing，交换机机制fanout之发布订阅，交换机机制headers,交换机机制topic,rabbitmq层面实现rpc,queuedeclare函数详解，queuedeclare函数参数arguments详解01，queuedeclare函数参数arguments详解02，basic也就是message01=》他怎么就可以一步一步推进呢？最重要的就是情绪，心态。它在开始，它贯穿了始终。它影响其他
缺少用脑子？=》如何纠正=》然后才是如何用脑子？
缺少逻辑过程，老是经验主义
一看到就怕？怕就不会进行下去了
如何用脑子呢？无比自信的，情绪高昂的 时刻分析情况，看到本质，预想方案

终极问题：怎么样的状况，我自己去学东西时能有这效果呢？=》是不是缺少个对一个事情真正认识的例子，作为对比。或者说是一个渐变的过程，不是有一个招式就可以了=》也类似于，我到底要掌握什么样的能力，=》才能像优秀的人一样，才能做好每一件事呢。=》我们根本就没有逻辑过程这个意识。=》心中事先没有个预想的过程。=》=》消除一开始的慌，预想下，然后参考某个例子，去进行，也就是说要有某个模式，不可能我些什么都是从零开始的把=》我跟这个课程学习，就是按照作者的标准来行事，也就是学习一个高标准=》为什么跟他学好简单，自己学好难哦=》是不是模式有问题，=》这些根本就不够，预想了内容，但是我们能自我去实现这些内容吗？=》也就是不知道该怎么进行，有了逻辑过程的念头，那逻辑过程怎么推进，傻了眼=》一个小小的问题，就可能引起了卡壳。 太脆弱了
终极要求： 我不是靠着经验去做事的，去活的。  =》要用脑子去学，去做，去观察。=>如何用脑子呢？无比自信的，情绪高昂的 时刻分析情况，看到本质，预想方案
疑问： 为什么跟他学好简单，自己学好难哦=》是不是模式有问题，
问题：即便是跟着学习过一遍，还是独自没有仔细的走一遍逻辑过程 =》巨大的问题，当我课后自己去实践代码时，竟然毫无头绪不知道干什么？如何下手？=》什么原因造成的、

我怎么忘了之前是多么的优秀呢？
既然他没有很多新的概念，所以我就可以很快速的去完成，


问题6：这就是http协议vs 之前接触http协议是什么样子呢？http和request，根本就没关联起来，这说明了什么?=>当时的学习方式有问题，非常片面，不系统，导致只是简单了解下，对底层知识这种程度的了解 怎么能去学习更高层次的知识呢？
问题4：确实主方向，一次过程是这样的，一次publish是发布一个message，message是不是到了一个exchange，是，那一个exchange是不是把消息是不是发送给一个queue，不一定，那一个queue是不是只有一个consumer，不一定，其中，只有publish丢个消息，和设置好条件，其他的都是自动完成，=》就是用形成这样的认识，才透彻，当然是要在一个主方向的前提下了。=》当然实际过程是，多次publish=》
问题4.1要扩展思维，不仅仅是在一个程序里处理所有东西。
问题3:业务的分析，我怎么能分析出两条路呢。以及每条路是怎么走的呢？  这是个大学问？
问题1：新东西，应该是新机制，好奇他到底是什么呢？ 当时是和direct是不同的，不然怎么新的呢？=》先缺少脑子，再缺少逻辑过程=》逻辑过程必须有个模式，必须要总结出来=>这个是学习的逻辑过程
问题4.1不太理解， =》那就试着去理解，想想既然是解决了轮询，那轮询是干嘛的，是像服务器询问有消息不，而这是有消息有自动发送给你，就是queue发消息给你consumer=》虽然不太理解，但还是要尝试去理解的。=》找个方向点去理解
问题6：命令行实时在心中，逻辑过程不可少，也说明了对reset理解不够，仅仅是格式化，格式化后是什么效果，实际是不清楚的，=这个是学习的逻辑过程有问题
问题0：当时看到这里时，心里就充满了怕怕的，蒙的，不知道我自己要做什么了。
问题1：一开始看到这段英文肯定是心里怕怕的，要做的就是战胜这种怕怕，去找个主方向，走一下逻辑过程，把它给了解透透的
问题1.1 只有英文介绍，那英文阅读是不是很重要
问题1：到现在，我们才讲到消息队列的本质，不是应该在第一节课就讲到吗？也就是在此之前，就一直不知道为何而奔跑。
问题7： C#驱动有rpc的简单实现，=》我能不能从高层概念了解到最底层的逻辑过程？ 或者是能不能从很多信息中，总结出一个主方向，一个逻辑过程呢
问题8：如何封装也是一个技巧，=》当我知道最底层的过程，能不能写出来，=》写出来能不能封装下，
问题0:理解和知道如何实现，同样重要，应该先理解，后知道如何实现，如果都不知道怎么用？那谈什么实现呢?
问题4：逻辑过程缺失=>顺着他的文档，很容易缺失逻辑过程=》我学习就是学习他的方法，形成自己的方法论，这现象可不好
问题2：新概念，消息的确实， =》正是这些新概念导致我的学习难以进行，=》要解决这个问题
问题0：对内存，磁盘，网络io都没什么概念，没有把他们当做评判的标准
 问题4：我们当时听的时候，稀里糊涂的，越听越不明白，听完还是一团浆糊，不知道是啥，=》缺少逻辑过程，就是queue怎么向consumer推数据，以及consumer如何消费数据的？=》正是因为越听越不明白，导致情绪低落，又导致更听不明白，此时又不能调整情绪。=》导致学时学不到东西，往后推进，困难重重，心里倍感沮丧。
问题6:学个新知识点，要注意什么？ 不能慌，一慌啥都没有了=》当时看到这些东西，就慌了，确实也证明慌了很耽误事情，导致后面的操作不理解，以为"ha-sync-mode":"automatic"是方式第二专有的，慌了就会经验主义，想当然，本能判断，就不理智了不会经过逻辑思考了





总结技巧=》或者是学习方法，就是要总结个模式，然后在去学习新东西时，如虎添翼。不然真的是讲到那个程度就学到那个程度。=>最终要形成各个思维导图，了然于胸，这样对特性了解清楚，才能结合业务，去实现业务呀
0.心态情绪信念热情 （1，顺利时，2.遇到困难时情绪代价大，也就是情绪处理有问题）                               =》最重要
0.切记经验主义，要不厌其烦的主方向+逻辑过程=》持续性进行
1.学习一个技术的目的也就是本质，如消息队列的本质是将同步系统异步化                                           =》主方向
2.一个技术的脉络或者架构图 和实现的细节 如wcf的soa思想和binding的分类，和rabbitmq的架构图                    =》逻辑过程
3.这只是学习能力，最多是理解，往后的应用能力呢，更别说设计能力了啦，=》非常欠缺=》那欠缺的是什么呢？

问题0：如果是我学些的话：看一篇文章，有实例的那种，也许会demo下，也许就收藏了，而且毫无感觉VS用脑子的，有感觉得进行：先概况和本质，再安装，再管理，再详解配置文件，连接rabbitmq，（此后就是细节）交换机机制direct之workqueue，交换机机制direct之routing，交换机机制fanout之发布订阅，交换机机制headers,交换机机制topic,rabbitmq层面实现rpc,queuedeclare函数详解，queuedeclare函数参数arguments详解01，queuedeclare函数参数arguments详解02，basic也就是message01，basic也就是message02，三大消费模式分析，运维化01高可用的Rabbitmq集群，运维化02queue镜像，运维化03负载均衡器构建三高架构=》他怎么就可以一步一步推进呢？


问题1：分类
问题2：七层负载 是啥意思
问题3：主方向是 使用
问题2：要搞清楚，负载均衡器+集群是如何工作的。=》已经搞清楚了=》之前的集群是不能分流的，现在可以分流=》每步，每个操作都要清楚干了什么。
问题3；四层负载本质：支持四层负载，我们可以直接用tcp +端口映射
问题4： listen rabbitmq_local_cluster 0.0.0.0:25672    定义一个cluster名字为rabbitmq_local_cluster，监控着25672这个端口
  问题5：逻辑过程
 问题6：可视化


大家好，欢迎来看最后一节课
问题1：分类
负载均衡器叫做haproxy
讲到负载均衡器，大家可能知道 nginx lvs 都是软件级别的负载均衡器，
当然还有硬件的F5, A10  当然费用非常高，

问题2：七层负载 是啥意思
nginx： 免费版支持七层负载

lvs

haproxy： 支持四层 和 七层负载  也就是  传输层，应用层
问题3：主方向是 使用
重要的是大家要知道怎么去用，怎么通过代码实现
我们来画个图，看看它如何实现负载 
其实原理大家都清楚
问题2：要搞清楚，负载均衡器+集群是如何工作的。=》已经搞清楚了=》之前的集群是不能分流的，现在可以分流=》每步，每个操作都要清楚干了什么。
有一个大的集合，集合中有3台rabbitmq 
集合前面是haproxy 它的作用就是把流量 让rabbitmq集群均摊了
问题3；四层负载本质：支持四层负载，我们可以直接用tcp +端口映射
既然它支持四层负载，我们可以直接用tcp +端口映射


接下来我我们去看怎么搭建把
有三台rabbitmq+一台haproxy
rabbitmq集群已经搭建好了，然后就是haproxy
开始haproxy安装

1.下载http://www.haproxy.org/#down  下载网址

2. make安装。
编译代码
 make TARGET=linux26 PREFIX=/usr/local/haproxy           #将haproxy安装到/usr/local/haproxy
 安装
 make install PREFIX=/usr/local/haproxy
 启动之前，先配置，也就是指定一个配置文件
3. 指定配置文件
问题4： listen rabbitmq_local_cluster 0.0.0.0:25672    定义一个cluster名字为rabbitmq_local_cluster，监控着25672这个端口
listen rabbitmq_local_cluster 0.0.0.0:25672    定义一个cluster名字为rabbitmq_local_cluster，监控着25672这个端口
	#配置TCP模式
	mode tcp
	option tcplog
	#简单的轮询
	balance roundrobin
	#rabbitmq集群节点配置
	server rabbitmq1 192.168.23.145:5672 check inter 5000 rise 2 fall 2
	server rabbitmq2 192.168.23.146:5672 check inter 5000 rise 2 fall 2
	server rabbitmq3 192.168.23.147:5672 check inter 5000 rise 2 fall 2
##服务器定义(check指健康状况检查，inter 2000指检测频率;rise 2指从离线状态转换至正常状态需要成功检查的次数；fall 2指失败2次即认为服务器不可用)

#配置haproxy web监控，查看统计信息
	listen private_monitoring :8100
	mode http
	option httplog
	stats enable
	#设置haproxy监控地址为http://localhost:8100/stats
	stats uri /stats
	stats refresh 30s
	#添加用户名密码认证
	stats auth admin:1234




4. 运行

 ./haproxy -f /usr/local/haproxy/sbin/haproxy.cfg

 运行好了
 问题6：可视化
 看下 web 监控 ui
  http://192.168.23.151:8100/stats
  问题5：逻辑过程
  也就是说搭建完成了，那用下呗，  publish下=>当然防火墙要关了

5.如果通过C#代码去连接

 haproxy 192.168.23.151:25672 

 http://192.168.23.151:8100/stats

   问题5：逻辑过程
 publish 这个地址192.168.23.151:25672 

 consumer这个地址 192.168.23.151:25672 


 haproxy + keepalive 【keepalive是监控机器是否挂掉】=》当然这些都是运维化的东西，我们作为开发只需要知道他是干嘛的，简单的搭建就可以了，不需要了解太深





一：负载均衡器 haproxy

F5, A10


nginx： 七层负载

lvs

haproxy： 四层 和 七层  传输层，应用层


一： haproxy安装


1.下载http://www.haproxy.org/#down  下载网址

2. make安装。

 make TARGET=linux26 PREFIX=/usr/local/haproxy           #将haproxy安装到/usr/local/haproxy

 make install PREFIX=/usr/local/haproxy

3. 指定配置文件

listen rabbitmq_local_cluster 0.0.0.0:25672
	#配置TCP模式
	mode tcp
	option tcplog
	#简单的轮询
	balance roundrobin
	#rabbitmq集群节点配置
	server rabbitmq1 192.168.23.145:5672 check inter 5000 rise 2 fall 2
	server rabbitmq2 192.168.23.146:5672 check inter 5000 rise 2 fall 2
	server rabbitmq3 192.168.23.147:5672 check inter 5000 rise 2 fall 2
##服务器定义(check指健康状况检查，inter 2000指检测频率;rise 2指从离线状态转换至正常状态需要成功检查的次数；fall 2指失败2次即认为服务器不可用)

#配置haproxy web监控，查看统计信息
	listen private_monitoring :8100
	mode http
	option httplog
	stats enable
	#设置haproxy监控地址为http://localhost:8100/stats
	stats uri /stats
	stats refresh 30s
	#添加用户名密码认证
	stats auth admin:1234


4. 运行

 ./haproxy -f /usr/local/haproxy/sbin/haproxy.cfg


5.如果通过C#代码去连接

 haproxy 192.168.23.151:25672 

 http://192.168.23.151:8100/stats

 publish 这个地址192.168.23.151:25672 

 consumer这个地址 192.168.23.151:25672 


 haproxy + keepalive 【keepalive是监控机器是否挂掉】=》当然这些都是运维化的东西，我们作为开发只需要知道他是干嘛的，简单的搭建就可以了，不需要了解太深
