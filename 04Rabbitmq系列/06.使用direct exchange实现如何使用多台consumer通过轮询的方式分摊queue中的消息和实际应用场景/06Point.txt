如何用脑子呢？无比自信的，情绪高昂的 时刻分析情况，看到本质，预想方案
巨大的问题，当我课后自己去实践代码时，竟然毫无头绪不知道干什么？如何下手？

终极问题：怎么样的状况，我自己去学东西时能有这效果呢？=》是不是缺少个对一个事情真正认识的例子，作为对比。或者说是一个渐变的过程，不是有一个招式就可以了=》也类似于，我到底要掌握什么样的能力，=》才能像优秀的人一样，才能做好每一件事呢。=》我们根本就没有逻辑过程这个意识。=》心中事先没有个预想的过程。=》=》消除一开始的慌，预想下，然后参考某个例子，去进行，也就是说要有某个模式，不可能我些什么都是从零开始的把=》我跟这个课程学习，就是按照作者的标准来行事，也就是学习一个高标准=》为什么跟他学好简单，自己学好难哦=》是不是模式有问题，=》这些根本就不够，预想了内容，但是我们能自我去实现这些内容吗？=》也就是不知道该怎么进行，有了逻辑过程的念头，那逻辑过程怎么推进，傻了眼=》一个小小的问题，就可能引起了卡壳。 太脆弱了
终极要求： 我不是靠着经验去做事的，去活的。  =》要用脑子去学，去做，去观察。=>如何用脑子呢？无比自信的，情绪高昂的 时刻分析情况，看到本质，预想方案
疑问： 为什么跟他学好简单，自己学好难哦=》是不是模式有问题，
问题：即便是跟着学习过一遍，还是独自没有仔细的走一遍逻辑过程

我怎么忘了之前是多么的优秀呢？
既然他没有很多新的概念，所以我就可以很快速的去完成，


问题6：这就是http协议vs 之前接触http协议是什么样子呢？http和request，根本就没关联起来，这说明了什么?=>当时的学习方式有问题，非常片面，不系统，导致只是简单了解下，对底层知识这种程度的了解 怎么能去学习更高层次的知识呢？
问题0：如果是我学些的话：看一篇文章，有实例的那种，也许会demo下，也许就收藏了，而且毫无感觉VS 有感觉得进行：先概况和本质，再安装，再管理，再详解配置文件，连接rabbitmq，交换机机制direct=》他怎么就可以一步一步推进呢？


问题1：交换机交换机，我们要知道交互机到底指的是什么？  就是一个类嘛，=》缺少用脑子去想
问题2：显式声明是什么意思？ 就是手工加个嘛， 加个就完了嘛，=》要存在逻辑过程=》缺少用脑子去想
问题3:看看文档，看看官方案例
问题4：直联直联 啥意思嘛。
问题5：这个轮询是如何实现的，以及queue和consumer是如何工作的？=》缺少逻辑过程=》缺少用脑子去想
问题3:逻辑过程=》consumer必须也要声明队列=》如果声明队列的时候，队列已存在，应该没有操作
问题3.1之前的步骤都一样，连接rabbitmq=>不错嘛，学会总结了
问题1：设计类的参考，  发布订阅， 推拉 匿名函数
问题2: 学过的东西，心中有个概念，如架构图=》也说明了先有个概况的主要性
问题4:特性导致的优化 多个consumer有效的分摊了我们cpu的计算压力
问题5:画个图，容易理解，
问题5.1 binding，binding我们要知道binding到底指的是什么？背后做了什么？ 老是看高层名字，雨里雾里的，不清楚，看不到本质=》用脑子去想，看到本质


大家好上节课，给大家讲到了用C#驱动去连接我们的rabbitmq，也是搭建了一个非常简单的例子
问题1：交换机交换机，我们要知道交互机到底指的是什么？  就是一个类嘛，=》缺少用脑子去想
这节课我们就来讲他们的交换机机制，
当然，我们知道exchange分为好多种， 主要是四大类
direct
fanout
header
topic

本节课主要讲第一种  direct
在之前的课程中，也给大家讲到了，direct是系统默认的，
问题2：显式声明是什么意思？ 就是手工加个嘛， 加个就完了嘛，=》要存在逻辑过程=》缺少用脑子去想
我们也可以显式来声明一个 所谓的direct
问题3:看看文档，看看官方案例
我们先看下官网的文档呢
http://www.rabbitmq.com/getstarted.html
也是一个非常快速的入门
有6个例子
helloworld 是一个简单的概念上的认识，
work queues 
routing 他也是用到的 一个直联的场景
问题4：直联直联 啥意思嘛。
他两个都是一个直联的场景

问题5：这个轮询是如何实现的，以及queue和consumer是如何工作的？=》缺少逻辑过程=》缺少用脑子去想
work queues 切分我们的任务 在works中切分我们的任务，这个场景他用到的就是 一个直联的应用  就是 direct ，切分任务它是一个什么样的场景呢，比如说一个队列，我一个程序也是读，两个程序也是读， 如果说我们两个程序读的话，它的任务应该是怎么切分的呢，默认它是轮询的，（一个轮一个，一个是技术序列一个是偶数序列），我们看下它的代码

其实就是文档上的例子，我们这里是实践一下
场景是 publish了好多的message，两个consumer去读取
publish代码和之前的一样，当时要插入100次

publish代码
  ConnectionFactory connectionFactory = new ConnectionFactory
            {
                HostName = "127.0.0.1",
                UserName = "qqqqqq",
                Password = "qqqqqq",
                //其他的设置，用默认的，此处不设置，
            };
            //第一步：创建connection
            var connection = connectionFactory.CreateConnection();
            //第二步：创建一个channel
            var channel = connection.CreateModel();
            //第三步：申明交换机【因为rabbitmq已经有了自定义的ampq default exchange】 我们当然也可以自定义交换机  也就是显式的指定自定义的交换机，非隐式指定默认的交换机  publish是直接把消息推给交换机的，但交换机有默认的，所以交换机可以不声明
            //channel.ExchangeDeclare("myexchange", ExchangeType.Direct, true, false, null);//也就是说有个交换机对象，像direct只是个类型而已=>用脑子去想

            //第四步：创建一个队列(queue)
            channel.QueueDeclare("mytest", true, false, false, null);

            //如果是自定义exchange的话，需要把queue绑定到自定义的exchange上，容易出错，但如果是隐式的话，这些工作由rabbitmq默认完成了。
			  //也就是说在erlang的measia数据库中个，有一个路由表，有三个列 exchangename queuename routingkey ，bind就是向这张表插入一条数据，，供以后使用，
            //channel.QueueBind("mytest", "myexchange", "mytest", null);//routingkey默认是队列名，那也可以自己定义=》可以自定义的这个特性，可以实现是什么功能呢

            for (int i = 0; i < 100; i++)
            {

                var msg = Encoding.UTF8.GetBytes(string.Format("{0}+{1}",i,"你好")); //因为我们要生成byte数组

                //以上的四步算是连接rabbitmq，后面的步骤是具体操作  =》有这个认识是，心中有个架构图
                //第五步：发布消息   发布消息都用basic前缀=》先推个交换机，后续工作，交换机完成，如把消息推到指定的队列中
                //channel.BasicPublish(string.Empty, "mytest", null, msg);
                channel.BasicPublish(string.Empty, routingKey: "mytest", basicProperties: null, body: msg);
            }


            Console.Read();//拦住这个进程。
            //为啥不释放，释放了ui中就看不到了
            //using。。。。
            //channel.Dispose();
            //connection.Dispose();

问题3:逻辑过程=》consumer必须也要声明队列=》如果声明队列的时候，队列已存在，应该没有操作
问题3.1之前的步骤都一样，连接rabbitmq=>不错嘛，学会总结了
consumer代码和之前的有不同  之前的步骤都一样，连接rabbitmq  consumer必须也要声明队列，不然会有个坑
接下来的操作步骤有所不同。
这个地方我们就不是用basicget这种主动的去拉取，
我们采用发布订阅模式， 也就是推  此处是事件来实现的发布订阅
问题1：设计类的参考，  发布订阅， 推拉 匿名函数
Experimental class exposing an IBasicConsumer's methods as separate events.  类方法是事件
  EventingBasicConsumer consumer = new EventingBasicConsumer(channel);
            //consumer.Received += Consumer_Received;
            consumer.Received += (sender, e)=>//匿名函数   e相当于restult，但是少了没有指定从哪个队列去获取数据
            {
                //获取msg
                var msg = Encoding.UTF8.GetString(e.Body);

                //只是我们此处的消费是把message输出，当然可以做其他操作。=》用脑子去想
                Console.WriteLine(string.Format("我对message：{0}进行了消费，消费方式其实输出到控制台，当然有其他的方式",msg));
            };

问题2: 学过的东西，心中有个概念，如架构图=》也说明了先有个概况的主要性
此时还有个不同，因为是直联的，所有要单独做binding，也就是队列和consumer=》有这个认识是，心中有个架构图
    channel.BasicConsume("mytest", false, consumer);

代码完成了，
为了演示
我们先运行两个consumer 去消费mytest队列的message。  只是我们此处的消费是把message输出，当然可以做其他操作。
我们再运行publish 发布消息

可以看到一个consumer消费奇数message，一个cosumer消费偶数message
问题4:特性导致的优化 多个consumer有效的分摊了我们cpu的计算压力
消费queue是轮询的机制，这样的话，就有效的分摊了我们cpu的计算压力

这个就是工作队列的原理，其是不是非常的简单

我们当然也可以自定义交换机  也就是显式的指定自定义的交换机，非隐式指定默认的交换机
  //channel.ExchangeDeclare("myexchange", ExchangeType.Direct, true, false, null);//也就是说有个交换机对象，像direct只是个类型而已=>用脑子去想



consumer代码

  ConnectionFactory connectionFactory = new ConnectionFactory
            {
                HostName = "127.0.0.1",
                UserName = "qqqqqq",
                Password = "qqqqqq",
                //其他的设置，用默认的，此处不设置，
            };

            //第一步：创建connection
            var connection = connectionFactory.CreateConnection();

            //第二步：创建一个channel
            var channel = connection.CreateModel();

            //第三步：申明交换机【因为rabbitmq已经有了自定义的ampq default exchange】  我们当然也可以自定义交换机  也就是显式的指定自定义的交换机，非隐式指定默认的交换机   consumer是直接读队列的，所以交换机可以不声明
            //channel.ExchangeDeclare("myexchange", ExchangeType.Direct, true, false, null);//也就是说有个交换机对象，像direct只是个类型而已=>用脑子去想
         


            //以上的四步算是连接rabbitmq，后面的步骤是具体操作=》有这个认识是，心中有个架构图
            //第四步：声明一个队列(queue) 此处的队列如果不声明的话，可能会有个坑，=》consumer是直接读队列的，如果先运行consumer的话，如果没有指定的队列存在会出错的
            channel.QueueDeclare("mytest", true, false, false, null);


            

            //主动获取
            //var result = channel.BasicGet("mytest", true);
            //var msg = Encoding.UTF8.GetString(result.Body);//result中有好多东西，相当于message的存储，

            EventingBasicConsumer consumer = new EventingBasicConsumer(channel);
            //consumer.Received += Consumer_Received;
            consumer.Received += (sender, e)=>//匿名函数   e相当于restult，但是少了没有指定从哪个队列去获取数据
            {
                //获取msg
                var msg = Encoding.UTF8.GetString(e.Body);

                //只是我们此处的消费是把message输出，当然可以做其他操作。=》用脑子去想
                Console.WriteLine(string.Format("我对message：{0},进行了消费，消费方式其实输出到控制台，当然有其他的方式",msg));
            };

            channel.BasicConsume("mytest", false, consumer);

            Console.Read();//把进程拦住。
            #endregion

至此是切分任务

问题5:画个图，容易理解，
问题5.1 binding，binding我们要知道binding到底指的是什么？背后做了什么？ 老是看高层名字，雨里雾里的，不清楚，看不到本质=》用脑子去想，看到本质
最后画个图，
最重要的一个结论是，
//也就是说在erlang的measia数据库中个，有一个路由表，有三个列 exchangename queuename routingkey ，bind就是向这张表插入一条数据，，供以后使用，



然后我们再来看下这个routing的案例
那么这个routing是什么意思呢/ 也是直联的一个应用

首先我们来看第一种交换机，直联 direct


一：exchange 【direct，fanout，headers，topic】

direct： Work queues，routing

BasicGet 主动的去拉取。 subscribe 和 publish


EventingBasicConsumer ：多个consumer可以分摊我们的cpu计算压力。

            //第三步：申明交换机【因为rabbitmq已经有了自定义的ampq default exchange】
            channel.ExchangeDeclare("myexchange", ExchangeType.Direct, true, false, null);

            //第四步：创建一个队列(queue)
            channel.QueueDeclare("mytest", true, false, false, null);

            channel.QueueBind("mytest", "myexchange", "mytest", null);


这个一定要知道，一定要手工的去通过 queuebinding去绑定我们的数据




