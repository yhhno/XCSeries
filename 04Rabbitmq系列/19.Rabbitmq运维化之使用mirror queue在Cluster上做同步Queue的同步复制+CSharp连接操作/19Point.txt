最重要的就是情绪，心态。它在开始，它贯穿了始终。它影响其他
缺少用脑子？=》如何纠正=》然后才是如何用脑子？
缺少逻辑过程，老是经验主义
一看到就怕？怕就不会进行下去了
如何用脑子呢？无比自信的，情绪高昂的 时刻分析情况，看到本质，预想方案
每次错误的带来的情绪代价有点大


终极问题：怎么样的状况，我自己去学东西时能有这效果呢？=》是不是缺少个对一个事情真正认识的例子，作为对比。或者说是一个渐变的过程，不是有一个招式就可以了=》也类似于，我到底要掌握什么样的能力，=》才能像优秀的人一样，才能做好每一件事呢。=》我们根本就没有逻辑过程这个意识。=》心中事先没有个预想的过程。=》=》消除一开始的慌，预想下，然后参考某个例子，去进行，也就是说要有某个模式，不可能我些什么都是从零开始的把=》我跟这个课程学习，就是按照作者的标准来行事，也就是学习一个高标准=》为什么跟他学好简单，自己学好难哦=》是不是模式有问题，=》这些根本就不够，预想了内容，但是我们能自我去实现这些内容吗？=》也就是不知道该怎么进行，有了逻辑过程的念头，那逻辑过程怎么推进，傻了眼=》一个小小的问题，就可能引起了卡壳。 太脆弱了
终极要求： 我不是靠着经验去做事的，去活的。  =》要用脑子去学，去做，去观察。=>如何用脑子呢？无比自信的，情绪高昂的 时刻分析情况，看到本质，预想方案
疑问： 为什么跟他学好简单，自己学好难哦=》是不是模式有问题，
问题：即便是跟着学习过一遍，还是独自没有仔细的走一遍逻辑过程 =》巨大的问题，当我课后自己去实践代码时，竟然毫无头绪不知道干什么？如何下手？=》什么原因造成的、

我怎么忘了之前是多么的优秀呢？
既然他没有很多新的概念，所以我就可以很快速的去完成，


问题6：这就是http协议vs 之前接触http协议是什么样子呢？http和request，根本就没关联起来，这说明了什么?=>当时的学习方式有问题，非常片面，不系统，导致只是简单了解下，对底层知识这种程度的了解 怎么能去学习更高层次的知识呢？
问题4：确实主方向，一次过程是这样的，一次publish是发布一个message，message是不是到了一个exchange，是，那一个exchange是不是把消息是不是发送给一个queue，不一定，那一个queue是不是只有一个consumer，不一定，其中，只有publish丢个消息，和设置好条件，其他的都是自动完成，=》就是用形成这样的认识，才透彻，当然是要在一个主方向的前提下了。=》当然实际过程是，多次publish=》
问题4.1要扩展思维，不仅仅是在一个程序里处理所有东西。
问题3:业务的分析，我怎么能分析出两条路呢。以及每条路是怎么走的呢？  这是个大学问？
问题1：新东西，应该是新机制，好奇他到底是什么呢？ 当时是和direct是不同的，不然怎么新的呢？=》先缺少脑子，再缺少逻辑过程=》逻辑过程必须有个模式，必须要总结出来=>这个是学习的逻辑过程
问题4.1不太理解， =》那就试着去理解，想想既然是解决了轮询，那轮询是干嘛的，是像服务器询问有消息不，而这是有消息有自动发送给你，就是queue发消息给你consumer=》虽然不太理解，但还是要尝试去理解的。=》找个方向点去理解
问题6：命令行实时在心中，逻辑过程不可少，也说明了对reset理解不够，仅仅是格式化，格式化后是什么效果，实际是不清楚的，=这个是学习的逻辑过程有问题
问题0：当时看到这里时，心里就充满了怕怕的，蒙的，不知道我自己要做什么了。
问题1：一开始看到这段英文肯定是心里怕怕的，要做的就是战胜这种怕怕，去找个主方向，走一下逻辑过程，把它给了解透透的
问题1.1 只有英文介绍，那英文阅读是不是很重要
问题1：到现在，我们才讲到消息队列的本质，不是应该在第一节课就讲到吗？也就是在此之前，就一直不知道为何而奔跑。
问题7： C#驱动有rpc的简单实现，=》我能不能从高层概念了解到最底层的逻辑过程？ 或者是能不能从很多信息中，总结出一个主方向，一个逻辑过程呢
问题8：如何封装也是一个技巧，=》当我知道最底层的过程，能不能写出来，=》写出来能不能封装下，
问题0:理解和知道如何实现，同样重要，应该先理解，后知道如何实现，如果都不知道怎么用？那谈什么实现呢?
问题4：逻辑过程缺失=>顺着他的文档，很容易缺失逻辑过程=》我学习就是学习他的方法，形成自己的方法论，这现象可不好

总结技巧=》或者是学习方法，就是要总结个模式，然后在去学习新东西时，如虎添翼。不然真的是讲到那个程度就学到那个程度。=>最终要形成各个思维导图，了然于胸，这样对特性了解清楚，才能结合业务，去实现业务呀
0.心态情绪信念热情                                                            =》最重要
0.切记经验主义，要不厌其烦的主方向+逻辑过程
1.学习一个技术的目的也就是本质，如消息队列的本质是将同步系统异步化               =》主方向
2.一个技术的脉络或者架构图 和实现的细节 如wcf的soa思想和binding的分类，和rabbitmq的架构图   =》逻辑过程
3.这只是学习能力，最多是理解，往后的应用能力呢，更别说设计能力了啦，=》非常欠缺=》那欠缺的是什么呢？

问题0：如果是我学些的话：看一篇文章，有实例的那种，也许会demo下，也许就收藏了，而且毫无感觉VS用脑子的，有感觉得进行：先概况和本质，再安装，再管理，再详解配置文件，连接rabbitmq，（此后就是细节）交换机机制direct之workqueue，交换机机制direct之routing，交换机机制fanout之发布订阅，交换机机制headers,交换机机制topic,rabbitmq层面实现rpc,queuedeclare函数详解，queuedeclare函数参数arguments详解01，queuedeclare函数参数arguments详解02，basic也就是message01=》他怎么就可以一步一步推进呢？最重要的就是情绪，心态。它在开始，它贯穿了始终。它影响其他
缺少用脑子？=》如何纠正=》然后才是如何用脑子？
缺少逻辑过程，老是经验主义
一看到就怕？怕就不会进行下去了
如何用脑子呢？无比自信的，情绪高昂的 时刻分析情况，看到本质，预想方案

终极问题：怎么样的状况，我自己去学东西时能有这效果呢？=》是不是缺少个对一个事情真正认识的例子，作为对比。或者说是一个渐变的过程，不是有一个招式就可以了=》也类似于，我到底要掌握什么样的能力，=》才能像优秀的人一样，才能做好每一件事呢。=》我们根本就没有逻辑过程这个意识。=》心中事先没有个预想的过程。=》=》消除一开始的慌，预想下，然后参考某个例子，去进行，也就是说要有某个模式，不可能我些什么都是从零开始的把=》我跟这个课程学习，就是按照作者的标准来行事，也就是学习一个高标准=》为什么跟他学好简单，自己学好难哦=》是不是模式有问题，=》这些根本就不够，预想了内容，但是我们能自我去实现这些内容吗？=》也就是不知道该怎么进行，有了逻辑过程的念头，那逻辑过程怎么推进，傻了眼=》一个小小的问题，就可能引起了卡壳。 太脆弱了
终极要求： 我不是靠着经验去做事的，去活的。  =》要用脑子去学，去做，去观察。=>如何用脑子呢？无比自信的，情绪高昂的 时刻分析情况，看到本质，预想方案
疑问： 为什么跟他学好简单，自己学好难哦=》是不是模式有问题，
问题：即便是跟着学习过一遍，还是独自没有仔细的走一遍逻辑过程 =》巨大的问题，当我课后自己去实践代码时，竟然毫无头绪不知道干什么？如何下手？=》什么原因造成的、

我怎么忘了之前是多么的优秀呢？
既然他没有很多新的概念，所以我就可以很快速的去完成，


问题6：这就是http协议vs 之前接触http协议是什么样子呢？http和request，根本就没关联起来，这说明了什么?=>当时的学习方式有问题，非常片面，不系统，导致只是简单了解下，对底层知识这种程度的了解 怎么能去学习更高层次的知识呢？
问题4：确实主方向，一次过程是这样的，一次publish是发布一个message，message是不是到了一个exchange，是，那一个exchange是不是把消息是不是发送给一个queue，不一定，那一个queue是不是只有一个consumer，不一定，其中，只有publish丢个消息，和设置好条件，其他的都是自动完成，=》就是用形成这样的认识，才透彻，当然是要在一个主方向的前提下了。=》当然实际过程是，多次publish=》
问题4.1要扩展思维，不仅仅是在一个程序里处理所有东西。
问题3:业务的分析，我怎么能分析出两条路呢。以及每条路是怎么走的呢？  这是个大学问？
问题1：新东西，应该是新机制，好奇他到底是什么呢？ 当时是和direct是不同的，不然怎么新的呢？=》先缺少脑子，再缺少逻辑过程=》逻辑过程必须有个模式，必须要总结出来=>这个是学习的逻辑过程
问题4.1不太理解， =》那就试着去理解，想想既然是解决了轮询，那轮询是干嘛的，是像服务器询问有消息不，而这是有消息有自动发送给你，就是queue发消息给你consumer=》虽然不太理解，但还是要尝试去理解的。=》找个方向点去理解
问题6：命令行实时在心中，逻辑过程不可少，也说明了对reset理解不够，仅仅是格式化，格式化后是什么效果，实际是不清楚的，=这个是学习的逻辑过程有问题
问题0：当时看到这里时，心里就充满了怕怕的，蒙的，不知道我自己要做什么了。
问题1：一开始看到这段英文肯定是心里怕怕的，要做的就是战胜这种怕怕，去找个主方向，走一下逻辑过程，把它给了解透透的
问题1.1 只有英文介绍，那英文阅读是不是很重要
问题1：到现在，我们才讲到消息队列的本质，不是应该在第一节课就讲到吗？也就是在此之前，就一直不知道为何而奔跑。
问题7： C#驱动有rpc的简单实现，=》我能不能从高层概念了解到最底层的逻辑过程？ 或者是能不能从很多信息中，总结出一个主方向，一个逻辑过程呢
问题8：如何封装也是一个技巧，=》当我知道最底层的过程，能不能写出来，=》写出来能不能封装下，
问题0:理解和知道如何实现，同样重要，应该先理解，后知道如何实现，如果都不知道怎么用？那谈什么实现呢?
问题4：逻辑过程缺失=>顺着他的文档，很容易缺失逻辑过程=》我学习就是学习他的方法，形成自己的方法论，这现象可不好
问题2：新概念，消息的确实， =》正是这些新概念导致我的学习难以进行，=》要解决这个问题
问题0：对内存，磁盘，网络io都没什么概念，没有把他们当做评判的标准
 问题4：我们当时听的时候，稀里糊涂的，越听越不明白，听完还是一团浆糊，不知道是啥，=》缺少逻辑过程，就是queue怎么向consumer推数据，以及consumer如何消费数据的？=》正是因为越听越不明白，导致情绪低落，又导致更听不明白，此时又不能调整情绪。=》导致学时学不到东西，往后推进，困难重重，心里倍感沮丧。
问题6:学个新知识点，要注意什么？ 不能慌，一慌啥都没有了=》当时看到这些东西，就慌了，确实也证明慌了很耽误事情，导致后面的操作不理解，以为"ha-sync-mode":"automatic"是方式第二专有的，慌了就会经验主义，想当然，本能判断，就不理智了不会经过逻辑思考了





总结技巧=》或者是学习方法，就是要总结个模式，然后在去学习新东西时，如虎添翼。不然真的是讲到那个程度就学到那个程度。=>最终要形成各个思维导图，了然于胸，这样对特性了解清楚，才能结合业务，去实现业务呀
0.心态情绪信念热情 （1，顺利时，2.遇到困难时情绪代价大，也就是情绪处理有问题）                               =》最重要
0.切记经验主义，要不厌其烦的主方向+逻辑过程=》持续性进行
1.学习一个技术的目的也就是本质，如消息队列的本质是将同步系统异步化                                           =》主方向
2.一个技术的脉络或者架构图 和实现的细节 如wcf的soa思想和binding的分类，和rabbitmq的架构图                    =》逻辑过程
3.这只是学习能力，最多是理解，往后的应用能力呢，更别说设计能力了啦，=》非常欠缺=》那欠缺的是什么呢？

问题0：如果是我学些的话：看一篇文章，有实例的那种，也许会demo下，也许就收藏了，而且毫无感觉VS用脑子的，有感觉得进行：先概况和本质，再安装，再管理，再详解配置文件，连接rabbitmq，（此后就是细节）交换机机制direct之workqueue，交换机机制direct之routing，交换机机制fanout之发布订阅，交换机机制headers,交换机机制topic,rabbitmq层面实现rpc,queuedeclare函数详解，queuedeclare函数参数arguments详解01，queuedeclare函数参数arguments详解02，basic也就是message01，basic也就是message02，三大消费模式分析，运维化01高可用的Rabbitmq集群，运维化02queue镜像=》他怎么就可以一步一步推进呢？


问题0：逻辑过程
问题1：逻辑过程，因为集群是搭建起来了，但也就是rabbitmq启动了， 那接下来queue如何操作呢？ 对不对，要接下去走
问题2：新概念。采用类比，有个例子容易理解
问题3：概念的逻辑过程，要理解清楚
问题4：高可用，出现了额， 要明白啥是高可用
问题5：官方文档，当然必须要看的，第一手资料
问题6:学个新知识点，要注意什么？ 不能慌，一慌啥都没有了=》当时看到这些东西，就慌了，确实也证明慌了很耽误事情，导致后面的操作不理解，以为"ha-sync-mode":"automatic"是方式第二专有的，慌了就会经验主义，想当然，本能判断，就不理智了不会经过逻辑思考了=>每次错误的带来的情绪代价有点大
问题7：当然我们搭建集群就是想让它自动化  =>x心中有这个概念
问题8：这还是慌带来的后遗症，造成第一印象有问题，带着错误的第一印象去接着学习，肯定会出现错误的认识的，=》所以深入理解计算机系统，抓紧去完成
问题9:当时只剩下一台时，一直连不上，当时咱就想，可能是要至少有两台，这样才能形成主从，也就是主从至少要用两台，=》有问题，=》但没有继续思考下去=》问题是要持续的思考，



大家好，上节课，给大家讲了如何搭建一个rabbitmq集群
问题0：逻辑过程
ok，我们集群搭建起来，我们该怎么使用呢？
问题1：逻辑过程，因为集群是搭建起来了，但也就是rabbitmq启动了， 那接下来queue如何操作呢？ 对不对，要接下去走
也就是我们现在集群是搭建起来了，那队列该怎么存放？
queue存放问题
queue存放有两种模式：  1默认         default
	                  2镜像		     mirror
问题2：新概念。采用类比，有个例子容易理解
镜像是什么意思呢？他和mongodb中主从复制是一个意思
queue mirror =>   master / slave 

mongodb master [oplog] -> slave 
问题3：概念的逻辑过程，要理解清楚
也就是slave一直都是同步master中的oplog，也就是根据它的操作日志进行复制，但在rabbitmq它是一个镜像的概念，也就是说如果你的queue做了一个镜像，queue就分一个master，一个slave ，也就是说我们这个slave也是同步复制这个master，其实是一个意思，ok，这样就做到了一个队列的高可用  如果说你master挂了额，我slave就顶上来了， 这时master和slave数据都是一样的，所以挂了一台没关系，另一台顶上去，
问题4：高可用，出现了额， 要明白啥是高可用
这样就做到了一个队列的高可用。。。
问题5：官方文档，当然必须要看的，第一手资料
接下来我们来看下镜像队列的概念把
官方文档
Each mirrored queue consists of one master and one or more slaves,
Messages published to the queue are replicated to all slaves.

接下来看如何配置
Configuring Mirroring

Queues have mirroring enabled via policy.


问题6:学个新知识点，要注意什么？ 不能慌，一慌啥都没有了=》当时看到这些东西，就慌了，确实也证明慌了很耽误事情，导致后面的操作不理解，以为"ha-sync-mode":"automatic"是方式第二专有的，慌了就会经验主义，想当然，本能判断，就不理智了不会经过逻辑思考了=>每次错误的带来的情绪代价有点大
方式一

rabbitmqctl set_policy ha-all "^test" '{"ha-mode":"all"}'

all 是在其他所有的node中进行同步 重点在所有的
也就是master操作了什么 => all slaves 都进行同步。=>本质是什么？
演示下，在webui中去操作
web ui非常可视化的看到操作，
有一点需要大家注意了，在方式一
现在rabbitmq2和rabbitmq3是slave，先关了rabbitmq2
然后再看ui界面
发现slave只有一个了e
然后再开启rabbitmq2
再看web ui
slave变成两个了，
说明是同步了
如果我们在关掉rabbitmq2
此时添加一个message
然后重启rabbitmq2
发现rabbitmq2未同步。
问题7：当然我们搭建集群就是想让它自动化  =>x心中有这个概念
也就是说如果其中某一个节点挂掉了，，，此时如果添加了数据，再重启的时候，node的数据是不会再自动同步的。。。。可以手工同步 有个按钮，既然有按钮肯定有命令行了也就是 rabbitmqctl sync_queue name  当然我们搭建集群就是想让它自动化，，你手工参与就没什么意思了
现在解决这个自动同步的问题？
也就是如何让node在 restart的时候能够进行数据同步。。。
很简单就是 "ha-sync-mode":"automatic"
也就是方式二中的中加的 "ha-sync-mode"
我们可以加这个"ha-sync-mode" 来实现，其中一个挂了之后，重启后，实现自动同步


方式二
rabbitmqctl set_policy ha-two "^two" \'{"ha-mode":"exactly","ha-params":2,"ha-sync-mode":"automatic"}'

手工同步rabbitmqctl sync_queue name


方式三	
rabbitmqctl set_policy ha-nodes "^test" \'{"ha-mode":"nodes","ha-params":["rabbit@nodeA", "rabbit@nodeB"]}'


问题8：这还是慌带来的后遗症，造成第一印象有问题，带着错误的第一印象去接着学习，肯定会出现错误的认识的，=》所以深入理解计算机系统，抓紧去完成
方式一和方式二和方式三的区别在于 设置slave的不同，ha-sync-mode是另一个设置，可以累加





Features


durable:
true 
 

Policy
ha-all 

Node
rabbitmq1 

Slaves
rabbitmq3 
 rabbitmq2  

 queue镜像就和大家演示到这里
接下来看如何使用C#代码连接rabbimq集群
要设置两个属性
1.AutomaticRecoveryEnabled：如果链接断开，底层会尝试去重连rabbitmq集群。。。

2.TopologyRecoveryEnabled：当connection链接成功了，里面的exchange,queue，binding都要恢复原样。。。

问题9:当时只剩下一台时，一直连不上，当时咱就想，可能是要至少有两台，这样才能形成主从，也就是主从至少要用两台，=》有问题，=》但没有继续思考下去=》问题是要持续的思考，
启动下
然后关闭一台rabbitmq，
此时有trycatch的存在，短暂的曝出异常，然后重连
短暂的异常是很正常的，毕竟你某一台机器挂了之后，它要经过内部重新连接，重新选举，对不对，选举出新的master，几秒钟集群会挂掉，也就是集群访问有问题，没关系几秒钟后，连接成功了， 这个是可以被忍受的，
启动publish
查看ui，
发现连接的rabbtmq2 也就是rabbitmq2最新被访问到
此时我们把rabbitmq2关掉
发现连接到了rabbitmq1上，这样就保持了高可用。虽然中间有点短暂异常，保证出现问题时，还是可用的。就是高可用

保证高可用。。。









一：queue存放问题

queue有两种模式：  默认         default
	           镜像		mirror

queue mirror =>   master / slave 

mongodb master [oplog] -> slave 


这样就做到了一个队列的高可用。。。

Each mirrored queue consists of one master and one or more slaves,
Messages published to the queue are replicated to all slaves.


Configuring Mirroring

Queues have mirroring enabled via policy.


rabbitmqctl	

rabbitmqctl set_policy ha-all "^test" '{"ha-mode":"all"}'


在所有的node中进行同步

master => all slaves 进行同步。

如果其中某一个节点挂掉了，，，，再重启的时候，node的数据是不会再同步的。。。。


如何让node在 restart的时候能够进行数据同步。。。


rabbitmqctl set_policy ha-two "^two" \'{"ha-mode":"exactly","ha-params":2,"ha-sync-mode":"automatic"}'

rabbitmqctl sync_queue name



3 slaves


	
rabbitmqctl set_policy ha-nodes "^test" \'{"ha-mode":"nodes","ha-params":["rabbit@nodeA", "rabbit@nodeB"]}'




Features


durable:
true 
 

Policy
ha-all 

Node
rabbitmq1 

Slaves
rabbitmq3 
 rabbitmq2  


二：通过C#代码去链接我们的Rabbitmq集群

AutomaticRecoveryEnabled：如果链接断开，底层会尝试去重连rabbitmq集群。。。

TopologyRecoveryEnabled：当connection链接成功了，里面的exchange,queue，binding都要恢复原样。。。

保证高可用。。。

