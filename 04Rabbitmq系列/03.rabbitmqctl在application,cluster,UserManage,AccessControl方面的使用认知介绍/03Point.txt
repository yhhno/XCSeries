终极问题：怎么样的状况，我自己去学东西时能有这效果呢？=》是不是缺少个对一个事情真正认识的例子，作为对比。或者说是一个渐变的过程，不是有一个招式就可以了=》也类似于，我到底要掌握什么样的能力，=》才能像优秀的人一样，才能做好每一件事呢。=》我们根本就没有逻辑过程这个意识。=》心中事先没有个预想的过程。=》=》消除一开始的慌，预想下，然后参考某个例子，去进行，也就是说要有某个模式，不可能我些什么都是从零开始的把=》我跟这个课程学习，就是按照作者的标准来行事，也就是学习一个高标准=》为什么跟他学好简单，自己学好难哦=》是不是模式有问题，
终极要求： 我不是靠着经验去做事的，去活的。 
疑问： 为什么跟他学好简单，自己学好难哦=》是不是模式有问题，

我怎么忘了之前是多么的优秀呢？
既然他没有很多新的概念，所以我就可以很快速的去完成，


问题6：这就是http协议vs 之前接触http协议是什么样子呢？http和request，根本就没关联起来，这说明了什么?=>当时的学习方式有问题，非常片面，不系统，导致只是简单了解下，对底层知识这种程度的了解 怎么能去学习更高层次的知识呢？


问题0:先概况，在安装，在管理， 既然是管理，心中是否有个预想嗯？=》消除一开始的慌，预想下，然后参考某个例子，去进行，也就是说要有某个模式，不可能我些什么都是从零开始的把
问题0：我跟这个课程学习，就是按照作者的标准来行事，也就是学习一个高标准=》为什么跟他学好简单，自己学好难哦=》是不是模式有问题，
问题1：逻辑过程，ui是如何实现的
问题2：观察要仔细认真，然而http api如何实现的
问题3: 就是两种手段这么简单， 不要一看到命令行就怕，那是我们没开始逻辑过程
问题4：始终保持好奇，保持逻辑过程  类似的东西要进行对比，区别
问题5：学习一个东西时，分类是特别重要的手段
问题6：如何来学习一个命令行工具？  心中是否有预想有哪些内容嗯？
问题5：逻辑过程，停止，开始是一对的，开始停止延伸到ui工具
 问题6：我们要知道每个命令的应用场景，以及理解背后的原理，
   问题7:看文档，要看的明白，看的懂，这样才能运用啊=>以前就是看了，看不明白
 问题8：逻辑过程



 看到rabbitmq的命令行工具，想到了什么? rabbitmq到底是怎么编写的呢？ 他怎么接受命令行呢？它有哪些东西?
问题0:先概况和本质，再安装，再管理， 既然是管理，心中是否有个预想嗯？=》消除一开始的慌，预想下，然后参考某个例子，去进行，也就是说要有某个模式，不可能我些什么都是从零开始的把
问题0：我跟这个课程学习，就是按照作者的标准来行事，也就是学习一个高标准=》为什么跟他学好简单，自己学好难哦=》是不是模式有问题，
大家好，上节课给大家讲了如何在windows和centos上去安装rabbitmq
接下来的任务，就是来看下，在rabbitmq中有一个非常重要的命令行工具
叫做什么呢？rabbitmq control 也就是rabbitmqctl
它可以管理rabbitmq的方方面面
问题1：逻辑过程，ui是如何实现的
从上节课的安装中，我们知道有个ui工具 对吧，可以观看rabbitmq的实时状况
其实还有一种用http api的方式也可查看
本质上来说，我们这个ui工具是调用了这个后台的http api
ok，上节课我们是安装好了rabbitmq，现在我们启动 命令行启动
地址栏输入 http://127.0.0.1:15672/#/  可以进行查看
问题2：观察要仔细认真，然而http api如何实现的
其实从这个监控平台上，我们可以看到它是基于http api的，页面最下面，有个http api文档
问题3: 就是两种手段这么简单， 不要一看到命令行就怕，那是我们没开始逻辑过程
其实还有一个非常重要的命令行工具，
ui和命令行是两种手段嘛
问题4：始终保持好奇，保持逻辑过程  类似的东西要进行对比，区别
当然有些人，就可能问了。
这个ui和命令行有啥区别呢？
其实命令行几乎包含了所有的命令，包括我们ui中没有的，
问题5：学习一个东西时，分类是特别重要的手段
接下来，我们就要看下这个命令行中，到底有哪些分类
那么它的命令行工具的程序在哪里呢？
C:\Program Files\RabbitMQ Server\rabbitmq_server-3.7.3\sbin  目录下的额rabbitmqctl.bat
或者usr/rabbitmq/sbin/rabbitmqctl
现在我们知道他在哪里、、
问题6：如何来学习一个命令行工具？  心中是否有预想有哪些内容嗯？
然后我们打开下官网 看看文档对这个工具的介绍
它的命令格式是这样的
rabbitmqctl [-n node] [-t timeout] [-q] {command} [command options...]
那么他能够管理到哪些方面呢？
第一个是application 和cluster 的管理
这个是ui上做不到的，
他常见的有哪些呢?
第一个是stop 它是用来停止erlang node 节点的
stop_app是来停止rabbitmq这个应用程序的
问题5：逻辑过程，停止，开始是一对的，开始停止延伸到ui工具
既然有停止，肯定有开始
start_app 
这个ui交互工具做不到的，因为你不可能把这个rabbitmq关掉了，你还能看到这个ui，更别说是开启饿了

首先我们来演示下stop_app
因为很多我们做集群配置的时候，都是需要先把我们的rabbitmq关掉，然后再启动=》为什么呢？

因为我们已经配置了path路径
直接rabbitmqctl stop_app
此时rabbitmq就关闭了，怎么验证了，ui看不了了
此时我们可以做一些其他的配置
比如说集群  集群是在erlang节点上进行的配置，因为erlang自身带有集群特性
所以说大家一定要清楚 erlang和这个rabbitmq的关系
前者是开发环境或者是语言， 后者是在这个语言上开发的程序
类似于我们用c#开发了一个ctrip的网站  对吧
 我们的stop_app只是关闭了rabbitmq这个应用程序
 并没有关闭它的运行时

 然后输入 rabbitmqctl start_app
 我们的ui有可以看得到了额，  对不对，，=》为什么呢？

 接下来我们再看下其他的


 问题6：我们要知道每个命令的应用场景，以及理解背后的原理，
 reset是什么作用,这个地方也蛮有意思的，就是有时候我们搭建了集群，也就说什么意思呢？
 我们看下文档，它返回rabbitmq节点 到它的初始状态， 也就是说格式化  
 有时候，我们搭建了一个集群， 之后我们想把某台机器拉出来，或者说我们想初始化下，因为某时候我们的rabbitmq里面可能说很多队列啊，exchange啊，比方说我们的消息队列可能有很多的队列，还有交换机，对吧，这时候呢，我们执行一个reset就可以拳霸把它抹掉。
 ok，我们可以演示下

 首先我们可以在ui中建几个队列
 然后执行 rabbitmqctl reset
 出错了
 需要先停止我们的rabbitmq
 然后才能执行这个reset
 我们就按照他的提示，先停止rabbitmq，再来reset
 然后开启rabbitmq。
 我们在ui中发现我们的queue没有了

 ok，这个就是reset的功效

 问题7:看文档，要看的明白，看的懂，这样才能运用啊=>以前就是看了，看不明白
 force_reset force_reset的话，是干嘛的呢？ 就是强制性的，对不对，有的时候，我们要执行这个reset的话，可能要满足什么样的条件，比如说 刚才说 比如说我们以前一些集群，它要你先关掉  再做reset，才能执行我们的reset
 如果我们直接执行force_reset  会有什么效果？ 也不行的，因为db在运行，但是在集群中是可以的，
 关于集群怎么配置，我们后面的章节中个，会给大家去讲

 接下来我们来看下集群的管理
 因为集群的内容，我们会放在后面讲集群的时候，给大家一起讲 因为所有的集群的操作，都需要rabbitmqct这个工具来设置，所以说大家要对这个工具有一定的认识
 首先要把某个节点加到集群中去， 它以内存节点的形式还是磁盘节点的形式，
 然后是看集群的状态，
 问题8：逻辑过程
 修改集群节点的ram或者disc 默认节点都是磁盘节点  有什么不同呢？ 内存节点，就是说数据都是内存里
 ok ram和disc 具体的不细说了，后面给大家去讲
 然后是把节点从集群中拉出来，就是离线

 然后重命名这个集群节点
 然后更新这个集群的节点
然后同步队列，一般我们设置集群的时候，默认设置它同步了 ，当然有这个命令的话，T它是让你手工同步的， 不管是自动同步还是手工同步
然后是清除队列 我们看下在单个节点是否可以使用，首先添加个队列，然后publish，给队列加个message  是可以的  说明此命令在单节点下也可以使用，把这个命令放到集群的分类下 有点牵强
然后是设置集群的名字

第三点是用户管理
 有添加一个用户
 删除一个用户
 修改密码
 清空密码
 验证user 验证 用户名 密码是否正确，  刚才都是curd操作
 设置用户的tags  设置user的角色，此处的tags意义不同 常见的角色  admin等 5种
 list所有的user
 用户管理相对来说比较简单， 同样在UI中可以非常可视化的看到。

第四点是个大点 访问控制  access control 
访问控制的话，可以看到它是什么进行操作的呢》 vhost进行操作的，也可以认为是虚拟主机，，也可以认为是命名空间， 也就是隔离起来，虚拟主机一样

有add  delete list 操作
然后是设置权限操作 对vhost进行操作，
 set_permissions [-p vhost] {user} {conf} {write} {read} 也就是说给某一个user 对某个vhost 设置一个什么样的权限
此命令在ui中，也有的


第5个是 parameter managerment 这个是用一些第三方插件比较多，。 我们用的也是比较少的，

第六个是 policy management 就是政策的一个管理， 那这个的管理在哪里可以用得到呢？ 
对queue的全局设置，用的上这个policy，  
还有一个队列的镜像 也是用这个命令
也就是说什么意思呢？也就是说这个东西还是用的比较多的额，只是现在给大家细讲的话， 可能接受能力，不一样吧


ok接下来的话 server status 服务器状态
那服务器状态什么意思呢？ 其实也就是ui中的connections exchange queues  如何实现的？

1》 list_queues [-p vhost] [queueinfoitem ...]

        rabbitmqctl list_queues name durable exclusive  是否排外的，什么叫排外的，也就是只有他可以使用，不可以被其他使用，一旦访问的consumer丢失了，那么这个队列会自动删除， 如何实现？
		给大家演示了下，是不是很简单
		字段肯定比ui中展示的多。=》所以就有了ui扩展的需要？


  《2》 list_exchanges [-p vhost] [exchangeinfoitem ...]

  《3》 list_bindings [-p vhost] [bindinginfoitem ...]  在ui中没有展示  也就是有多少的routingkey

  《4》 list_connections [connectioninfoitem ...] 如果有人访问，就有当前的额connections 可以看到connections下的各种参数  远比ui中要多得多

  《5》 list_channels [channelinfoitem ...]

        connections =》 channels   建立connections是长连接 ，channels是挂在connection之上的。。 因为开销小嘛

   《6》 status 看下服务器的状态

   《7》 environment 用的就相对多了，就是看下我们的配置文件  关于配置文件，我们下节课给大家讲

   《8》 Miscellaneous 【也就是混合的一些命令】  其实也是关闭close_connection trace_on  设置内存的目前占用大小， 如果超过它这个阈值的话，它会把内存的这个数据刷到硬盘上去， 这个的话，我们用的比较少。

   这个本节课给大家讲到的，命令行工具，大概8点，当然这个工具概括了。我们的rabbitmq的方方面面，比我们的ui强大的多
   这些命令还是非常重要的，因为我们不仅仅是依赖这个ui， ui只是它的一个子集，



   本节课我学到了什么？
   发现了什么问题：1：之前看到ui没有啥感觉？仅仅是一串数字=》知道他是如何实现的，有啥不足，也可以扩展的，
                  2：刷盘
				  3：还是没有仔细的走一遍逻辑过程






http://www.rabbitmq.com/man/rabbitmqctl.1.man.html 

一：rabbitmq control  【rabbitmqctl】  可以管理rabbitmq的方方面面。。。

UI工具可以观看这个rabbitmq的实时状况， http api的方式也可以查看。。。。

ui 和 命令行 的一个子集。


二：usr/rabbitmq/sbin/rabbitmqctl

rabbitmqctl [-n node] [-t timeout] [-q] {command} [command options...]


1. 应用程序和集群的管理 Application and Cluster Management 

   erlang  和 rabbitmq 有区别的。。  

   C#[CLR]     和  Ctrip 的网站

  stop  	erlang node

  stop_app      rabbitmq application

  start_app     

  reset         Return a RabbitMQ node to its virgin state.  【格式化】

                queues / exchanges 。。。。

  force_reset   无条件的设置


2. 集群配置 【Cluster management】  

   RAM 和 DISK。。。
   
   purge_queue [-p vhost] {queue}   用于清空某一个队列


3. 用户管理 User management

    add_user {username} {password}

    set_user_tags {username} {tag ...}   设置users的角色

    authenticate_user {username} {password}  验证用户名，密码是否正确


4. Access control
   
   set_permissions [-p vhost] {user} {conf} {write} {read}


5. Parameter Management  【第三方插件比较多】

6. 政策的管理 		【Policy Management】   对queue的全局设置用的上这个“政策“，
						队列的镜像也是用这个命令。
7.服务器状态 【Server Status】

  《1》 list_queues [-p vhost] [queueinfoitem ...]

        rabbitmqctl list_queues name durable exclusive

  《2》 list_exchanges [-p vhost] [exchangeinfoitem ...]

  《3》 list_bindings [-p vhost] [bindinginfoitem ...]

  《4》 list_connections [connectioninfoitem ...]

  《5》 list_channels [channelinfoitem ...]

        connections =》 channels   建立connections是长连接 ，channels是挂在connection之上的。。

   《6》 status

   《7》 environment

   《8》 Miscellaneous 【混合一些命令】 

     

  

