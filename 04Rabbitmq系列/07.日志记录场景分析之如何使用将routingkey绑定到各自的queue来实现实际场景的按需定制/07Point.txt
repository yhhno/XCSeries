缺少用脑子？=》如何纠正=》然后才是如何用脑子？
缺少逻辑过程，老是经验主义
一看到就怕？怕就不会进行下去了
如何用脑子呢？无比自信的，情绪高昂的 时刻分析情况，看到本质，预想方案

终极问题：怎么样的状况，我自己去学东西时能有这效果呢？=》是不是缺少个对一个事情真正认识的例子，作为对比。或者说是一个渐变的过程，不是有一个招式就可以了=》也类似于，我到底要掌握什么样的能力，=》才能像优秀的人一样，才能做好每一件事呢。=》我们根本就没有逻辑过程这个意识。=》心中事先没有个预想的过程。=》=》消除一开始的慌，预想下，然后参考某个例子，去进行，也就是说要有某个模式，不可能我些什么都是从零开始的把=》我跟这个课程学习，就是按照作者的标准来行事，也就是学习一个高标准=》为什么跟他学好简单，自己学好难哦=》是不是模式有问题，=》这些根本就不够，预想了内容，但是我们能自我去实现这些内容吗？=》也就是不知道该怎么进行，有了逻辑过程的念头，那逻辑过程怎么推进，傻了眼=》一个小小的问题，就可能引起了卡壳。 太脆弱了
终极要求： 我不是靠着经验去做事的，去活的。  =》要用脑子去学，去做，去观察。=>如何用脑子呢？无比自信的，情绪高昂的 时刻分析情况，看到本质，预想方案
疑问： 为什么跟他学好简单，自己学好难哦=》是不是模式有问题，
问题：即便是跟着学习过一遍，还是独自没有仔细的走一遍逻辑过程 =》巨大的问题，当我课后自己去实践代码时，竟然毫无头绪不知道干什么？如何下手？=》什么原因造成的、

我怎么忘了之前是多么的优秀呢？
既然他没有很多新的概念，所以我就可以很快速的去完成，


问题6：这就是http协议vs 之前接触http协议是什么样子呢？http和request，根本就没关联起来，这说明了什么?=>当时的学习方式有问题，非常片面，不系统，导致只是简单了解下，对底层知识这种程度的了解 怎么能去学习更高层次的知识呢？
问题0：如果是我学些的话：看一篇文章，有实例的那种，也许会demo下，也许就收藏了，而且毫无感觉VS用脑子的，有感觉得进行：先概况和本质，再安装，再管理，再详解配置文件，连接rabbitmq，交换机机制direct之workqueue，交换机机制direct之routing=》他怎么就可以一步一步推进呢？


问题1：做一个系统，先分析需求=》寻找需求，察觉需求，，分析需求=》该怎么落实呢？
问题2:需求如何和特性结合起来呢？或者基于特性实现呢？=》也就是如何理解这句话  这debug,info,warning 三个，这些级别可以专门用一个队列来存放
问题2.1 之前看到这句话，完全不知道该怎么办？自己应该对这个特性也不是很理解，蒙了，如果是之前了解的类似的东西，还可以借鉴操作下
问题2.2 如何纠正这个问题呢？
问题3；当时心中想了下，不知道如何实现？应该是和过去的经验检索了下，没有发现匹配的额，=》经验主义
问题3：我犯了一个错误： 我当时是这样想的，我mytest改成log_else，走下去，那log_error怎么处理呢？ =》典型的经验主义，以前的一个队列一个key，一个exchange，=》经验主义也可以接着往下走下去呀，主要是走下去，也许就越走越明白了

但是直联到底是什么意思呢？ 此时我还不明白。


大家好，本节课，我们继续来讲direct的第二个应用，那么第二种应用就是routing
那routing大概是怎样的一个应用场景呢？
比如说我们拿日志记录来说吧，
首先我们来看下我们的rabbitmq它本身可以记那些日志？
 
   %% Log levels (currently just used for connection logging).

   %% One of 'debug', 'info', 'warning', 'error' or 'none', in decreasing

   %% order of verbosity. Defaults to 'info'.

   %%

    {log_levels, [{connection, error}, {channel, error}]}
我们可以看到，当前的话呢，有debug info warning error none共5个
现在说，如果让你实现一个日志系统 你怎么做呢？ 
我以前在携程的时候，看过他们的日志系统，反正非常清楚吧，当然它是在各个地方通过tcp形式全部打到hadoop集群里，然后做日志分析吧

那如果说让你实现一个日志系统 该怎么做呢？
常见的我们知道有debug info warning error none， 那么我们该怎么实现呢？
问题1：做一个系统，先分析需求=》寻找需求，察觉需求，，分析需求=》该怎么落实呢？
比如说，可能有需求了这个debug info信息量比较大，但是的话呢，或者加上warning   这debug,info,warning 三个，这些级别可以专门用一个队列来存放， 对吧，这个没问题， 因为日志量大，没关系， 这些只是供我们后续去查看，因此处理慢没有关系，只是供我们去查看而已
如果说你的系统中碰到了error，这个需要立即得到响应，发送相关短信通知各处责任人，因为你马上要知道， 发现一个error，这个error就要马上处理，
针对这样的一个需求的话呢，我们应该怎么做呢？
我们看下上节课给大家讲到的原理，上节课我们讲到了直联， 也就是说根据routingkey，把消息丢给指定的queue，
仔细想的话结合需求
问题2:需求如何和特性结合起来呢？或者基于特性实现呢？=》也就是如何理解这句话  这debug,info,warning 三个，这些级别可以专门用一个队列来存放
问题2.1 之前看到这句话，完全不知道该怎么办？自己应该对这个特性也不是很理解，蒙了，如果是之前了解的类似的东西，还可以借鉴操作下
问题2.2 如何纠正这个问题呢？
我们把debug info warning这三个丢给 mytest1，=》结合原理，逻辑过程走一遍，
可以把error丢给其他队列  
对不对
这就是我们设计日志系统的一个想法
ok
我们可以用一张图来表示，
我们有两个队列，一个放error消息， 一个放其他的e
其实上节课，我们也讲到了exchange只是逻辑上的概念，本质上数据库上有一张表的，来记录了exchange和queue和routingkey之间的关系
其实我们可以看到，如果routingkey为debug ，outingkey为info，outingkey为warning的话，全部推到mytest队列上， 
如果routingkey为error的话，就推到mytest2队列上去，
原理就是这样的
因为这样的分配逻辑的话，我们根本就不要在自己程序去实现分配逻辑，直接通过我们的rabbitmq本身的特性去做？ 我们只需要把消息对给rabbitmq，它自动会把message打到各自的队列中去，只要exchange routingkey，绑定到了指定的queue就可以了， 对不对
其实在我们的路由表中是怎么样的呢？
毕竟我们的rabbitmq使用erlang写的，路由表放在数据库中，

问题3；当时心中想了下，不知道如何实现？应该是和过去的经验检索了下，没有发现匹配的额，=》经验主义
然后来实现下我们的代码吧，

首先publish
我们看下要不要改动
只需要把msg  msg到底是哪个级别  我们要定义下， 当然其实最好的方式是不要通过代码去定义，，我们这个地方为了演示，用代码定义，
问题3：我犯了一个错误： 我当时是这样想的，我mytest改成log_else，走下去，那log_error怎么处理呢？ =》典型的经验主义，以前的一个队列一个key，一个exchange，=》经验主义也可以接着往下走下去呀，主要是走下去，也许就越走越明白了
首先定义两个队列
  ConnectionFactory connectionFactory = new ConnectionFactory
            {
                HostName = "127.0.0.1",
                UserName = "qqqqqq",
                Password = "qqqqqq",
                //其他的设置，用默认的，此处不设置，
            };

            //第一步：创建connection
            var connection = connectionFactory.CreateConnection();

            //第二步：创建一个channel
            var channel = connection.CreateModel();

            //第三步：申明交换机【因为rabbitmq已经有了自定义的ampq default exchange】  我们当然也可以自定义交换机  也就是显式的指定自定义的交换机，非隐式指定默认的交换机   consumer是直接读队列的，所以交换机可以不声明
            channel.ExchangeDeclare("myexchange", ExchangeType.Direct, true, false, null);//也就是说有个交换机对象，像direct只是个类型而已=>用脑子去想



            //以上的四步算是连接rabbitmq，后面的步骤是具体操作=》有这个认识是，心中有个架构图
            //第四步：声明一个队列(queue) 此处的队列如果不声明的话，可能会有个坑，=》consumer是直接读队列的，如果先运行consumer的话，如果没有指定的队列存在会出错的
            channel.QueueDeclare("log_else", true, false, false, null);
            channel.QueueDeclare("log_error", true, false, false, null);

            //如果是自定义exchange的话，需要把queue绑定到自定义的exchange上，容易出错，但如果是隐式的话，这些工作由rabbitmq默认完成了。
            //也就是说在erlang的measia数据库中个，有一个路由表，有三个列 exchangename queuename routingkey ，bind就是向这张表插入一条数据，，供以后使用，
            //此需求，必须实现自定义exchange， 默认的无法实现
            //也说明了，自定义exchange，更灵活，可以实现更强大的功能
            //此处有个问题：队列 exchange的声明，相互间的binding，应该是在管理端去完成，在publish端完成这个逻辑的绑定是不是不符合常理，也可以定义在消费端=》说明了无论publish consumer不仅仅是做publish和消费的工作，还是管理rabbitmq。=》主方向
            //当然这些东西，能不在代码中实现，就不要在代码中实现
            //潜在的一个问题：不要例子这样写，就认为全部都是这样=》找准主方向
            channel.QueueBind("log_else", "myexchange", "debug", null);//routingkey默认是队列名，那也可以自己定义=》可以自定义的这个特性，可以实现是什么功能呢
            channel.QueueBind("log_else", "myexchange", "info", null);
            channel.QueueBind("log_else", "myexchange", "warning", null);
            channel.QueueBind("log_error", "myexchange", "error", null);//一个consumer只消费一个queue，所以不关error=》当时我还想着如何在一个地方处理不同的情况呢？=》分析不清楚，=》逻辑过程没走，经验主义=>之前想的是一个consumer只处理一个queue，但此时只是定义，不是处理queue呀，所以说可以全部定义的，当然也可以在两个处理queue中分别去定义，绑定

            ////优化版本
            //var attr = new string[]{ "debug", "info","warning" };
            //for (int i = 0; i < attr.Length; i++)
            //{
            //    channel.QueueBind("log_error", "myexchange",attr[i], null);/routingkey默认是队列名，那也可以自己定义=》可以自定义的这个特性，可以实现是什么功能呢

            //}
            //channel.QueueBind("log_error", "myexchange", "error", null);//一个consumer只消费一个queue，所以不关error=》理解有问题


            //主动获取
            //var result = channel.BasicGet("mytest", true);
            //var msg = Encoding.UTF8.GetString(result.Body);//result中有好多东西，相当于message的存储，

            EventingBasicConsumer consumer = new EventingBasicConsumer(channel);
            //consumer.Received += Consumer_Received;
            consumer.Received += (sender, e) =>//匿名函数   e相当于restult，但是少了没有指定从哪个队列去获取数据
            {
                //获取msg
                var msg = Encoding.UTF8.GetString(e.Body);

                //只是我们此处的消费是把message输出，当然可以做其他操作。=》用脑子去想
                Console.WriteLine(string.Format("我对message：{0},进行了消费，消费方式其实输出到控制台，当然有其他的方式", msg));
            };

            channel.BasicConsume("log_else", false, consumer);

            Console.Read();//把进程拦住。


publish怎么去做呢？ 队列，交互机，绑定，都在consumer端完成了，这里我们就不担心了，不管了额
因为发布是其他的业务程序，他才不管你有什么东西呢？只是使用 也就是发布
此时的交换机和routingkey是要知道的，=》心中有架构图
routingkey要根据log的级别了=》逻辑过程
方便演示可以如下
    var level = i % 13 == 0 ? "info" : "error";


 ConnectionFactory connectionFactory = new ConnectionFactory
            {
                HostName = "127.0.0.1",
                UserName = "qqqqqq",
                Password = "qqqqqq",
                //其他的设置，用默认的，此处不设置，
            };
            //第一步：创建connection
            var connection = connectionFactory.CreateConnection();
            //第二步：创建一个channel
            var channel = connection.CreateModel();
            //第三步：申明交换机【因为rabbitmq已经有了自定义的ampq default exchange】 我们当然也可以自定义交换机  也就是显式的指定自定义的交换机，非隐式指定默认的交换机  publish是直接把消息推给交换机的，但交换机有默认的，所以交换机可以不声明
            channel.ExchangeDeclare("myexchange", ExchangeType.Direct, true, false, null);//也就是说有个交换机对象，像direct只是个类型而已=>用脑子去想

            //第四步：创建一个队列(queue)
            channel.QueueDeclare("log_else", true, false, false, null);
            channel.QueueDeclare("log_error", true, false, false, null);

            //如果是自定义exchange的话，需要把queue绑定到自定义的exchange上，容易出错，但如果是隐式的话，这些工作由rabbitmq默认完成了。
            //也就是说在erlang的measia数据库中个，有一个路由表，有三个列 exchangename queuename routingkey ，bind就是向这张表插入一条数据，，供以后使用，
            //此需求，必须实现自定义exchange， 默认的无法实现
            //也说明了，自定义exchange，更灵活，可以实现更强大的功能
            //此处有个问题：队列 exchange的声明，相互间的binding，应该是在管理端去完成，在publish端完成这个逻辑的绑定是不是不符合常理，也可以定义在消费端=》说明了无论publish consumer不仅仅是做publish和消费的工作，还是管理rabbitmq。=》主方向
           //当然这些东西，能不在代码中实现，就不要在代码中实现
            //潜在的一个问题：不要例子这样写，就认为全部都是这样=》找准主方向
            channel.QueueBind("log_else", "myexchange", "debug", null);//routingkey默认是队列名，那也可以自己定义=》可以自定义的这个特性，可以实现是什么功能呢
            channel.QueueBind("log_else", "myexchange", "info", null);
            channel.QueueBind("log_else", "myexchange", "warning", null);
            channel.QueueBind("log_error", "myexchange", "error", null);//consumer定义的话可以忽略这个，但publish呢 =》理解有问题

            ////优化版本
            //var attr = new string[]{ "debug", "info","warning" };
            //for (int i = 0; i < attr.Length; i++)
            //{
            //    channel.QueueBind("log_error", "myexchange",attr[i], null);/routingkey默认是队列名，那也可以自己定义=》可以自定义的这个特性，可以实现是什么功能呢

            //}
            //channel.QueueBind("log_error", "myexchange", "error", null);//consumer定义的话可以忽略这个，但publish呢 =》理解有问题

            for (int i = 0; i < 100; i++)
            {

                var msg = Encoding.UTF8.GetBytes(string.Format("{0}+{1}", i, "你好")); //因为我们要生成byte数组

                var level = i % 13 == 0 ? "info" : "error";

                //以上的四步算是连接rabbitmq，后面的步骤是具体操作  =》有这个认识是，心中有个架构图
                //第五步：发布消息   发布消息都用basic前缀=》先推个交换机，后续工作，交换机完成，如把消息推到指定的队列中
                //channel.BasicPublish(string.Empty, "mytest", null, msg);
                channel.BasicPublish("myexchange", routingKey: level, basicProperties: null, body: msg);
            }


            Console.Read();//拦住这个进程。
            //为啥不释放，释放了ui中就看不到了
            //using。。。。
            //channel.Dispose();
            //connection.Dispose();

此时routing的目的，已经达到了




一：日志级别
 
   %% Log levels (currently just used for connection logging).

   %% One of 'debug', 'info', 'warning', 'error' or 'none', in decreasing

   %% order of verbosity. Defaults to 'info'.

   %%

    {log_levels, [{connection, error}, {channel, error}]}

    日志系统。（实现一个日志系统）



debug,info,warning 这些级别可以专门用一个队列来存放。。。 处理慢没有关系，只是供我们去查看而已。。。


error：这个需要立即得到相应，发送相关短信通知各处责任人。。。。


从图中可以看出，我们根据不需要在自己的application去实现这样的分配逻辑。。。


在发布端做这个逻辑的绑定，是不是不和常理。。。？？？？







