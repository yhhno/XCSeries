最重要的就是情绪，心态。它在开始，它贯穿了始终。它影响其他
缺少用脑子？=》如何纠正=》然后才是如何用脑子？
缺少逻辑过程，老是经验主义
一看到就怕？怕就不会进行下去了
如何用脑子呢？无比自信的，情绪高昂的 时刻分析情况，看到本质，预想方案

终极问题：怎么样的状况，我自己去学东西时能有这效果呢？=》是不是缺少个对一个事情真正认识的例子，作为对比。或者说是一个渐变的过程，不是有一个招式就可以了=》也类似于，我到底要掌握什么样的能力，=》才能像优秀的人一样，才能做好每一件事呢。=》我们根本就没有逻辑过程这个意识。=》心中事先没有个预想的过程。=》=》消除一开始的慌，预想下，然后参考某个例子，去进行，也就是说要有某个模式，不可能我些什么都是从零开始的把=》我跟这个课程学习，就是按照作者的标准来行事，也就是学习一个高标准=》为什么跟他学好简单，自己学好难哦=》是不是模式有问题，=》这些根本就不够，预想了内容，但是我们能自我去实现这些内容吗？=》也就是不知道该怎么进行，有了逻辑过程的念头，那逻辑过程怎么推进，傻了眼=》一个小小的问题，就可能引起了卡壳。 太脆弱了
终极要求： 我不是靠着经验去做事的，去活的。  =》要用脑子去学，去做，去观察。=>如何用脑子呢？无比自信的，情绪高昂的 时刻分析情况，看到本质，预想方案
疑问： 为什么跟他学好简单，自己学好难哦=》是不是模式有问题，
问题：即便是跟着学习过一遍，还是独自没有仔细的走一遍逻辑过程 =》巨大的问题，当我课后自己去实践代码时，竟然毫无头绪不知道干什么？如何下手？=》什么原因造成的、

我怎么忘了之前是多么的优秀呢？
既然他没有很多新的概念，所以我就可以很快速的去完成，


问题6：这就是http协议vs 之前接触http协议是什么样子呢？http和request，根本就没关联起来，这说明了什么?=>当时的学习方式有问题，非常片面，不系统，导致只是简单了解下，对底层知识这种程度的了解 怎么能去学习更高层次的知识呢？
问题4：确实主方向，一次过程是这样的，一次publish是发布一个message，message是不是到了一个exchange，是，那一个exchange是不是把消息是不是发送给一个queue，不一定，那一个queue是不是只有一个consumer，不一定，其中，只有publish丢个消息，和设置好条件，其他的都是自动完成，=》就是用形成这样的认识，才透彻，当然是要在一个主方向的前提下了。=》当然实际过程是，多次publish=》
问题4.1要扩展思维，不仅仅是在一个程序里处理所有东西。
问题3:业务的分析，我怎么能分析出两条路呢。以及每条路是怎么走的呢？  这是个大学问？
问题1：新东西，应该是新机制，好奇他到底是什么呢？ 当时是和direct是不同的，不然怎么新的呢？=》先缺少脑子，再缺少逻辑过程=》逻辑过程必须有个模式，必须要总结出来=>这个是学习的逻辑过程
问题4.1不太理解， =》那就试着去理解，想想既然是解决了轮询，那轮询是干嘛的，是像服务器询问有消息不，而这是有消息有自动发送给你，就是queue发消息给你consumer=》虽然不太理解，但还是要尝试去理解的。=》找个方向点去理解
问题6：命令行实时在心中，逻辑过程不可少，也说明了对reset理解不够，仅仅是格式化，格式化后是什么效果，实际是不清楚的，=这个是学习的逻辑过程有问题
问题0：当时看到这里时，心里就充满了怕怕的，蒙的，不知道我自己要做什么了。
问题1：一开始看到这段英文肯定是心里怕怕的，要做的就是战胜这种怕怕，去找个主方向，走一下逻辑过程，把它给了解透透的
问题1.1 只有英文介绍，那英文阅读是不是很重要
问题1：到现在，我们才讲到消息队列的本质，不是应该在第一节课就讲到吗？也就是在此之前，就一直不知道为何而奔跑。
问题7： C#驱动有rpc的简单实现，=》我能不能从高层概念了解到最底层的逻辑过程？ 或者是能不能从很多信息中，总结出一个主方向，一个逻辑过程呢
问题8：如何封装也是一个技巧，=》当我知道最底层的过程，能不能写出来，=》写出来能不能封装下，
问题0:理解和知道如何实现，同样重要，应该先理解，后知道如何实现，如果都不知道怎么用？那谈什么实现呢?
问题4：逻辑过程缺失=>顺着他的文档，很容易缺失逻辑过程=》我学习就是学习他的方法，形成自己的方法论，这现象可不好

总结技巧=》或者是学习方法，就是要总结个模式，然后在去学习新东西时，如虎添翼。不然真的是讲到那个程度就学到那个程度。=>最终要形成各个思维导图，了然于胸，这样对特性了解清楚，才能结合业务，去实现业务呀
0.心态情绪信念热情                                                            =》最重要
0.切记经验主义，要不厌其烦的主方向+逻辑过程
1.学习一个技术的目的也就是本质，如消息队列的本质是将同步系统异步化               =》主方向
2.一个技术的脉络或者架构图 和实现的细节 如wcf的soa思想和binding的分类，和rabbitmq的架构图   =》逻辑过程
3.这只是学习能力，最多是理解，往后的应用能力呢，更别说设计能力了啦，=》非常欠缺=》那欠缺的是什么呢？

问题0：如果是我学些的话：看一篇文章，有实例的那种，也许会demo下，也许就收藏了，而且毫无感觉VS用脑子的，有感觉得进行：先概况和本质，再安装，再管理，再详解配置文件，连接rabbitmq，（此后就是细节）交换机机制direct之workqueue，交换机机制direct之routing，交换机机制fanout之发布订阅，交换机机制headers,交换机机制topic,rabbitmq层面实现rpc,queuedeclare函数详解，queuedeclare函数参数arguments详解01，queuedeclare函数参数arguments详解02，basic也就是message01=》他怎么就可以一步一步推进呢？最重要的就是情绪，心态。它在开始，它贯穿了始终。它影响其他
缺少用脑子？=》如何纠正=》然后才是如何用脑子？
缺少逻辑过程，老是经验主义
一看到就怕？怕就不会进行下去了
如何用脑子呢？无比自信的，情绪高昂的 时刻分析情况，看到本质，预想方案

终极问题：怎么样的状况，我自己去学东西时能有这效果呢？=》是不是缺少个对一个事情真正认识的例子，作为对比。或者说是一个渐变的过程，不是有一个招式就可以了=》也类似于，我到底要掌握什么样的能力，=》才能像优秀的人一样，才能做好每一件事呢。=》我们根本就没有逻辑过程这个意识。=》心中事先没有个预想的过程。=》=》消除一开始的慌，预想下，然后参考某个例子，去进行，也就是说要有某个模式，不可能我些什么都是从零开始的把=》我跟这个课程学习，就是按照作者的标准来行事，也就是学习一个高标准=》为什么跟他学好简单，自己学好难哦=》是不是模式有问题，=》这些根本就不够，预想了内容，但是我们能自我去实现这些内容吗？=》也就是不知道该怎么进行，有了逻辑过程的念头，那逻辑过程怎么推进，傻了眼=》一个小小的问题，就可能引起了卡壳。 太脆弱了
终极要求： 我不是靠着经验去做事的，去活的。  =》要用脑子去学，去做，去观察。=>如何用脑子呢？无比自信的，情绪高昂的 时刻分析情况，看到本质，预想方案
疑问： 为什么跟他学好简单，自己学好难哦=》是不是模式有问题，
问题：即便是跟着学习过一遍，还是独自没有仔细的走一遍逻辑过程 =》巨大的问题，当我课后自己去实践代码时，竟然毫无头绪不知道干什么？如何下手？=》什么原因造成的、

我怎么忘了之前是多么的优秀呢？
既然他没有很多新的概念，所以我就可以很快速的去完成，


问题6：这就是http协议vs 之前接触http协议是什么样子呢？http和request，根本就没关联起来，这说明了什么?=>当时的学习方式有问题，非常片面，不系统，导致只是简单了解下，对底层知识这种程度的了解 怎么能去学习更高层次的知识呢？
问题4：确实主方向，一次过程是这样的，一次publish是发布一个message，message是不是到了一个exchange，是，那一个exchange是不是把消息是不是发送给一个queue，不一定，那一个queue是不是只有一个consumer，不一定，其中，只有publish丢个消息，和设置好条件，其他的都是自动完成，=》就是用形成这样的认识，才透彻，当然是要在一个主方向的前提下了。=》当然实际过程是，多次publish=》
问题4.1要扩展思维，不仅仅是在一个程序里处理所有东西。
问题3:业务的分析，我怎么能分析出两条路呢。以及每条路是怎么走的呢？  这是个大学问？
问题1：新东西，应该是新机制，好奇他到底是什么呢？ 当时是和direct是不同的，不然怎么新的呢？=》先缺少脑子，再缺少逻辑过程=》逻辑过程必须有个模式，必须要总结出来=>这个是学习的逻辑过程
问题4.1不太理解， =》那就试着去理解，想想既然是解决了轮询，那轮询是干嘛的，是像服务器询问有消息不，而这是有消息有自动发送给你，就是queue发消息给你consumer=》虽然不太理解，但还是要尝试去理解的。=》找个方向点去理解
问题6：命令行实时在心中，逻辑过程不可少，也说明了对reset理解不够，仅仅是格式化，格式化后是什么效果，实际是不清楚的，=这个是学习的逻辑过程有问题
问题0：当时看到这里时，心里就充满了怕怕的，蒙的，不知道我自己要做什么了。
问题1：一开始看到这段英文肯定是心里怕怕的，要做的就是战胜这种怕怕，去找个主方向，走一下逻辑过程，把它给了解透透的
问题1.1 只有英文介绍，那英文阅读是不是很重要
问题1：到现在，我们才讲到消息队列的本质，不是应该在第一节课就讲到吗？也就是在此之前，就一直不知道为何而奔跑。
问题7： C#驱动有rpc的简单实现，=》我能不能从高层概念了解到最底层的逻辑过程？ 或者是能不能从很多信息中，总结出一个主方向，一个逻辑过程呢
问题8：如何封装也是一个技巧，=》当我知道最底层的过程，能不能写出来，=》写出来能不能封装下，
问题0:理解和知道如何实现，同样重要，应该先理解，后知道如何实现，如果都不知道怎么用？那谈什么实现呢?
问题4：逻辑过程缺失=>顺着他的文档，很容易缺失逻辑过程=》我学习就是学习他的方法，形成自己的方法论，这现象可不好
问题2：新概念，消息的确实， =》正是这些新概念导致我的学习难以进行，=》要解决这个问题
问题0：对内存，磁盘，网络io都没什么概念，没有把他们当做评判的标准


总结技巧=》或者是学习方法，就是要总结个模式，然后在去学习新东西时，如虎添翼。不然真的是讲到那个程度就学到那个程度。=>最终要形成各个思维导图，了然于胸，这样对特性了解清楚，才能结合业务，去实现业务呀
0.心态情绪信念热情                                                            =》最重要
0.切记经验主义，要不厌其烦的主方向+逻辑过程
1.学习一个技术的目的也就是本质，如消息队列的本质是将同步系统异步化               =》主方向
2.一个技术的脉络或者架构图 和实现的细节 如wcf的soa思想和binding的分类，和rabbitmq的架构图   =》逻辑过程
3.这只是学习能力，最多是理解，往后的应用能力呢，更别说设计能力了啦，=》非常欠缺=》那欠缺的是什么呢？

问题0：如果是我学些的话：看一篇文章，有实例的那种，也许会demo下，也许就收藏了，而且毫无感觉VS用脑子的，有感觉得进行：先概况和本质，再安装，再管理，再详解配置文件，连接rabbitmq，（此后就是细节）交换机机制direct之workqueue，交换机机制direct之routing，交换机机制fanout之发布订阅，交换机机制headers,交换机机制topic,rabbitmq层面实现rpc,queuedeclare函数详解，queuedeclare函数参数arguments详解01，queuedeclare函数参数arguments详解02，basic也就是message01，basic也就是message02=》他怎么就可以一步一步推进呢？

问题0：对内存，磁盘，网络io都没什么概念，没有把他们当做评判的标准
问题1：我们至少用到了6个属性有点遗忘了
问题2：逻辑过程缺失，queue exchange都可以持久化，为什么最重要的message，不可以持久化呢》 咋就没想到呢？
问题3：理解透彻才可以，效果也要了解，没有效果就不知道使用的价值？就不知道合适使用额？
问题4：方方面面 真正的理解才可以的



大家好，上节课讲到了message级别控制，包括包括bassic的一些方法
这节课我们给大家讲message的一些属性
message中的 CreateBasicProperties
这个就类似于声明队列中的属性 对不对
1. 一个非常神秘的属性  
问题1：我们至少用到了6个属性有点遗忘了
在之前的文章中，我们至少用到了6个属性。。。包括我们的exchange header。。。这个模式。。。 这个属性是非常重要的，
问题2：逻辑过程缺失，queue exchange都可以持久化，为什么最重要的message，不可以持久化呢》 咋就没想到呢？
2. 而且我们遗留了一个非常大的问题。。。就是持久化。。。

在讲exchange，queue的时候，都有一个持久化的概念。。。 到这个mnesia。。。数据库中去。。。
那 message呢？ 它持久化了吗？？
有没有被持久化呢，很简单，我们来试下，
我们塞一些数据，到队列中 
重启服务器，
数据没有了
说明没有被持久化
那问题来了，如何持久化message
ui添加message时，可以选择持久化
但是我们用代码实现下
k看截图


二：lazy Queue

1. 懒队列。。。 C#代码中。有这个lazy特性	 【本质都是用到的时候才加载】  3.6.0 加载的。。	3.6.6了。。
怎么用呢？我们看下官方的文档
文档中说了可以在声明队列时设置，也可以在server进行设置
问题3：理解透彻才可以，效果也要了解，没有效果就不知道使用的价值？就不知道合适使用额？
Lazy Queue： 就是数据来了，我就将其放到disk中，而且。。。内存中不存放。。。。(只有Requested by Consumer ) ，有了特性肯定有效果才可以，效果当consumer长时间不工作时，是非常节省内存的，

Default Queue: (in-memory） 就是数据来了，数据直接放到内存中。。。。

   		       （on disk)   就是数据来了，会将数据放到内存中，同时还会将message放到disk中。。。等到内存有压力
		               或者gc需要回收内存等等情况，会将memory paged out 到disk中。。。

问题4：方方面面 真正的理解才可以的
演示下
可以将Queue插入int.maxvalue条数据。。。看看memory的情况。。。。

1. Lazy Queue + inMemory  = 还会将message放到 disk中。。。    可以看到，内存只有几M的增长。。。 此时消息只是放在disk中，没有放在内存中，但inmemory的存在说明还是没有持久化，重启后消息还会丢失

2. Default Queue + InMemory = 将message放到 memory中，，内存会涨上去，如果你采用的是inmemory，在内存急缺的情况下还是会paged out。。。所以增长到一个值，又变小了，再增长，再变小，但inmemory的存在说明还是没有持久化，重启后消息还会丢失

3. Lazy Queue + Disk  =   将message放到 disk中， 内存不会涨上去，Disk的存在说明了持久化，所以会在restart之后message还会保存。。。

4. Default Queue + Disk =  将message放到 memory中， 内存会涨上去，而且在内存急缺的情况下还是会paged out ，这是内存 + 磁盘 都会数据。。。。Disk的存在说明了持久化，所以会在restart之后message还会保存。。。



一：message中的 CreateBasicProperties

1. 一个非常神秘的属性  

    在之前的文章中，我们至少用到了6个属性。。。包括我们的exchange header。。。这个模式。。。

2. 遗留了一个非常大的问题。。。持久化。。。

   exchange，queue的时候，都有一个持久化的概念。。。 mnesia。。。数据库中去。。。

   message呢？ 它持久化了吗？？


二：lazy Queue

1. 懒队列。。。 C#代码中。	 【用到的时候才加载】  3.6.0 加载的。。	3.6.6了。。

   Lazy Queue： 数据来了，我就将其放到disk中，而且。。。内存中不存放。。。。(Requested by Consumer )

   Default Queue: (in-memory） 数据直接放到内存中。。。。

   		  （on disk)   会将数据放到内存中，同时还会将message放到disk中。。。等到内存有压力
		               获取gc需要回收内存等等情况，会将memory paged out 到disk中。。。


可以将Queue插入int.maxvalue条数据。。。看看memory的情况。。。。

1. Lazy Queue + inMemory  = 还会将message放到 disk中。。。    可以看到，只有几M的增长。。。

2. Default Queue + InMemory = 如果你采用的是inmemory，在内存急缺的情况下还是会paged out。。。

3. Lazy Queue + Disk  =    内存不会涨上去，而且会在restart之后message还会保存。。。

4. Default Queue + Disk =  内存 + 磁盘 都会数据。。。。
