设计模式,也就是设计过程中的解决问题,设计的套路总结? 怎么去设计?怎么去解决? 这是个问题? 是个核心能力?  需要训练?  要有大前提? 要有环境?
思路一步一步都记下来.
1.正确分析问题思路:没有查看类图=> 类图是什么?=>一个cd文件=>1.附加个现成的cd文件=>不识别=>2.看是否能添加cd文件=>发现没有=>通过方式1和方式2 应该可以判断出是template缺失?=>添加即可====> 最终定位为template
2.错误的分析问题方式:流于表面的瞎百度, 根本没思考.就困在这里,毫无有用的瞎转悠=> 错误归错误,不要影响积极的情绪=====>最终定位为方式或思路错误,赶快调整.
3.最重要的是方式错误时和情绪时的调整. 也就是心理素质.
4.分析步骤:	类似于while?如何理解? while(true)  什么是true条件? 肯定不是console.writeline(). 那只能是movenext()=> while(movenext()){console.writeline(current).};    movenext如何实现的恩?  其实很简单了? 历史没有真相,只残存一个道理.. movenext的道理是什么?
5.有时关注点放错了,困在某个点,,有时是没深入分析,困在表面
6.概念一知半解,流程不深究没概念. 逻辑推理分析没形成习惯. 也没有正确的模型.
7.我从来不觉得我比别人差
8.进入状态比较慢, 
9.出了问题,,残存什么样的道理?  做啥动作? 为啥目的? 用啥材料? 用啥逻辑? 有啥方式?
10.怀疑一切,或者任何事我也可以做.
11.有点不认真,没有边学边思考,边推理. 效率不高,还返工,,,你有多成功,取决于你有多渴望成功.
12.目的是啥? 这就是此时的主体? 主体都搞不清楚? 容易困于某个点,此时的监控,感应通知等


一：观察者模式  非常实用的,很多的软件和架构都实现了观察者模式.  观察者模式到底是干嘛的呢? 什么样的目的呢? 同步? 响应变化?

例如:
一：中间件
1. redis 发布订阅

2. rabbitmq fanout模式  分发一种机制  


二：MVVM模式的js框架

MVVM模式 本质就是 观察者模式 knockoutjs  【js框架】


三：一睹为快
1.Knockoutj是的官网
2.MVVM模式有什么好处? 也就是说有什么震撼

           subject


observer1  oberser2  observer3

有一个主题,很多观察者,它们都监控着subject,如果主题修改, 观察者都会收到通知.也就是协调观察者的一致性修改。。。 如何监控? 如何收到通知? 如何理解协调? 如何理解一致性修改? 是都修改的意思吧? 不一定修改内容也一样? 有点像分支  同一个变化,不同的相应?


不用观察者模式的实现相同效果方式: 什么样的目的呢? 同步? 响应变化?
1.轮询，如果发现subject被修改，observer进行自我更新。  【资源浪费，延迟性(1s检测一次,有延迟)】 为啥资源浪费: 因为你可能涉及到网络通讯(轮询长连接)和线程池,因为你要定期的更新
推 拉

2.主动的推送： 如果subject被修改，subject会主动 向三个observer进行推送通知。。。怎么知道是3个,肯定是向subject进行了注册.
                                  然后observer就可以自我更新   如何主动? 如何推送通知? 如何自我更新?

                                                       【没有浪费，及时性】
也就是观察者
三：代码
1.定义一个ISubject? 主题被修改,肯定有个subjectstate属性,怎么知道有3个observer?肯定是observer想subject进行了注册(注册没啥,也就是add方法),不然咋感知到3个,所以有add方法, 有add肯定有remove,,在哪里存放observer? 主动通知有个通知方法  如何通知?
2.定义一个IObserver, 通知后,observer肯定有个自我更新的过程,所以有个Modify方法  如何自我更新? 如何感知通知? 如何感知通知内容?
3.定义一个具体的ISubject类  concreteSuject类,继承ISubject接口,添加observerlist字段保存注册的observer对象,并实现 add remove   nofity方法
4.定义两个观察者对象concreteobserver1类和concreteobserver2类, 继承IObserver,并实现Modify方法,添加主题和name字段
5.在main函数中调用
6.这是一个什么样的机制呢? 主题一改变,我就发送一个通知就可以了,通知会把修改的内容通知给注册的所有观察者,,所有的观察者都会受到这份通知,各自的函数做自己的处理,这就是协调性,一致性的修改
7. 目的: 简化某种操作?


四：mvvm模式的依赖跟踪特性分析  非常有利于我们写代码, 写更少的代码,做更多的事  此时做的是 同步  简化同步操作?

1. 主题：this.firstName ，this.lastName, this.fullName是一个监控


2. 鼠标离开，有一个blur事件，这个事件会修改firstname的值，当firstname那么被修改，
             触发notify函数，这个时候fullname会收到通知，最终值会被修改。。。也就是同步



1.观察者模式? 观察者模式是干嘛呢? 用在什么地方? 也就是解决什么问题? 同步? 如何实现呢?
2.目的是啥? 这就是此时的主体? 主体都搞不清楚? 容易困于某个点

5.监控,通知,感应通知,协调,一致性修改, 自我更新,轮询 延迟,资源浪费,注册,



  1. 0是什么状态? 怎么演绎? 1是什么状态? 过程遇到什么问题? 有什么样的解决方案?  VS 有什么方案? 解决什么问题?   在正常的流程的大前提下,去看问题, 关注点不能本末倒置.  脱离环境 咋理解呢?
  2.如何演绎的? 第一步是啥?新需求? 如何执行新需求? 有什么问题? 对应有什么解决办法? 解决方法有没新名词? 解释新名词? 执行接下来的一步 ... 重复执行? 这需要细节?
  3.要搞清楚的东西:
		1.多调试,看看顺序执行,分支,跳转,循环等执行路径  多重分支,多级分支, 
		2.同步,异步执行路径  特别是异步没有wait时.
		3.锁执行路径
		为什么要弄清楚呢? 大体情况要了解,避免处于盲区,或者关注点错误.或者没有大前提.
4.如何理清脉络? 有哪些关键点? 如何做到这些关键点? 这些关键点是为了达到什么样的目的? 关键点如何串起来.? 也就是说小目的串起来,达到最终目的?做事是为了达到某些目的? 出了问题?也就是目的没达到,也就是做的事有问题.