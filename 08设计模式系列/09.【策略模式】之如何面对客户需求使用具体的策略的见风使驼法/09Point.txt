设计模式,也就是设计过程中的解决问题,设计的套路总结? 怎么去设计?怎么去解决? 这是个问题? 是个核心能力?  需要训练?  要有大前提? 要有环境?
思路一步一步都记下来.
1.正确分析问题思路:没有查看类图=> 类图是什么?=>一个cd文件=>1.附加个现成的cd文件=>不识别=>2.看是否能添加cd文件=>发现没有=>通过方式1和方式2 应该可以判断出是template缺失?=>添加即可====> 最终定位为template
2.错误的分析问题方式:流于表面的瞎百度, 根本没思考.就困在这里,毫无有用的瞎转悠=> 错误归错误,不要影响积极的情绪=====>最终定位为方式或思路错误,赶快调整.
3.最重要的是方式错误时和情绪时的调整. 也就是心理素质.
4.分析步骤:	类似于while?如何理解? while(true)  什么是true条件? 肯定不是console.writeline(). 那只能是movenext()=> while(movenext()){console.writeline(current).};    movenext如何实现的恩?  其实很简单了? 历史没有真相,只残存一个道理.. movenext的道理是什么?
5.有时关注点放错了,困在某个点,,有时是没深入分析,困在表面
6.概念一知半解,流程不深究没概念. 逻辑推理分析没形成习惯. 也没有正确的模型.
7.我从来不觉得我比别人差
8.进入状态比较慢, 
9.出了问题,,残存什么样的道理?  做啥动作? 为啥目的? 用啥材料? 用啥逻辑? 有啥方式?
10.怀疑一切,或者任何事我也可以做.
11.有点不认真,没有边学边思考,边推理. 效率不高,还返工,,,你有多成功,取决于你有多渴望成功.



一：策略：策略是啥？ 啥时候用呢？ 主体是什么？ 策略是一种行为， 行为是一种算法  也就是一个一个的算法  

案例：
淘宝店优惠： 策略1： 满多少减多少，策略2：满几件减几件，策略3：预售冲抵现金，策略4：几折优惠，


每种策略都是对价格的一种算法。。。把每种策略都封装成策略类，根据配置来选择使用  类似于分支判断.
策略是非常复杂的。定义成策略类方便我们替换.


StrategyContext        abstractStrategy

                    。策略1。。   。策略2。。    。策略3。。


二：记录日志 中 日志写文件 或者 写DB
什么情况下写文件,什么情况下写DB 这是策略的选择

File   业务逻辑可能相对复杂  策略
 
DB     业务逻辑复杂          策略

nosql：  可能后期加

策略模式步骤
1.定义一个抽象类AbstractLog类 定义抽象Write方法
2.定义FileLog和DBLog类,并继承AbstractLog类.并实现各自的策略.
		if (msg.Length > 10)//简单的逻辑,实现自我保护的机制?  也就是处理下异常.
				{
					throw new Exception("");
				}
3.定义策略上下文strategyContext类  是干嘛用? 
4.main函数,调用策略上下文

三：真实案例:短信 和 彩信


如果是普通用户创建的营销活动： leaflet： 直接从数据库读取。。。  【直接策略】

如果是智能【千人千面】的模式。防止运行商屏蔽我们的邮件内容,,随机抽模板,商品不变 【随机策略】


productlist +  style 【随机】   = 【一封邮件】  Razor






1.策略模式? 主体是啥? 策略是啥?
2.定义成类方便替换
3.策略上下文是干嘛的?








   1. 0是什么状态? 怎么演绎? 1是什么状态? 过程遇到什么问题? 有什么样的解决方案?  VS 有什么方案? 解决什么问题?   在正常的流程的大前提下,去看问题, 关注点不能本末倒置.  脱离环境 咋理解呢?
  2.如何演绎的? 第一步是啥?新需求? 如何执行新需求? 有什么问题? 对应有什么解决办法? 解决方法有没新名词? 解释新名词? 执行接下来的一步 ... 重复执行? 这需要细节?
  3.要搞清楚的东西:
		1.多调试,看看顺序执行,分支,跳转,循环等执行路径  多重分支,多级分支, 
		2.同步,异步执行路径  特别是异步没有wait时.
		3.锁执行路径
		为什么要弄清楚呢? 大体情况要了解,避免处于盲区,或者关注点错误.或者没有大前提.
4.如何理清脉络? 有哪些关键点? 如何做到这些关键点? 这些关键点是为了达到什么样的目的? 关键点如何串起来.? 也就是说小目的串起来,达到最终目的?做事是为了达到某些目的? 出了问题?也就是目的没达到,也就是做的事有问题.



