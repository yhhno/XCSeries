
设计模式,也就是设计过程中的解决问题,设计的套路总结? 怎么去设计?怎么去解决? 这是个问题? 是个核心能力?  需要训练?  要有大前提? 要有环境?
思路一步一步都记下来.
1.正确分析问题思路:没有查看类图=> 类图是什么?=>一个cd文件=>1.附加个现成的cd文件=>不识别=>2.看是否能添加cd文件=>发现没有=>通过方式1和方式2 应该可以判断出是template缺失?=>添加即可====> 最终定位为template
2.错误的分析问题方式:流于表面的瞎百度, 根本没思考.就困在这里,毫无有用的瞎转悠=> 错误归错误,不要影响积极的情绪=====>最终定位为方式或思路错误,赶快调整.
3.最重要的是方式错误时和情绪时的调整. 也就是心理素质.
4.分析步骤:	类似于while?如何理解? while(true)  什么是true条件? 肯定不是console.writeline(). 那只能是movenext()=> while(movenext()){console.writeline(current).};    movenext如何实现的恩?  其实很简单了? 历史没有真相,只残存一个道理.. movenext的道理是什么?
5.有时关注点放错了,困在某个点,,有时是没深入分析,困在表面
6.概念一知半解,流程不深究没概念. 逻辑推理分析没形成习惯. 也没有正确的模型.
7.我从来不觉得我比别人差
8.进入状态比较慢, 
9.出了问题,,残存什么样的道理?  做啥动作? 为啥目的? 用啥材料? 用啥逻辑? 有啥方式?
10.怀疑一切,或者任何事我也可以做.



一：原型模式  啥是原型呢?

应用场景: 也就是可以做什么事?
1. 如何动态的(动态就是实例化个对象,静态就是类对象,此时的动态是啥意思? 运行中的任何时刻?)获取一个对象的运行状态，而且可以避免【耗时】new的实例化。。。 因为此时new的实例化特别耗时间, new中都有那些耗时的操作呢?(读文件,读数据库,跨机器连接)   单例模式也是为了防止走构造函数(new耗时)

2. 做对象的copy  为什么要copy?  啥是浅拷贝

   一定要知道，原型模式的copy只是一个浅copy，它并不能copy引用类型。。。(只是引用地址的拷贝,并非引用地址指定堆上的值的拷贝)   
   拷贝引用类型的值:1.拷贝引用地址指定的值,此时引用地址会变,2.切断引用地址 (和1有什么区别) 
  
   
   深copy实现： 啥是深拷贝?  引用类型 值类型
                person本身就是引用类型  说明了什么? 可以延伸什么? 方式1吗?  这说明什么呢?
                1. 让引用类型都实现一个clone方法。。。  从而手工实现这个深copy。。。 有啥小缺点  有血有肉

                2. C# BinaryFormatter 【通过二进制将对象的图进行序列化】  为啥二进制,啥是对象图  为啥序列化


二：基本代码  做啥动作? 为啥目的? 用啥材料? 用啥逻辑? 有啥方式?
1.先定义一个Prototype类,抽象类中有抽象方法Clone  为了啥目的.  这是原型类? 那原型是啥?
2.具体的某一个类比如Person类,来继承这个原型类,达到(如何动态的获取一个对象的运行状态，而且可以避免【耗时】new的实例化)效果,  也就是继承为了获取这种能力  什么样的能力?  继承是为啥?
3.定义一个Address类,关联到Person类  关联是啥?
4.Person类中,添加构造函数,记录是否执行了构造函数  为什么没想到呢? 模拟手段
5.main中实例化一个person 
6.调用Clone,避免了执行构造函数(new耗时),动态获取一个类的运行状态  如何理解动态? 如何理解类的运行状态? 
 static void Main(string[] args)
        {
            var person = new Person()
            {
                Name = "jack",
                Age = 22,
                Address = new Address()//此时明明赋值了,为什么person.Address为null?  什么地方出错了?
                {
                    City = "上海",
                    Province = "上海"
                }
            };

            //叫做动态获取一个类的运行状态, 原来如此, 运行状态是这样理解的?
            //var person2 = person.Clone();  //出了问题? 1.address没有, 2.此时获取对象为object类型, object与person有啥区别?  但值都有
            var person2 = (Person)person.Clone();//person本身就是引用类型  说明了什么? 可以延伸什么?
            Console.WriteLine("执行结束");
            Console.Read();
        }

7.(即时窗口 ctrl+D+I)   监视窗口也可以修改值   工具要用熟
   1.person 
   2.person2  person本身就是引用类型  说明了什么? 可以延伸什么?
   3.person2.Name="SB"  person无影响  值类型
   4.person2.Address.City="北京"  person2.Address.City 有影响  引用类型

8.原型拷贝是个浅拷贝? 值类型拷贝,引用类型不能拷贝, 啥是浅拷贝? 啥叫拷贝呢? 
9.so 要实现深拷贝,  值类型,引用类型都能拷贝
10.方式一: 每个引用类型都实现clone方法, 其实是可以思考到的? 为什么没想到呢?  如何实现clone呢? 如何获取这种能力呢? 继承
 static void Main(string[] args)
        {
            var person = new Person()
            {
                Name = "jack",
                Age = 22,
                Address = new Address()//此时明明赋值了,为什么person.Address为null?  什么地方出错了?
                {
                    City = "上海",
                    Province = "上海"
                }
            };

            //叫做动态获取一个类的运行状态, 原来如此, 运行状态是这样理解的?
            //var person2 = person.Clone();  //出了问题? 1.address没有, 2.此时获取对象为object类型, object与person有啥区别?  但值都有

            //clone切断了引用地址.   person本身就是引用类型
            var person2 = (Person)person.Clone();//认真
            person2.Address = (Address)person.Address.Clone();//既然定义了,肯定要调用下了
            Console.WriteLine("执行结束");
            Console.Read();
        }
11.手工实现有个毛病? 引用类型很多,或者引用层级多的话(也就是引用类型套引用类型,再套引用类型,形成递归) 就不好解决了  应该可以想到? 为啥没想到恩?
12.有没更好的方式. C# BinaryFormatter类 【通过二进制将对象的图进行序列化】
13.既然二进制,类肯定是可以被序列化的  [Serializable]
   static void Main(string[] args)
        {
            var person = new Person()
            {
                Name = "jack",
                Age = 22,
                Address = new Address()//此时明明赋值了,为什么person.Address为null?  什么地方出错了?
                {
                    City = "上海",
                    Province = "上海"
                }
            };

            //叫做动态获取一个类的运行状态, 原来如此, 运行状态是这样理解的?
            //var person2 = person.Clone();  //出了问题? 1.address没有, 2.此时获取对象为object类型, object与person有啥区别?  但值都有

            ////clone切断了引用地址.   person本身就是引用类型
            //var person2 = (Person)person.Clone();//认真
            //person2.Address = (Address)person.Address.Clone();//既然定义了,肯定要调用下了


            MemoryStream ms = new MemoryStream();
            BinaryFormatter bf = new BinaryFormatter();
            bf.Serialize(ms, person);
            ms.Seek(0, SeekOrigin.Begin);
            var person2 = (Person)bf.Deserialize(ms);
            ms.Close();



            Console.WriteLine("执行结束");
            Console.Read();
        }
14.C#中提供ICloneable 接口，就是原型类。。。  其实也就是Prototype类,系统帮我们做了. 我们可以直接用.




1.原型模式? 啥是原型呢? 可以做啥呢?
2.两个应用场景:1.动态获取一个对象的运行状态,2.对象的copy
3. 原型是浅拷贝, 
4.深拷贝有哪些方式? 1.引用类型都实现Clone. 都实现,肯定都要调用, 麻烦  2.二进制序列化对象图
5.步骤


7.动态的获取,运行状态,耗时,对象的复制,浅复制,深复制,二进制,对象图,序列化.关联,原型抽象类和抽象方法. object类型





  1. 0是什么状态? 怎么演绎? 1是什么状态? 过程遇到什么问题? 有什么样的解决方案?  VS 有什么方案? 解决什么问题?   在正常的流程的大前提下,去看问题, 关注点不能本末倒置.  脱离环境 咋理解呢?
  2.如何演绎的? 第一步是啥?新需求? 如何执行新需求? 有什么问题? 对应有什么解决办法? 解决方法有没新名词? 解释新名词? 执行接下来的一步 ... 重复执行? 这需要细节?
  3.要搞清楚的东西:
		1.多调试,看看顺序执行,分支,跳转,循环等执行路径  多重分支,多级分支, 
		2.同步,异步执行路径  特别是异步没有wait时.
		3.锁执行路径
		为什么要弄清楚呢? 大体情况要了解,避免处于盲区,或者关注点错误.或者没有大前提.
4.如何理清脉络? 有哪些关键点? 如何做到这些关键点? 这些关键点是为了达到什么样的目的? 关键点如何串起来.? 也就是说小目的串起来,达到最终目的?做事是为了达到某些目的? 出了问题?也就是目的没达到,也就是做的事有问题.

