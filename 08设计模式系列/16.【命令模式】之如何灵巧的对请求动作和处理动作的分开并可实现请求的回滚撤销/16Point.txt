设计模式,也就是设计过程中的解决问题,设计的套路总结? 怎么去设计?怎么去解决? 这是个问题? 是个核心能力?  需要训练?  要有大前提? 要有环境?
思路一步一步都记下来.
1.正确分析问题思路:没有查看类图=> 类图是什么?=>一个cd文件=>1.附加个现成的cd文件=>不识别=>2.看是否能添加cd文件=>发现没有=>通过方式1和方式2 应该可以判断出是template缺失?=>添加即可====> 最终定位为template
2.错误的分析问题方式:流于表面的瞎百度, 根本没思考.就困在这里,毫无有用的瞎转悠=> 错误归错误,不要影响积极的情绪=====>最终定位为方式或思路错误,赶快调整.
3.最重要的是方式错误时和情绪时的调整. 也就是心理素质.
4.分析步骤:	类似于while?如何理解? while(true)  什么是true条件? 肯定不是console.writeline(). 那只能是movenext()=> while(movenext()){console.writeline(current).};    movenext如何实现的恩?  其实很简单了? 历史没有真相,只残存一个道理.. movenext的道理是什么?
5.有时关注点放错了,困在某个点,,有时是没深入分析,困在表面
6.概念一知半解,流程不深究没概念. 逻辑推理分析没形成习惯. 也没有正确的模型.
7.我从来不觉得我比别人差
8.进入状态比较慢, 
9.出了问题,,残存什么样的道理?  做啥动作? 为啥目的? 用啥材料? 用啥逻辑? 有啥方式?
10.怀疑一切,或者任何事我也可以做.
11.有点不认真,没有边学边思考,边推理. 效率不高,还返工,,,你有多成功,取决于你有多渴望成功.
12.目的是啥? 这就是此时的主体? 主体都搞不清楚? 容易困于某个点,此时的监控,感应通知等 ==>先找到主体,有个整体的认识,在去扣细节和辅助. 观察者
13.带着(目的是创建对象)的前提来看问题? 一切为了创建,  肯定有由创建过程. 也可以顺着目的,逻辑推理 每一步该怎么做?   建造者
14.抽象的概念描述不好理解,一定要结合实例 :一个复杂的对象(房子)由很多的子部件(黄沙，瓷砖，水泥，青砖)的组成，子部件(黄沙的品牌)是多变，但是子部件组成的流程确实不易变。 流程是啥呢?
15.和自己理解的备忘录模式,差的太多了,说明了什么? 分析有问题? 映射有问题? 理解也有问题? 逻辑推理有问题?==>这里不解决,也就没思路,,没思路搞个屁.
16.完整过程是怎样呢? 肯定要顺一遍.  不然咋交逻辑推理? 不能只关注一个点.  全过程.
17.我以为撤销是在执行后撤销,第一感觉是这样, 说明什么? 对事情根本没有本质的认识? 或者很多认识都是错的,还有其实内心是阻止自己深入的,觉得做不到? 也不觉得做不到有什么不好? 深入都没深入,更别谈什么能不能了.==>我能,必须前进.


一：命令模式

1.思想： 将行为的请求者和行为的实现者进行分离。。。 方便于我们做命令的恢复，撤销等等操作。。。  如何做分离,如何做命令的恢复，撤销等等操作?
 类似于私有字段和对应共有属性. 方便我们添加对字段赋值和取值的控制
public class Sqlserver
{
   public void Add()
   {
	  //Add方法体的逻辑就是实现者 为什么没想到?  行为如何实现?
      //xxxx
   }

   public void Remove()
   {
   }
}

Sqlserver server=new Sqlserver();
server.Add(); 请求者  为什么没想到  如何发送请求?


winform经常有撤销。。。【撤销有两种:撤销命令，恢复状态】  具体是什么? 不清楚


命令模式：有几个角色  也就是要把SqlServer类 和sqlserver类的实例调用,分解?  分解很重要.  如何分解呢?  映射其实就是分解? 设计算法也是分解?

1. received  也就是最终要执行的命令【add remove】 不对理解不对   received相当于sqlserlver    received的方法相当于sqlserlver的方法 

2. ICommand  将received命令的方法进行抽象，抽象成一个execute方法   也就是add remove的方法体 不对理解不对.    抽象? 如何抽象? 和以前的抽象有啥不一样?

3. ConcreteCommand  将received中的每一个命令生成每一个具体的子类。。 Add（）=> AddCommand, Remove => RemoveCommand

4. Invoker         命令的调用：给client进行调用，同时这个类要实现命令的执行，恢复，撤销,添加等操作。。。  撤销撤销啥? 恢复恢复啥? 执行啥? 添加啥?

5. Client  

命令模式的样本步骤  注意是样板.
0.定义一个类Received类,天剑Add和Remove方法,并实现.
1.定义一个接口ICommand,添加一个Execute方法
2.添加AddCommand和RemoveCommand类,继承ICommand接口,,并实现各自的Execute方法
3.添加一个类invoker,添加commandlist属性,execute方法,setcommand方法,Undo方法/
4.在main函数中调用.


1.命令模式,肯定是和命令有关? 有啥关呢?  到底它要做什么事情呢?
2.要加强的是硬实力. 分析,分解,理解? 逻辑推理?
3.如果让我设计会设计吗? 独自学习能学习好呢?  问题在哪里呢?



  1. 0是什么状态? 怎么演绎? 1是什么状态? 过程遇到什么问题? 有什么样的解决方案?  VS 有什么方案? 解决什么问题?   在正常的流程的大前提下,去看问题, 关注点不能本末倒置.  脱离环境 咋理解呢?  目的是啥?
  2.如何演绎的? 第一步是啥?新需求? 如何执行新需求? 有什么问题? 对应有什么解决办法? 解决方法有没新名词? 解释新名词? 执行接下来的一步 ... 重复执行? 这需要细节?
  3.要搞清楚的东西:
		1.多调试,看看顺序执行,分支,跳转,循环等执行路径  多重分支,多级分支, 
		2.同步,异步执行路径  特别是异步没有wait时.
		3.锁执行路径
		为什么要弄清楚呢? 大体情况要了解,避免处于盲区,或者关注点错误.或者没有大前提.
4.如何理清脉络? 有哪些关键点? 如何做到这些关键点? 这些关键点是为了达到什么样的目的? 关键点如何串起来.? 也就是说小目的串起来,达到最终目的?做事是为了达到某些目的? 出了问题?也就是目的没达到,也就是做的事有问题. 先找到主体,有个整体的认识,在去扣细节和辅助.
5.避免,毫无目的,毫无主线,无前提,无脉络 . 毫无关键点 也没主动. 瞎转,当然心中没数了,生活中也是如此
6.分析是如何分析的呢? 从oo角度分析, 无非一些类,然后交互. 还有流程的
7.分解很重要.  如何分解呢?  映射其实就是分解? 设计算法也是分解? 但分解到底是啥呢?
8. 抽象? 如何抽象?
9.分析问题不够深入,不能猜想,不能逻辑推理,容易卡壳,特别是遇到新概念,不懂的名词,卡壳后不会调整,学习不够本质,不能活学活用,容易只记住案例,当遇到类似的时候,不能联想, 举一反三.