设计模式,也就是设计过程中的解决问题,设计的套路总结? 怎么去设计?怎么去解决? 这是个问题? 是个核心能力?  需要训练?  要有大前提? 要有环境?
思路一步一步都记下来.
1.正确分析问题思路:没有查看类图=> 类图是什么?=>一个cd文件=>1.附加个现成的cd文件=>不识别=>2.看是否能添加cd文件=>发现没有=>通过方式1和方式2 应该可以判断出是template缺失?=>添加即可====> 最终定位为template
2.错误的分析问题方式:流于表面的瞎百度, 根本没思考.就困在这里,毫无有用的瞎转悠=> 错误归错误,不要影响积极的情绪=====>最终定位为方式或思路错误,赶快调整.
3.最重要的是方式错误时和情绪时的调整. 也就是心理素质.




一：模板方法模式 行为型   模板?什么是模板?  肯定涉及继承.
比如我做一个水杯,它有一个模板,有了这个模板,我就可以做出来

在oo中,模板方法作为一个模式,解决什么样的问题?

1. 试卷：  

  <1> 今天暖和吗？ （） 就是一个模板  ()为可变部分, 其他的为不可变的

      A：是  B：否

每个同学的答案不一样.
张三： A 每个子类的实现是不一样的, 有可能选A, 有可能选B

李四： B


模板方法： 定了了一个算法骨架，将可变的部分延迟到了子类。。。  封装了不可变的，将可变的部分
           延迟到子类。。。  子类哦,肯定涉及到继承

           一种多态的实现。。。  多态是什么? 多态有哪些方式? 1.模板方法,重载 接口,抽象成员

abstract 与virtual的区别
继承是什么意思? 其实继承的出现就是为了复用?但从子类看,方法可能很少,这些方法也是子类要自己修改,或者新增的?  但是子类=父类+子类独有的部分.

二：真实的项目

简单工厂 + 模板模式


事件： 0，1 96，97 ，98，


根据事件 模型  => 判断是否今天可以触发  => 获取人数 (分顾问创建 和 非顾问创建)

0：非顾问创建

96,97: 顾问创建

【全量跑用户】 【增量跑用户】


1. 获取人数的方法不可变： GetCustomerList
2.可变的部分是 
   

   
  1. 0是什么状态? 怎么演绎? 1是什么状态? 过程遇到什么问题? 有什么样的解决方案?  VS 有什么方案? 解决什么问题?   在正常的流程的大前提下,去看问题, 关注点不能本末倒置.  脱离环境 咋理解呢?
  2.如何演绎的? 第一步是啥?新需求? 如何执行新需求? 有什么问题? 对应有什么解决办法? 解决方法有没新名词? 解释新名词? 执行接下来的一步 ... 重复执行? 这需要细节?