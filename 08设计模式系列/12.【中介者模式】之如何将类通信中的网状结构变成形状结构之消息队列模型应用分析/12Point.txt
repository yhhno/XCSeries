设计模式,也就是设计过程中的解决问题,设计的套路总结? 怎么去设计?怎么去解决? 这是个问题? 是个核心能力?  需要训练?  要有大前提? 要有环境?
思路一步一步都记下来.
1.正确分析问题思路:没有查看类图=> 类图是什么?=>一个cd文件=>1.附加个现成的cd文件=>不识别=>2.看是否能添加cd文件=>发现没有=>通过方式1和方式2 应该可以判断出是template缺失?=>添加即可====> 最终定位为template
2.错误的分析问题方式:流于表面的瞎百度, 根本没思考.就困在这里,毫无有用的瞎转悠=> 错误归错误,不要影响积极的情绪=====>最终定位为方式或思路错误,赶快调整.
3.最重要的是方式错误时和情绪时的调整. 也就是心理素质.
4.分析步骤:	类似于while?如何理解? while(true)  什么是true条件? 肯定不是console.writeline(). 那只能是movenext()=> while(movenext()){console.writeline(current).};    movenext如何实现的恩?  其实很简单了? 历史没有真相,只残存一个道理.. movenext的道理是什么?
5.有时关注点放错了,困在某个点,,有时是没深入分析,困在表面
6.概念一知半解,流程不深究没概念. 逻辑推理分析没形成习惯. 也没有正确的模型.
7.我从来不觉得我比别人差
8.进入状态比较慢, 
9.出了问题,,残存什么样的道理?  做啥动作? 为啥目的? 用啥材料? 用啥逻辑? 有啥方式?
10.怀疑一切,或者任何事我也可以做.
11.有点不认真,没有边学边思考,边推理. 效率不高,还返工,,,你有多成功,取决于你有多渴望成功.
12.目的是啥? 这就是此时的主体? 主体都搞不清楚? 容易困于某个点,此时的监控,感应通知等 ==>先找到主体,有个整体的认识,在去扣细节和辅助. 观察者
13.带着(目的是创建对象)的前提来看问题? 一切为了创建,  肯定有由创建过程. 也可以顺着目的,逻辑推理 每一步该怎么做?   建造者
14.抽象的概念描述不好理解,一定要结合实例 :一个复杂的对象(房子)由很多的子部件(黄沙，瓷砖，水泥，青砖)的组成，子部件(黄沙的品牌)是多变，但是子部件组成的流程确实不易变。 流程是啥呢?


主体是消除耦合,关注点在此,,关注点错误.
一：中介者模式   啥目的? 如何实现?  通讯,也就是交互的问题? 交互时耦合太严重了.. 也就是解决耦合严重问题.   为啥耦合? 应为要保持引用? 消除耦合,也就是消除引用

场景：类与类之间的通讯，如何减少耦合。。。  通讯是什么? 交互是什么? 我调用你,你调用我.? 保持引用,不然咋交互? 咋通讯?
也就是说你要和一个类通信,就要保持一个引用, 10个就需要保持10个引用.如果交叉引用,就形成网状结构. 引用难以维护.


服务引用也是同样的道理：SOA,[WCF]  一个wcf是一个节点,两个wcf通信很简单,但是如果一个wcf要和10个wcf通讯呢 要引用10个wcf服务,维护10个访问路径  添加10次服务引用

例子:
wcf     wcf1,wcf2,wcf3,wcf4.... 
比如简单的双向通信 wcf和wcf1相互访问,很简单,相互保存地址, 但一旦成为网状就难以维护. 也就是一对多,  访问路径就难以维护.


网状结构：是不是难以维护。。。什么难以维护?  【更多的场景是架构意义】

针对这种架构,我们怎么去优化,就是改变这种通讯模式,也就是交互模式 引入中间件 ,用中间件来隔离耦合 ,当然要保证中间件的高可用
措施:引入中间件，Redis，RabbitMQ。 引入中间件后,更新只影响自己.

加入中间件后,所有的wcf都走RabbitMQ,通过RabbitMQ来获取消息,
此时如果wcf1更新的话,只更新自己, 只要能网RabbitMQ发消息就可以了.其他的不变.

中间件的延伸 => ESB企业服务总线  [协议转换，服务发现]

懂得这个思想后,来看中介者模式


二：上代码
需求:
1. 同事之间的沟通。。。

2. QQ 作为 中介者：  【好友列表】，【转发】

步骤
1.定义一个抽象类Abstractcolleague类,添加Send和Receive方法.以及username属性
2.定义一个具体的同事类 Colleague,继承抽象方法. 并实现方法,添加构造函数参数为name和abstractmediator
3.定义一个抽象类AbstractMediator类 添加Add和Send方法(转发) 和colleaguelist属性,映射 【好友列表】，【转发】 
4.定义个具体的mediator类,继承AbstractMediator类,并实现.
5.main函数中调用


设计模式就是用oo的思想来展示现实中遇到的一个网状的结构,如何对它进行优化,引入一个中介者,通过中介者转发.



1.中介者模式. 解决的是交互耦合的问题
2.啥是交互?啥是耦合? 啥是通讯
3.交互,要保存引用? 不然咋交互?
4.难以维护? 为什么没想到
5.中间件 隔离耦合,但耦合还在,不然咋交互
6.网状结构
7.模拟的能力呀?
8.那交互有哪些方式?


  1. 0是什么状态? 怎么演绎? 1是什么状态? 过程遇到什么问题? 有什么样的解决方案?  VS 有什么方案? 解决什么问题?   在正常的流程的大前提下,去看问题, 关注点不能本末倒置.  脱离环境 咋理解呢?  目的是啥?
  2.如何演绎的? 第一步是啥?新需求? 如何执行新需求? 有什么问题? 对应有什么解决办法? 解决方法有没新名词? 解释新名词? 执行接下来的一步 ... 重复执行? 这需要细节?
  3.要搞清楚的东西:
		1.多调试,看看顺序执行,分支,跳转,循环等执行路径  多重分支,多级分支, 
		2.同步,异步执行路径  特别是异步没有wait时.
		3.锁执行路径
		为什么要弄清楚呢? 大体情况要了解,避免处于盲区,或者关注点错误.或者没有大前提.
4.如何理清脉络? 有哪些关键点? 如何做到这些关键点? 这些关键点是为了达到什么样的目的? 关键点如何串起来.? 也就是说小目的串起来,达到最终目的?做事是为了达到某些目的? 出了问题?也就是目的没达到,也就是做的事有问题. 先找到主体,有个整体的认识,在去扣细节和辅助.
5.避免,毫无目的,毫无主线,无前提,无脉络 . 毫无关键点 也没主动. 瞎转,当然心中没数了,生活中也是如此