设计模式,也就是设计过程中的解决问题,设计的套路总结? 怎么去设计?怎么去解决? 这是个问题? 是个核心能力?  需要训练?  要有大前提? 要有环境?
思路一步一步都记下来.
1.正确分析问题思路:没有查看类图=> 类图是什么?=>一个cd文件=>1.附加个现成的cd文件=>不识别=>2.看是否能添加cd文件=>发现没有=>通过方式1和方式2 应该可以判断出是template缺失?=>添加即可====> 最终定位为template
2.错误的分析问题方式:流于表面的瞎百度, 根本没思考.就困在这里,毫无有用的瞎转悠=> 错误归错误,不要影响积极的情绪=====>最终定位为方式或思路错误,赶快调整.
3.最重要的是方式错误时和情绪时的调整. 也就是心理素质.
4.分析步骤:	类似于while?如何理解? while(true)  什么是true条件? 肯定不是console.writeline(). 那只能是movenext()=> while(movenext()){console.writeline(current).};    movenext如何实现的恩?  其实很简单了? 历史没有真相,只残存一个道理.. movenext的道理是什么?
5.有时关注点放错了,困在某个点,,有时是没深入分析,困在表面
6.概念一知半解,流程不深究没概念. 逻辑推理分析没形成习惯. 也没有正确的模型.
7.我从来不觉得我比别人差
8.进入状态比较慢, 
9.出了问题,,残存什么样的道理?  做啥动作? 为啥目的? 用啥材料? 用啥逻辑? 有啥方式?
10.怀疑一切,或者任何事我也可以做.
11.有点不认真,没有边学边思考,边推理. 效率不高,还返工,,,你有多成功,取决于你有多渴望成功.
12.目的是啥? 这就是此时的主体? 主体都搞不清楚? 容易困于某个点,此时的监控,感应通知等 ==>先找到主体,有个整体的认识,在去扣细节和辅助. 观察者
13.带着(目的是创建对象)的前提来看问题? 一切为了创建,  肯定有由创建过程. 也可以顺着目的,逻辑推理 每一步该怎么做?   建造者
14.抽象的概念描述不好理解,一定要结合实例 :一个复杂的对象(房子)由很多的子部件(黄沙，瓷砖，水泥，青砖)的组成，子部件(黄沙的品牌)是多变，但是子部件组成的流程确实不易变。 流程是啥呢?


实际上用的最多还是简单工厂
一：工厂方法

模式：都有优缺点。。。

工厂 不见得 比 简单工厂 要好。。。

简单工厂D步骤 屏蔽创建逻辑 只修改一处.  有点不清楚
1.定义一个IUser接口,添加ADD和Remove方法
2.定义一个SqlserverUser类和一个SqlliteUser类,继承IUser接口,实现各自不同的Add和Remove方法.
3.定义一个Factory类,添加CreateInstance方法,实现创建逻辑.
4.在main函数中调用.
5.扩展,添加一个MongodbUser


但 违反 “开闭原则”。。。


我增加了一个MongodbUser，我需要改动的地方

1. 修改Factory  【缺点】  违反 “开闭原则”。 没什么是完美的,可以容忍缺点

2. 新增一个类。MongodbUser类


简单工厂的最大好处： 用一个字符串代替了一个类的实例化。。。。

工厂方法的步骤. 优化简单工厂的 switch问题.
1.定义一个IUser接口,添加ADD和Remove方法
2.定义一个SqlserverUser类和一个SqlliteUser类,继承IUser接口,实现各自不同的Add和Remove方法.
3.定义一个IFactory类,添加CreateInstance方法, 
4.定义一个SqlserverUserFactory类和SQLliteUserFactory类,继承IFactory接口,实现各自的不同的CreateInstance
5.在main函数中调用.
6.扩展,添加一个MongodbUser


简单工厂  和 工厂

1. 工厂解决了简单工厂中的factory的switch问题。。。

2. 工厂将选择给了client端。。。 比如我想使用mongodb，那就必须先new一个mongodbfactory。。。

3.但是工厂方法也有问题的,  如果factory有1000个,要修改的话,就要修改1000处,这是无法避免的,,而简单工程可以做到,只修改一处,就可以影响1000处.  选择权在客户端和服务端都有利弊

反射 [命名空间 + 类名]  避免修改1000处.


二：抽象工厂  底层用的多, 实际开发中用的不多.  

比如Iuser是db(多种db)中的一张表，但是db(多种db)中是有很多的表。。。。 

比如说现在我新增一个Order表。。。


抽象工厂的步骤. 
1.定义一个IUser接口,添加ADD和Remove方法
2.定义一个SqlserverUser类和一个SqlliteUser类,继承IUser接口,实现各自不同的Add和Remove方法.
3.定义一个IOrder接口,添加ADD和Remove方法
4.定义一个SqlserverOrder类和一个SqlliteOrder类,继承IOrder接口,实现各自不同的Add和Remove方法.
5.定义一个IFactory类,添加CreateUserInstance方法和CreateOrderIntance方法
6.定义一个SqlserverFactory类和SQLliteFactory类,继承IFactory接口,实现各自的不同的CreateUserInstance和CreateOrderIntance方法.
7.在main函数中调用.
8.扩展,添加一个Product



1.工厂方法
2.简单工厂
3抽象工厂
4.三者是如何一步一步迭代的. 各自的优缺点


  1. 0是什么状态? 怎么演绎? 1是什么状态? 过程遇到什么问题? 有什么样的解决方案?  VS 有什么方案? 解决什么问题?   在正常的流程的大前提下,去看问题, 关注点不能本末倒置.  脱离环境 咋理解呢?  目的是啥?
  2.如何演绎的? 第一步是啥?新需求? 如何执行新需求? 有什么问题? 对应有什么解决办法? 解决方法有没新名词? 解释新名词? 执行接下来的一步 ... 重复执行? 这需要细节?
  3.要搞清楚的东西:
		1.多调试,看看顺序执行,分支,跳转,循环等执行路径  多重分支,多级分支, 
		2.同步,异步执行路径  特别是异步没有wait时.
		3.锁执行路径
		为什么要弄清楚呢? 大体情况要了解,避免处于盲区,或者关注点错误.或者没有大前提.
4.如何理清脉络? 有哪些关键点? 如何做到这些关键点? 这些关键点是为了达到什么样的目的? 关键点如何串起来.? 也就是说小目的串起来,达到最终目的?做事是为了达到某些目的? 出了问题?也就是目的没达到,也就是做的事有问题. 先找到主体,有个整体的认识,在去扣细节和辅助.
5.避免,毫无目的,毫无主线,无前提,无脉络 . 毫无关键点 也没主动. 瞎转,当然心中没数了,生活中也是如此