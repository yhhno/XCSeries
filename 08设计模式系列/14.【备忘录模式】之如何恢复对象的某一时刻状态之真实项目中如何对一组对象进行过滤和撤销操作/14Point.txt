设计模式,也就是设计过程中的解决问题,设计的套路总结? 怎么去设计?怎么去解决? 这是个问题? 是个核心能力?  需要训练?  要有大前提? 要有环境?
思路一步一步都记下来.
1.正确分析问题思路:没有查看类图=> 类图是什么?=>一个cd文件=>1.附加个现成的cd文件=>不识别=>2.看是否能添加cd文件=>发现没有=>通过方式1和方式2 应该可以判断出是template缺失?=>添加即可====> 最终定位为template
2.错误的分析问题方式:流于表面的瞎百度, 根本没思考.就困在这里,毫无有用的瞎转悠=> 错误归错误,不要影响积极的情绪=====>最终定位为方式或思路错误,赶快调整.
3.最重要的是方式错误时和情绪时的调整. 也就是心理素质.
4.分析步骤:	类似于while?如何理解? while(true)  什么是true条件? 肯定不是console.writeline(). 那只能是movenext()=> while(movenext()){console.writeline(current).};    movenext如何实现的恩?  其实很简单了? 历史没有真相,只残存一个道理.. movenext的道理是什么?
5.有时关注点放错了,困在某个点,,有时是没深入分析,困在表面
6.概念一知半解,流程不深究没概念. 逻辑推理分析没形成习惯. 也没有正确的模型.
7.我从来不觉得我比别人差
8.进入状态比较慢, 
9.出了问题,,残存什么样的道理?  做啥动作? 为啥目的? 用啥材料? 用啥逻辑? 有啥方式?
10.怀疑一切,或者任何事我也可以做.
11.有点不认真,没有边学边思考,边推理. 效率不高,还返工,,,你有多成功,取决于你有多渴望成功.
12.目的是啥? 这就是此时的主体? 主体都搞不清楚? 容易困于某个点,此时的监控,感应通知等 ==>先找到主体,有个整体的认识,在去扣细节和辅助. 观察者
13.带着(目的是创建对象)的前提来看问题? 一切为了创建,  肯定有由创建过程. 也可以顺着目的,逻辑推理 每一步该怎么做?   建造者
14.抽象的概念描述不好理解,一定要结合实例 :一个复杂的对象(房子)由很多的子部件(黄沙，瓷砖，水泥，青砖)的组成，子部件(黄沙的品牌)是多变，但是子部件组成的流程确实不易变。 流程是啥呢?
15.和自己理解的备忘录模式,差的太多了,说明了什么? 分析有问题? 映射有问题? 理解也有问题? 逻辑推理有问题?==>这里不解决,也就没思路,,没思路搞个屁.


和自己理解的备忘录模式,差的太多了,说明了什么? 分析有问题? 映射有问题? 理解也有问题?
一：备忘录模式  从字面上看,好像一个记录的东西, 大概做什么样的事情呢?

1.定义：  记录某一个对象在某一时刻的状态。。。在合适的时候进行恢复。。。。

  功能:   可以撤销，可以恢复。。。

2.举个例子  ctrl + z    photoshop 回退的功能。  下棋悔棋。。。

谁备忘,备忘啥,备忘到哪里? 谁保存备忘,谁管理备忘?  谁恢复,恢复啥?从哪里恢复?  =>逻辑推理

二：真实项目  猜想能力+逻辑推理=演绎

1. leaflet [100个] 每天有100个营销活动

   leaflet   -> customerList
  
                发送时间
                
                发送渠道



首先通过customerid获取到一批人， 


然后对这100个leaflet做过滤。   也就是操作修改嘛

【集合过滤】 所有的leaflet中customerid是唯一的。  如何理解结合过滤? 如何过滤?  如何实现集合过滤?

【疲劳度过滤】  3天								如何理解疲劳度? 如何实现疲劳度过滤?

 
leaflet1: 100 ->   80    

leaflet2: 50  ->   40

leaflet3: 120 ->   90

后悔了
leaflet3 建错了。。。我要恢复。。。  我要删除leaflet3  要删除leaflet3说明什么?  案例和真实的有差距? 不能死抱案例? 要多看真实案例?

是不是leaflet1 和 leaflet2 的人给恢复出来？？？   恢复也和案例恢复不一样.


三：备忘录模式的原型  如何理解名字?如何理解概念

1. 发起者： originator     需要备份的实体

2. 备忘实体: memento     需要 将状态 保存到 该对象 的实体

3. 看门人：  caretaker   管理这个memento

备忘录模式步骤
1.添加一个表示发起者的类 Originator. 有生成备忘的方法CreateMemento(),和恢复状态Revoverymemento方法和一个状态属性state.
2.添加一个表示备忘实体的类memento类,添加一个state属性. 只需要保存一个属性就可以了,例如customlist属性. 不需要保存所有的属性,不然就是克隆模式了
3.添加一个表示看门人的类Caretaker,添加Memento类型的属性memento
4.在main函数中调用



四：这个道理就是 该模式 和 clone 模式的区别。。。


1.备忘录模式, 定义,如何将定义映射为代码?
2.快照,可不是全值,不然就是克隆了.
3.分析有问题? 映射有问题? 理解也有问题?逻辑推理有问题?



  1. 0是什么状态? 怎么演绎? 1是什么状态? 过程遇到什么问题? 有什么样的解决方案?  VS 有什么方案? 解决什么问题?   在正常的流程的大前提下,去看问题, 关注点不能本末倒置.  脱离环境 咋理解呢?  目的是啥?
  2.如何演绎的? 第一步是啥?新需求? 如何执行新需求? 有什么问题? 对应有什么解决办法? 解决方法有没新名词? 解释新名词? 执行接下来的一步 ... 重复执行? 这需要细节?
  3.要搞清楚的东西:
		1.多调试,看看顺序执行,分支,跳转,循环等执行路径  多重分支,多级分支, 
		2.同步,异步执行路径  特别是异步没有wait时.
		3.锁执行路径
		为什么要弄清楚呢? 大体情况要了解,避免处于盲区,或者关注点错误.或者没有大前提.
4.如何理清脉络? 有哪些关键点? 如何做到这些关键点? 这些关键点是为了达到什么样的目的? 关键点如何串起来.? 也就是说小目的串起来,达到最终目的?做事是为了达到某些目的? 出了问题?也就是目的没达到,也就是做的事有问题. 先找到主体,有个整体的认识,在去扣细节和辅助.
5.避免,