
设计模式,也就是设计过程中的解决问题,设计的套路总结? 怎么去设计?怎么去解决? 这是个问题? 是个核心能力?  需要训练?  要有大前提? 要有环境?
思路一步一步都记下来.
1.正确分析问题思路:没有查看类图=> 类图是什么?=>一个cd文件=>1.附加个现成的cd文件=>不识别=>2.看是否能添加cd文件=>发现没有=>通过方式1和方式2 应该可以判断出是template缺失?=>添加即可====> 最终定位为template
2.错误的分析问题方式:流于表面的瞎百度, 根本没思考.就困在这里,毫无有用的瞎转悠=> 错误归错误,不要影响积极的情绪=====>最终定位为方式或思路错误,赶快调整.
3.最重要的是方式错误时和情绪时的调整. 也就是心理素质.
4.分析步骤:	类似于while?如何理解? while(true)  什么是true条件? 肯定不是console.writeline(). 那只能是movenext()=> while(movenext()){console.writeline(current).};    movenext如何实现的恩?  其实很简单了? 历史没有真相,只残存一个道理.. movenext的道理是什么?
5.有时关注点放错了,困在某个点,,有时是没深入分析,困在表面
6.概念一知半解,流程不深究没概念. 逻辑推理分析没形成习惯. 也没有正确的模型.
7.我从来不觉得我比别人差
8.进入状态比较慢, 
9.出了问题,,残存什么样的道理?  做啥动作? 为啥目的? 用啥材料? 用啥逻辑? 有啥方式?
10.怀疑一切,或者任何事我也可以做.



一：代理模式  如何理解代理?   代理啥? 代理为了啥?

实际生活中有很多类似的代理模式,比如说链家
   个人 ==>(和向中介表达出买房子或者卖房子,) ===>链家(代替你去处理各种事情)  -> 担保公司

																			房屋管理中心

																			银行

																			公积金管理中心

现在你只需要办一件(卖房子)或者两件事(买房子和付钱),,至于其他的事情,都有中介完成. 代理为了啥? 是不是让你感觉很简单,其实背后很复杂,   残存个什么样的道理? 事情一件都不能少?如何映射到代码中?

映射到实际的开发中,也就是应用场景
二：代理模式的应用场景  抽象总结

1. 帮助你屏蔽  真实对象的业务复杂性。。 业务复杂性映射什么?  或者指什么?


              比如 【跨机器访问，读取文件】


2. 简而言之，就是代理给我们的真实对象做了一个高层的封装。。。 如何理解高层封装?

   【proxy】 和  【facade】 对比。。

proxy 必须继承接口，所以方法是一个都不能少。。。  如何理解实现代理呢? 其实每个步骤都不会少, 只有有人代做了. 所以要付费呀, 所以也要实现AbstractDatabase抽象类. 也就是是映射了 事情一件都不能少的事情?

facade： 好像三层中的逻辑层。。。只是一个封装,你上层需要什么,通过我这个逻辑层封装下底层,  有可能两三个方法包成一个方法。。。BLL不继承DAL或者BLL和DAL不继承同一个接口或抽象类。。

代理模式代码步骤:
1.定义一个抽象类AbstractDatabase
2.定义一个真实的对象Sqlserver类和一个代理类Proxy类,都继承自AbstractDatabase类
3.代理类屏蔽了真实对象的复杂性  如何屏蔽?   也就是封装
4.在main函数中,直接调用代理类就可以了, 相当于调用真实类, 非常简单是不是?
5.客户端看到Proxy代理类 就像个人看到链家一样的感觉,,都非常简单, 但背后很复杂\
6.也有可能是代理类抽象成更少的方法,类似个人买房.  不同于此案例.  此案例中的代理还是有所有的事情,只是事情的复杂性屏蔽了, 那有没可能屏蔽操作的复杂性,不如10个事情,缩为2个事情呢?
7.如果之前看到, proxy类和sqlserver类不都一样的? 为啥有这种感觉呢?

soa的框架.wcf
二：wcf 的远程代理是如何使用的。。。  


 很多的诠释了代理模式的运用。

wcf代理模式 步骤
 1.新建一个控制台应用程序,作为服务端,添加新建项 wcf服务,并在main函数中,启动wcf服务
 2.新建一个控制台应用程序,作为客户端,添加服务引用, 会生成一个文件夹,文件夹中的Reference类,就是代理类
 3.Reference类中的IService类就是 必不可少的的事情,   Service1Client就是代理类.  那真实类在哪里呢?  但不能困在不知真实类在哪里,那样就关注点错了,此时关注如何用?
 4.在客户端的main函数中,调用代理类
 5.修改IService接口的DoWork,添加参数和返回值
 6.更新服务引用
 7.修改客户端的main函数中的调用代码, 完美出现 hello张三
 8.通过fidder查看  信封传递


 1.代理模式? 代理啥? 有啥生活案例?  代理为了啥? 如何映射?
2.业务复杂性映射啥? 抽象总结? 代理类,真实类,屏蔽复杂性,
3.Fidder


   1. 0是什么状态? 怎么演绎? 1是什么状态? 过程遇到什么问题? 有什么样的解决方案?  VS 有什么方案? 解决什么问题?   在正常的流程的大前提下,去看问题, 关注点不能本末倒置.  脱离环境 咋理解呢?
  2.如何演绎的? 第一步是啥?新需求? 如何执行新需求? 有什么问题? 对应有什么解决办法? 解决方法有没新名词? 解释新名词? 执行接下来的一步 ... 重复执行? 这需要细节?
  3.要搞清楚的东西:
		1.多调试,看看顺序执行,分支,跳转,循环等执行路径  多重分支,多级分支, 
		2.同步,异步执行路径  特别是异步没有wait时.
		3.锁执行路径
		为什么要弄清楚呢? 大体情况要了解,避免处于盲区,或者关注点错误.或者没有大前提.
4.如何理清脉络? 有哪些关键点? 如何做到这些关键点? 这些关键点是为了达到什么样的目的? 关键点如何串起来.? 也就是说小目的串起来,达到最终目的?做事是为了达到某些目的? 出了问题?也就是目的没达到,也就是做的事有问题.


