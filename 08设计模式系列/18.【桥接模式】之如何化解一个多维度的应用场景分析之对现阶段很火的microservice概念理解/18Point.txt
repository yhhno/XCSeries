设计模式,也就是设计过程中的解决问题,设计的套路总结? 怎么去设计?怎么去解决? 这是个问题? 是个核心能力?  需要训练?  要有大前提? 要有环境?
思路一步一步都记下来.
1.正确分析问题思路:没有查看类图=> 类图是什么?=>一个cd文件=>1.附加个现成的cd文件=>不识别=>2.看是否能添加cd文件=>发现没有=>通过方式1和方式2 应该可以判断出是template缺失?=>添加即可====> 最终定位为template
2.错误的分析问题方式:流于表面的瞎百度, 根本没思考.就困在这里,毫无有用的瞎转悠=> 错误归错误,不要影响积极的情绪=====>最终定位为方式或思路错误,赶快调整.
3.最重要的是方式错误时和情绪时的调整. 也就是心理素质.
4.分析步骤:	类似于while?如何理解? while(true)  什么是true条件? 肯定不是console.writeline(). 那只能是movenext()=> while(movenext()){console.writeline(current).};    movenext如何实现的恩?  其实很简单了? 历史没有真相,只残存一个道理.. movenext的道理是什么?
5.有时关注点放错了,困在某个点,,有时是没深入分析,困在表面
6.概念一知半解,流程不深究没概念. 逻辑推理分析没形成习惯. 也没有正确的模型.
7.我从来不觉得我比别人差
8.进入状态比较慢, 
9.出了问题,,残存什么样的道理?  做啥动作? 为啥目的? 用啥材料? 用啥逻辑? 有啥方式?
10.怀疑一切,或者任何事我也可以做.
11.有点不认真,没有边学边思考,边推理. 效率不高,还返工,,,你有多成功,取决于你有多渴望成功.
12.目的是啥? 这就是此时的主体? 主体都搞不清楚? 容易困于某个点,此时的监控,感应通知等 ==>先找到主体,有个整体的认识,在去扣细节和辅助. 观察者
13.带着(目的是创建对象)的前提来看问题? 一切为了创建,  肯定有由创建过程. 也可以顺着目的,逻辑推理 每一步该怎么做?   建造者
14.抽象的概念描述不好理解,一定要结合实例 :一个复杂的对象(房子)由很多的子部件(黄沙，瓷砖，水泥，青砖)的组成，子部件(黄沙的品牌)是多变，但是子部件组成的流程确实不易变。 流程是啥呢?
15.和自己理解的备忘录模式,差的太多了,说明了什么? 分析有问题? 映射有问题? 理解也有问题? 逻辑推理有问题?==>这里不解决,也就没思路,,没思路搞个屁.
16.完整过程是怎样呢? 肯定要顺一遍.  不然咋交逻辑推理? 不能只关注一个点.  全过程.
17.我以为撤销是在执行后撤销,第一感觉是这样, 说明什么? 对事情根本没有本质的认识? 或者很多认识都是错的,还有其实内心是阻止自己深入的,觉得做不到? 也不觉得做不到有什么不好? 深入都没深入,更别谈什么能不能了.==>我能,必须前进.
18.容易懒惰,容易没激情,容易不积极,容易放弃,容易不调整.心态不乐观.容易没渴望
19.无师自通是个什么情况?



一：桥接模式  桥接 桥接的是啥?

  【降维处理】  如何理解? 

一个类中有两个对象，这两个对象是各自发展的 【两个维度】，那么面对这种场景，我们需要用桥接模式。。。 如何理解维度? 如何理解各自发展? 自己干自己,不关其他什么事.
重点: 多个维度,各自发展,拒绝耦合.

public class phone{
   brand  => 可以扩展：【华为，小米，格力】
   soft   => 可以扩展：【通讯录，游戏】
}

采用普通的方式：

华为的通讯录，华为的游戏。。。小米的通讯录。。。=> 3 x 2 = 6 个类。。。 当时看到这里是没概念的?  分析啊 看完还挺清晰的,关键是一开始遇到是咋样?=>模拟不行,就是分析不行,理解不行,=>映射不行,设计不行.==.这是个过程.从没认真实践.==>有时候,要完成的事, 概念上和实际上有很大出入,但结果是一样的.


天语，波导  他们中的游戏和通讯录是不能共享的。。。  【手机和游戏是一一匹配的】  什么意思呢?


问题:目前 品牌 和 游戏 是耦合的(通过继承实现耦合)。。。   但品牌 和 游戏 是手机类下的两个属性,这两个是独立发展的
耦合有多可怕?

需求变更： 比如说增加一个品牌：摩托罗拉 M

步骤: 前提 天语，波导  他们中的游戏和通讯录是不能共享的  只是说恰好这个之前现实情况和我们要表达的意思 吻合.
1.定义一个抽象类AbstractBrand类,添加一个抽象方法Run
2.定义PhoneTianyu和PhoneBodao类,继承抽象类AbstractBrand,实现各自的Run方法
3.定义TianyuAddress和TianyuGame类,继承PhoneTianyu类,重写Run方法
4.定义BodaoAddress和BodaoGame类,继承PhoneBodao类,重写Run方法.
 public class TianyuAddress : PhoneTianyu
    {
        public override void Run()//孙子辈的类,也可以重写 父类重写的函数
        {
            Console.WriteLine("运行天宇的Address");
        }
    }
5.扩展,增加一个品牌摩托罗拉 新增3个类 导致子类爆炸。。。  此时感觉不到什么不好? 有血有肉一个维度是 耦合


二：如果进行解耦


解耦的方式：就是让各自的rank独自发展。。。【现在的手机发展行业】


小米手机【安卓】，华为手机【安卓】     品牌维度


ctrip app， 58同城 app， taobao app  软件维度
只是说恰好这个目前现实情况和我们要进行解耦的情况  吻合.

     brand                        soft
 
  xiaomi   huawei         address        game


public class brand{ 桥接 也就是关联?  其实和我想的不太一样. 我想的是,这两个维度都是一个类的属性.  对不对,  要有全过程:调用时 应该是先有手机,然后在手机上运行软件.
  Soft soft;
}

面对多维度发展，你这时候用继承模式不是特别多，导致子类爆炸。。。

这时候用组合【聚合】模式，可以缓解这种子类爆炸的问题。。。


从新增需求来看，非常符合开闭原则。。。 把代码维护量优化到最小

解耦后步骤一:
1.定义一个抽象类PhoneBrand,定义抽象方法Run和SetSoft方法和soft属性
2.定义PhoneXiaomi和PhoneHUAWEI类,继承PhoneBrand,实现Run方法.
3.定义一个抽象类Soft类,定义抽象方法Run
4.定义Address和Game类,继承抽象类Soft,实现Run方法
5.在main函数中进行调用
6.扩展: 添加一个品牌锤子, 新建一个Chuizi类,继承PhoneBrand类,实现Run方法,即可, ==>  独自发展, 不干另个维度soft 什么事
7.扩展: 添加一个软件微信,新建一个Weixin类,继承Soft类,实现Run方法即可,==>独自发展.

三：项目中的例子

桥接模式最大的意思在哪里？？？  架构意义

microservice 【微服务】

按照业务进行拆分我们的系统。。。


1. getway 

2. zookeeper  服务发现

3. docker，devops自动化运维


      pc          app

    ==== getwway  ===== 隔离层

plane    hotel   car  train



public class ctrip
{
  ...
}


1.桥接模式? 桥接的是啥? 从什么样的局面,用了什么样的措施, 形成目前的局面? 目前有什么采取什么样的措施? 达到什么样的效果?
2.设计问题有问题? 如何设计出普通方式
3.理解问题有问题? 不能共享
4.耦合不关注  子类爆炸
5.多维度,独立发展  组合
6.




   1. 0是什么状态? 怎么演绎? 1是什么状态? 过程遇到什么问题? 有什么样的解决方案?  VS 有什么方案? 解决什么问题?   在正常的流程的大前提下,去看问题, 关注点不能本末倒置.  脱离环境 咋理解呢?  目的是啥?
  2.如何演绎的? 第一步是啥?新需求? 如何执行新需求? 有什么问题? 对应有什么解决办法? 解决方法有没新名词? 解释新名词? 执行接下来的一步 ... 重复执行? 这需要细节?
  3.要搞清楚的东西:
		1.多调试,看看顺序执行,分支,跳转,循环等执行路径  多重分支,多级分支, 
		2.同步,异步执行路径  特别是异步没有wait时.
		3.锁执行路径
		为什么要弄清楚呢? 大体情况要了解,避免处于盲区,或者关注点错误.或者没有大前提.
4.如何理清脉络? 有哪些关键点? 如何做到这些关键点? 这些关键点是为了达到什么样的目的? 关键点如何串起来.? 也就是说小目的串起来,达到最终目的?做事是为了达到某些目的? 出了问题?也就是目的没达到,也就是做的事有问题. 先找到主体,有个整体的认识,在去扣细节和辅助.
5.避免,毫无目的,毫无主线,无前提,无脉络 . 毫无关键点 也没主动. 瞎转,当然心中没数了,生活中也是如此
6.分析是如何分析的呢? 从oo角度分析, 无非一些类,然后交互. 还有流程的
7.分解很重要.  如何分解呢?  映射其实就是分解? 设计算法也是分解? 但分解到底是啥呢?
8. 抽象? 如何抽象?
9.分析问题不够深入,不能猜想,不能逻辑推理,容易卡壳,特别是遇到新概念,不懂的名词,卡壳后不会调整,学习不够本质,不能活学活用,容易只记住案例,当遇到类似的时候,不能联想, 举一反三.