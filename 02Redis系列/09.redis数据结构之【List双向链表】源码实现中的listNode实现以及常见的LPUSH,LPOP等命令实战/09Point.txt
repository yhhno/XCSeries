一：List  JAVA,C# 【Array】形式来实现的。。。 来实现的.=>说明此处有封装

   redis中是由 双向链表(此处的双向链表是redis作者用C语言实现的)来实现的   [引申想到单链表，单向循环链表，双向。。。十字链表]  

   对双向链表的不同操作,也就是不同的封装, 可以实现队列和栈,,因为.队列和栈可以用链表来实现.
    [队列 和 栈]  queue,  stack

	先画图来了解双向链表,做下准备工作,在从源码层次上来了解list
二：从源代码中了解List是如何构造的。。。


typedef struct listNode {
    struct listNode *prev;
    struct listNode *next;
    void *value;
} listNode;


//迭代一个中间变量
typedef struct listIter {
    listNode *next;
    int direction;
} listIter;

typedef struct list {   包装类
    listNode *head;
    listNode *tail;
    void *(*dup)(void *ptr);
    void (*free)(void *ptr);
    int (*match)(void *ptr, void *key);
    unsigned long len;
} list;

为了方便对listNode进行管理，redis中使用list进行包装。。。 

len：统计当前双向链表中的listnode的个数。。。 O(1)



list在redis中存放的形式：


redisObject
     
      type:    (0,1,2,3,4)  1
      encoding:                encoding是什么意思?
      ptr      type不同,ptr指向的类型不同,共五种

ptr => string   sds

ptr =>list      list -> listNode 


RedisDb => Dict => key: redisObject    value:redisObject


ptr =>  list[双向链表]


/* Object types */
#define OBJ_STRING 0
#define OBJ_LIST 1
#define OBJ_SET 2
#define OBJ_ZSET 3
#define OBJ_HASH 4



LPUSH key value [value ...]  【redis做催付订单，卖家发货，签收提醒】
LPOP key
RPUSH key value [value ...]
RPOP key
LLEN key


client     redis:list      server


orderid:  1001
orderid:  1002
orderid:  1003


unsigned long listTypeLength(robj *subject) {
    if (subject->encoding == OBJ_ENCODING_QUICKLIST) {
        return quicklistCount(subject->ptr);
    } else {
        serverPanic("Unknown list encoding");
    }
}

/* Return cached quicklist count */
unsigned int quicklistCount(quicklist *ql) { return ql->count; }









 


 9.redis数据结构之【List双向链表】源码实现中的listNode实现以及常见的LPUSH,LPOP,RPUSH,RPOP,LLEN命令实战
 0.我跟着学了一遍,他讲的知识和技巧,我能吸收多少呢? 如何才能吸收更多呢? 如何才能靠近他的水平呢?
 3. 我在学习的时候,和他在学习的时候有什么不一样呢?  仅仅是照搬? 根本没有深入去逻辑分析用法 ,代表什么,可以做什么,可以如何组合? 更别提深入源码? 是不是算法和数据结构不给力?  更别提组合使用? 
 3.1 他付出了什么? 我付出了什么? 他是怎样的一样追求[精益求精,时间和精力和智慧=>成果],我是怎样的一个追求[不劳而获,不花时间,悠闲的学会了?]?
 3.0.我跟着学了一遍,他讲的知识和技巧,我能吸收多少呢? 如何才能吸收更多呢? 如何才能靠近他的水平呢?
 4.0.最主要的我能吸收多少? 最终运用多少?

 1.高级语言中封装了很多数据结构,什么意思,也就是提供了很多现成的结构给我们使用? redis中相对少些
 2.redis是用c实现的, 我们知道C中根本没有数据结构. =>so我们可以从redis的源代码中,学习到如何封装数据结构? =>小小的逻辑推理下
 3.数据结构在各种高级语言和低级语言 中的不同?

 数据结构就是存储数据,查找数据. 各有各的特点呗.=>特定的特点就对应应用场景

 4.新东西,如何去理解? 咱可以理解它是做什么的,可以怎么操作,达到什么样的目的. 这样就在使用层次上,了然于胸. 然后再从源码层级去了解  首先是个集合,存,取,查, 但能满足一些特定化需要(可能不止一步,多步组合),不仅仅是根据下标获取,先进先出,先进后出,查询效率高,
5.说白了,它到底有啥用?不能先去纠结它是什么?