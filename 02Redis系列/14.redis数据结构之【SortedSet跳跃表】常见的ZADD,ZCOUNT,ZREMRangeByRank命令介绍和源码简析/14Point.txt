set  无value的字典
一：SortedSet   对应的高级语言Java，C# 【SortDictinory 有序字典=> 由红黑树实现（很复杂一种树结构，减少旋转）】

redis:skiplist 【跳跃表】 90年   【链表 来达到树的一个效果】  AVL，RedBlackTree  


严格的Log2N复杂度。。。  


准备工作,先理解跳跃表

1. 如何更快的时间，经过更少的城市达到目标城市


《1》到达北京： 直接飞机 一站达到  O(1)

《2》天津：     四个节点到天津。

sortedSet的最终效果
【层次链表】 达到均摊的log2N 的时间复杂度。。。


2. 添加数据到sortedset中。。。。 

《1》 优先级队列   什么是优先级队列?                              新东西,如何去理解? 咱可以理解它是做什么的,可以怎么操作,达到什么样的目的.                                                               这样就在使用层次上,了然于胸. 然后再从源码层级去了解  
                                                                  首先是个存储数据的结构,存,取,查, 但能满足一些特定化需要,(可能不止一步,                                 多步组合)
																  不仅仅是根据下标获取,先进先出,先进后出,查询效率高,

《2》 top10的操作 【top N 大根堆，小根堆】  什么是大根堆,小根堆?

ZADD key [NX|XX] [CH] [INCR] score member [score member ...]

k:score      【权重，优先级】  什么是权重,什么是优先级?      常见的名词一定要理解清楚?
v：member


127.0.0.1:6379> zadd trades 10 trade_10
(integer) 1
127.0.0.1:6379> zadd trades 20 trade_20
(integer) 1
127.0.0.1:6379> zadd trades 30 trade_30
(integer) 1
127.0.0.1:6379> zadd trades 40 trade_40
(integer) 1
127.0.0.1:6379> zadd trades 50 trade_50
(integer) 1
127.0.0.1:6379> 


1.如果获取所有的数据

127.0.0.1:6379> zrange trades 0 -1    【从小到大的排序】 也可以从大到小
1) "trade_10"
2) "trade_20"
3) "trade_30"
4) "trade_40"
5) "trade_50"
127.0.0.1:6379> 

127.0.0.1:6379> zrevrange trades 0 -1
1) "trade_50"
2) "trade_40"
3) "trade_30"
4) "trade_20"
5) "trade_10"


127.0.0.1:6379> zrange trades 0 -1 withscores
 1) "trade_10"
 2) "10"
 3) "trade_20"
 4) "20"
 5) "trade_30"
 6) "30"
 7) "trade_40"
 8) "40"
 9) "trade_50"
10) "50"
127.0.0.1:6379> 


ZREVRANGE key start stop [WITHSCORES] 根据


如何实现优先级队列?
优先级队列：

1. 先获取最大值：

127.0.0.1:6379> zrevrange trades 0 0
1) "trade_50"


2. 删除最大值
 
127.0.0.1:6379> zremrangebyrank trades -1 -1
(integer) 1


127.0.0.1:6379> zrevrange trades 0 -1
1) "trade_50"
2) "trade_40"
3) "trade_30"
4) "trade_20"
5) "trade_10"
127.0.0.1:6379> zrevrange trades 0 0
1) "trade_50"
127.0.0.1:6379> zremrangebyrank trades -1 -1
(integer) 1
127.0.0.1:6379> zrevrange trades 0 -1
1) "trade_40"
2) "trade_30"
3) "trade_20"
4) "trade_10"
127.0.0.1:6379> 


一般来说做两次操作。。。 【redis】 做优先级队列面临的一些问题。。。


	9.1 优先级队列: 每一步都会卡壳,停止不前,此时给一个详细案例.
		                首先优先级队列是一个结果,一堆数据,可以按照优先级高低出列.
		                 然后再分析怎样实现这个特性呢 或者组合起来实现这个特性
						 数据是什么样的? 如何表示优先级?如何存储的? 
						 怎样的封装方法?实现最高级出列?,						
						 如何实现优先级队列?
								优先级队列：
											1. 先获取最大值：
											2. 删除最大值
						 到这里有点要停止的意思.相当然完成了任务
						 没有的,要继续,
						 如何继续第二高数据出列.
						 要逐步逻辑地推理下去,
						 直到达到结束条件
						 ?队列的数据容量是否不变,数据如何初始化,结束后如何处理?




Rabbitmq 专业级别的MQ产品。




1.sortdictionry  红黑树  跳跃表  没有概念?
2.听到优先级队列, 懵逼? 该怎么做?  新知识如何做? 不知道这是干什么用的? 如何实现? 此时就懵逼了, 怎么破呢?
3.欠缺一些数据结构知识?
4.欠缺一些常见术语,常见名词? 常见的场景,常见的基础知识?常见的概念?  
4.1拒绝不懂装懂的浏览? 这就是一个问题,要去解决? 不能说,心理不消极就好了.?  不消极就不要看,,看了就必须积极. 既然看就要看好.
5.redis的数据结构及其命令不是很熟悉,了然于胸? 不劳而获?唾手而得? 要清楚意识到自己的不足?
5.1老黄是怎么做到的呢?

6.面对新知识的时候,如何做?
7.新东西,如何去理解? 咱可以理解它是做什么的,可以怎么操作,达到什么样的目的. 这样就在使用层次上,有什么优缺点,了然于胸. 然后再从源码层级去了解  首先是个集合,存,取,查, 但能满足一些特定化需要(可能不止一步,多步组合),不仅仅是根据下标获取,先进先出,先进后出,查询效率高,
8.说白了,它到底有啥用?不能先去纠结它是什么? 结合队列,大根堆, 去理解? 它首先是存数据的,但能满足优先级特性,top N的目的.
9.任何一步骤或者一件事,不能是孤零零的本身.是有前因后果的,有逻辑额.有优缺点,有应用场景,不能是仅仅浏览它本身.

10.此时就有点浏览的状态了? 
11.要延伸,不能仅仅学到别人教的,一定要延伸,也就是必须要有抽象的能力. 不然就是个静止的学习? 知识学知识,不是学能力?



1.欠缺一些常见术语,常见名词? 常见的场景,常见的基础知识?常见的概念?   =>要补上?
2.错误的习惯性思维: 唾手可得.
3.拒绝不懂装懂的浏览?   哪有无目的去做事? 除非是做做样子. 其实这样做,心里还是有不好的影响的. 慢慢没有好奇心,没有了追求进步的动力.
           这就是一个问题,要去解决? 
		   不能说,心理不消极就好了?  
		   不消极就不要看?
		   看了就必须积极?
		   既然看就要看好?