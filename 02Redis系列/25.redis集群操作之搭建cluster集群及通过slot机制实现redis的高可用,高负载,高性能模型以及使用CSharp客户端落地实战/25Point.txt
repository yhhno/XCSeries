流程和元素和场景(eg集群),都要了然于胸,只有认识的很本质,很清晰,才能更好的了然于胸
1.对比什么呢 对比认识,对比实现,对比应用? 对比就是为了发现自己的不准确?
对比下自己认识的集群和正确的有啥偏差? 为啥自己以前看的时候,没收获呢?以为多个机器就是集群了.?具体如何运作不知道?也就是说集群的流程不知?
面对旧知识和新知识时,有什么不同呢?
一： redis cluster 3.0 出来的

1. 为什么集群： 突破单机的限制  为什么没想到呢? 没有从存储角度来考虑? =>多个角度考虑? 有血有肉的认识? 有时要扩充下有血有肉的标准?

   master -slave 
                  =>其实还是单机存储. 有一个中心.  如何理解?=> 多个角度考虑?
   sentinel 故障自动转移.=>出了故障怎么办?
   本质上以上两种还是解决不了分布式的问题? 为什么解决不了?存储还是在单机上,? 当时学习没有持续有逻辑流程式的推理? 
                                                   如何理解分布式?
 
如果我的数据有1T。。。那如何存放到redis中。。。=>多台redis来存储.=>了解前因后果.


去中心化的方式  如何理解?


mongodb


              monogd
 client       mongos    mongod
              mongod

中心化

p2p 中心化,去中心化等,在一知半解,想当然,懵逼,等不了解本质的情况下,去学习,=>绝逼学不会.

redis: p2p的方法 【去重新化】 类似一致性哈希

1. 首先redis集群使用16384个slot(槽位)。。。

 由三台机器承载16384个slot... 

client -> hash(username)   

0< hash(username) < 16383

eg: hash(username)=100 

                   redis
 client   hash     redis
                   redis


这个hash(username)函数实在各自的client端。。。【驱动中内置的】

2. cluster 内置了sentinel + master/slave + partition(数据切分)...


3.

 4台centos

  centos1：  192.168.23.158  

  centos2：  192.168.23.152

  centos3：  192.168.23.145 
 
  centos4：  192.168.23.154     三台slave



三：操作步骤：

1. 开启cluster模式

 cluster-enabled yes                    开启集群状态
 cluster-config-file nodes-6379.conf    集群的节点文件


 ./redis-server ./redis.conf


2. 找到一个叫做 redis-trib.rb 的文件 rb=>  ruby

   centos 没有ruby的环境。。。

   安装一系列的依赖包。。。

//通过第三方工具进行安装
./redis-trib.rb create --replicas 1 192.168.23.158:6379 192.168.23.152:6379 192.168.23.145:6379 192.168.23.154:6379 192.168.23.154:6380 192.168.23.154:6381

《1》 ruby环境
《2》 ruby的redis驱动安装    gem install redis

[root@localhost redis]# ./redis-trib.rb create --replicas 1 192.168.23.158:6379 192.168.23.152:6379 192.168.23.145:6379 192.168.23.154:6379 192.168.23.154:6380 192.168.23.154:6381
>>> Creating cluster
>>> Performing hash slots allocation on 6 nodes...
Using 3 masters:
192.168.23.158:6379
192.168.23.152:6379
192.168.23.145:6379
Adding replica 192.168.23.154:6379 to 192.168.23.158:6379
Adding replica 192.168.23.154:6380 to 192.168.23.152:6379
Adding replica 192.168.23.154:6381 to 192.168.23.145:6379
M: cbfadb06673f7eb69483aa2031cb60fc4251fb7a 192.168.23.158:6379
   slots:0-5460 (5461 slots) master
M: 2160b439f59fafc3bb02fe920933284d5df3f39e 192.168.23.152:6379
   slots:5461-10922 (5462 slots) master
M: 38a05510f8014d7fdf7b9c606461ecaae5a47b2a 192.168.23.145:6379
   slots:10923-16383 (5461 slots) master
S: 2628c7fa7630d544b7d4a727d563a49c68578240 192.168.23.154:6379
   replicates cbfadb06673f7eb69483aa2031cb60fc4251fb7a
S: 30c4755c49b228af5e111baa74dbebb85c4185c8 192.168.23.154:6380
   replicates 2160b439f59fafc3bb02fe920933284d5df3f39e
S: 75a81dbaeb8d46b0783adb3ab8aeec405608ca18 192.168.23.154:6381
   replicates 38a05510f8014d7fdf7b9c606461ecaae5a47b2a
Can I set the above configuration? (type 'yes' to accept): 




[root@localhost s1]# ./redis-cli
127.0.0.1:6379> cluster nodes
2628c7fa7630d544b7d4a727d563a49c68578240 192.168.23.154:6379 myself,slave cbfadb06673f7eb69483aa2031cb60fc4251fb7a 0 0 4 connected
38a05510f8014d7fdf7b9c606461ecaae5a47b2a 192.168.23.145:6379 master - 0 1483019113842 3 connected 10923-16383
75a81dbaeb8d46b0783adb3ab8aeec405608ca18 192.168.23.154:6381 slave 38a05510f8014d7fdf7b9c606461ecaae5a47b2a 0 1483019115859 6 connected
30c4755c49b228af5e111baa74dbebb85c4185c8 192.168.23.154:6380 slave 2160b439f59fafc3bb02fe920933284d5df3f39e 0 1483019114335 5 connected
cbfadb06673f7eb69483aa2031cb60fc4251fb7a 192.168.23.158:6379 master - 0 1483019114840 1 connected 0-5460
2160b439f59fafc3bb02fe920933284d5df3f39e 192.168.23.152:6379 master - 0 1483019110809 2 connected 5461-10922
127.0.0.1:6379> 



redis-cli做一个演示。。。  set username jack



root@localhost s1]# ./redis-cli -c
127.0.0.1:6379> set username jack
-> Redirected to slot [14315] located at 192.168.23.145:6379
OK
192.168.23.145:6379> set password 12345
-> Redirected to slot [9540] located at 192.168.23.152:6379
OK
192.168.23.152:6379> set email 3234234@qq.com
OK
192.168.23.152:6379> 



三：验证

1. redis-cli -c

2. C#驱动。。。




  
  不断地站在巨人的肩膀上,去思考,去学习.
 持续的在正确的范围内: 思考过程中使用:[全过程,有血有肉的认识,拒绝浏览式的,有猜想(自己思考过)]
学东西肯定是要用的? 算是有血有肉的范畴
对比什么呢? 这是个问题?
0.要对比自己知识点,流程,运用,关系的认识, 有对比才有进步.  =>加深认识和设计能力+发现自己的不足和认识不准确
0. 对比过程要有猜想,要有预期?  预期与现状的比较?
1.了然于胸=元素+元素关系+流程  eg:链表的value 是什么类型呢?
5.0,很抽象的的概念,可以应用到很多层级,维度,粒度  例如生活,数据结构(算是知识点吧),系统(系统算是运用吧)
5.首先一些最基本的个体, 
             然后组合一些中级的个体,
			 然后组合一些中级和基本的个体.
			 最后可能我是使用的就是高级个体.
			 我们不能局限于高级个体,其他的个体也要知道,还要知道如何演绎的.演绎是流程
  演绎是流程.流程怎么走的?
             流程是个过程,
			 最开始准备工作,元素材料准备好,
			 整体上流程是怎样的?
			 理想情况下:一步接着一步是怎样走完整个流程?
			 出现意外,如何处理,然后在接下来走下去?
			 每一步骤中,是如何组合元素?如何交互?完成这一步?
			 直至结束
                
5.1.人都是关注对自己有利的东西. 仅仅是记住? 没好处? 那还记得清楚? 
5.2.如果一步步走下来,好处一次次大,那还能记不住? 兴趣也许就不过如此? 也许此过程就发现了优雅?
5.4.之前好像仅仅是停留在高级个体,浏览高级个体?   填鸭式个体不过如此吧. 之前的状态好像也是这个原因吧
5.5 咋牛逼,也要形成习惯? 持续的产生效果? 也就是牛逼的结果,变常见的结果.
5.6 绝对不能放松状态,不然很难转换过来,必须一心认真对待,不认真不一心,绝对没有效果.





0.概念,原理,运用.对比,局限,有什么借鉴,了然于心?
1.知识点
2.概念
3.流程:不仅是系统流程,功能流程,还有命令流程
4.技巧:对比+猜想+模型+预期+预期与现状比较+有逻辑的捋流程
5.思维:填鸭式介绍,也填鸭式思考,思考是还浅尝辄止,还没形成习惯,把牛逼的变普通,越简单就灵活性越高
6.贯穿: 学东西肯定是要用的. 意外怎么办? 