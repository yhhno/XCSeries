一：hyperloglog  【其实是一个算法】 what? 新东西? 该如何学习?

1. distinct + count    [如何理解:去重后计算个数]  概念?


应用场景

我们要计算某一天的独立ip数。。。。


《1》 使用set来保存某一天的所有ip数字。。。  场景与程序的映射?

  set  2016-12-26    192.168.10.121   192.168.10.122   192.168.10.123    192.168.10.121

    
       独立IP是多少呢？  3个。。。  set本身不支持去重的,需要进一步的处理? 
	                              1.思维的惯性错误,对一个问题,习惯希望用一个东西给处理了,
								  如果处理不了,就会心中产生沮丧.或者止步于此,然后心情沮丧,最后放弃.
								  2,也算是唾手而得的心理吧

       这时候，如果ip有1kw。。1ww。。。  【数据量太大时,耗费巨大的内存】
	   此时使用集合,就不恰当了.  so需要知道各种数据结构的特性,应用场景,不足


《2》 hyperloglog  解决这种问题。。。
      0. 在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。   如何实现的呢?
	  因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身
	  8bit=1byte 1024byte=1kb  1024kb=1mb
      1. 节省内存 每个HyperLogLog结构需要12K字节再加上key本身的几个字节  

                 hyperloglog + len(key)   最多也就是几十k。。。
                                          能够解决别人几百M所能解决的问题。。。
 
                hyperloglog不存储value,只是计算基数值。。。

      pfadd:   PFADD key element [element ...]

      pfcount: PFCOUNT key [key ...]

      pfmerge:

      2. 弊端：  有一定的错误率。。。   用错误率换取空间。。。  0.81% 。。。  如何理解错误率换空间?


二：Sort 【一个排序】 对key进行操作的。。  sort的作用场景?,作用对象

SORT key [BY pattern] [LIMIT offset count] [GET pattern] [ASC|DESC] [ALPHA] destination

此函数,更适合的去模仿sql。。。


如何让redis 模仿sql的一些语法     两种不同的工具,如何实现同样的效果呢?
uid  username_{0}  age_{1}

 1    jack          30

 2    mary          15

 3    john          20

 添加数据  mset批量
 127.0.0.1:6379>lpush uid 1 2 3
 (integer) 2
 127.0.0.1:6379>mset username_1 jack username_2 mary username_3 john
 OK
 127.0.0.1:6379>mset age_1 30 age_2 15 age_3 20
 OK


1. 直接sort key

sort uid

127.0.0.1:6379> sort uid
1) "1"
2) "2"
3) "3"
127.0.0.1:6379> sort uid desc
1) "3"
2) "2"
3) "1"
127.0.0.1:6379> 

2. sort limit

select uid from users limit 0 1 desc

127.0.0.1:6379> sort uid limit 0 1 desc
1) "3"
127.0.0.1:6379> sort udi limit 0 1 asc
(empty list or set)
127.0.0.1:6379> sort uid limit 0 1 asc
1) "1"


3. sort [BY pattern]


uid  username_{0}  age_{1}

 1    jack          30

 2    mary          15

 3    john          20


select usename from users order by age desc

jack
john
mary

上面这种场景该如何实现？？？


127.0.0.1:6379> sort uid by age_* get username_* desc
1) "jack"
2) "john"
3) "mary"

4. 我在获取usename的时候，想把uid也捞出来。。。

select uid,username from users order by age desc。。。

sort uid by age_* get username_* get #  desc


5. 获取所有。。。

 select uid,username,age from users order by age desc....

127.0.0.1:6379> sort uid by age_* get username_* get # get age_*  desc
1) "jack"
2) "1"
3) "30"

存储结构为hash时,sort操作?

127.0.0.1:6379>  HMSET user_info_1 name admin level 9999
OK
127.0.0.1:6379> HMSET user_info_2 name jack level 10
OK
127.0.0.1:6379>  HMSET user_info_3 name peter level 25
OK
127.0.0.1:6379>  HMSET user_info_4 name mary level 70
OK
127.0.0.1:6379> sort uid
1) "1"
2) "2"
3) "3"
127.0.0.1:6379> rpush uid 4
(integer) 4
127.0.0.1:6379> sort uid
1) "1"
2) "2"
3) "3"
4) "4"
127.0.0.1:6379> sort uid by user_info_*->level get user_info_*->name 
1) "jack"
2) "peter"
3) "mary"
4) "admin"
127.0.0.1:6379> sort uid by user_info_*->level get user_info_*->name  desc
1) "admin"
2) "mary"
3) "peter"
4) "jack"
127.0.0.1:6379> 
4) "john"
5) "3"
6) "20"
7) "mary"
8) "2"
9) "15"
127.0.0.1:6379> 

redis中,也有低性能的操作. 比如sort
复杂度不低的。。而且能不用就不用。。。毕竟以性能为代价。。。





1.什么是基数? 什么是基数统计?
2.如何理解错误率换时间?  
3.so需要知道各种数据结构的特性,应用场景,不足
4.redis中的各种数据结构及其命令不是很熟悉.

1.思维的惯性错误,对一个问题,习惯希望用一个东西给处理了,如果处理不了,就会心中产生沮丧.或者止步于此,然后心情沮丧,最后放弃.
2.也算是唾手而得的心理吧.
3.基本术语,基本场景,基本知识点的不足
4.知识的组合使用. 需求的分析,演绎吧

最可怕的是思维的错误,不能老是陷在错误的思维中? 错误的思维在于老是陷于错误的思维.
1.欠缺一些常见术语,常见名词? 常见的场景,常见的基础知识?常见的概念?   =>要补上? 为什么欠缺,欠缺后没补救, 什么错误思维?
2.错误的习惯性思维: 唾手可得. 最可怕的是思维的错误,不能老是陷在错误的思维中? 错误的思维在于老是陷于错误的思维.
3.拒绝不懂装懂的浏览?   哪有无目的去做事? 除非是做做样子. 其实这样做,心里还是有不好的影响的. 慢慢没有好奇心,没有了追求进步的动力.
           这就是一个问题,要去解决? 
		   不能说,心理不消极就好了?  
		   不消极就不要看?
		   看了就必须积极?
		   既然看就要看好?
