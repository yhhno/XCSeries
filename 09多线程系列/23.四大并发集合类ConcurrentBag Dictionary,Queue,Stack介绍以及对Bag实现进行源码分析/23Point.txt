所有的都要记录下来. 边学边记. 抛弃深渊. 状态要预热呀. 还是要有激情的. 关注点要正确的. 体现各种形式上的"主动" , 用脑子学习思考.
找出自己的不足?心理素质还是最关键的. 不要习以为常? 还是心中要有概念. 不懂的地方一定要深挖,深挖了就简单了.哈哈 
效率啊  理解能力有待加强, 理论变成大白话, 一眼看本质,看透的能力要加强(核心竞争力呀)
无论什么都是要有个模型的? 比如理解模型? 思考模型? 对比模型? 等等
理解不够透彻? 大概了解就完成了,没有深入有逻辑,全过程推演.
理解了大概? 在了解如何实现?  真正的了解大概(有大前提,基本流程,在扣关键点), 真正的如何去实现?=> 这是个全过程嘛,=>主动起来, 还是要主动起来.
万事不要沾上"懒"字? 遇到新的该咋办?
真正的了解大概(有大前提,基本流程,在扣关键点)+1
为啥觉得很简答呢?=>很简单=>很好玩=>很有趣
你是谁?你从哪里来?你到那里去?
跨学科的应用?
精神头那里去了? 都没动力咋落实呀?



一：我们集合是没有锁机制的。。。

   我们目前的所有集合都是线程不安全。。。

   
二：到底有哪些线程安全的集合   多线程环境下优先使用这些集合

// System.Collections.Concurrent 命名空间


1. ConcurrentQueue   => Queue

2. ConcurrentDictionary<TKey, TValue> => Dictionary
 
3. ConcurrentStack<T>    => Stack

4. ConcurrentBag<T>     ！=> List/ LinkList ??? 数组 链表?


三：分析ＣｏｎｃｕｒｒｅｎｔＢａｇ到底是什么样的数据结构


ThreadLocal 是什么意思？？？ 每个线程有一个自己的备份(线程不可见)


1. 每一个线程分配一个“链表” 这个链表可以任务是list（ThreadLocalList）


当你Ａｄｄ操作的时候，locals里面有一份新增的数据，【只有本线程看得见】

同时head和next也是有数据的。。。。为什么有？？因为我们的算法有一个“偷盗”
的行为。。。

TryTake: 获取数据

如果有三个线程做Add操作，那么三个线程的数据槽中都有一份子集数据。。。

t1: 1,2,3    locals
t2: 1,3,2    locals
t3: 2,3,4    locals  

这个时候，如果你在t3线程中执行了三个TryTake。。

t1: 1,2,3    locals
t2: 1,3,2    locals
t3: empty    locals 

如果这个时候我在t3线程上进行tryTake，怎么办？？？

这个时候就到Bag的下一级的ttl head 和 next中去找。。。。【steal 偷盗的时候使用的】

	for (threadLocalList = this.m_headList; threadLocalList != null; threadLocalList = threadLocalList.m_nextList)
		{
			list.Add(threadLocalList.m_version);
			if (threadLocalList.m_head != null && this.TrySteal(threadLocalList, out result, take))
			{
				return true;
			}
		}

总结：ConcurrentBag 就是利用线程槽来分摊Bag中的所有数据。

      ConcurrentBag的所有数据都是防止在多个插入线程的槽位中。。每个线程一个子集。。。

链表的头插法。


        static void Main(string[] args)
        {
            ConcurrentBag<int> bag = new ConcurrentBag<int>();

            bag.Add(1);

            bag.Add(2);

            var result = 0;
            bag.TryTake(out result);
        }

2. ConcurrentStack

   线程安全的Stack是使用链表的形式，而同步版本是用 数组 实现的。。。
   线程安全的Stack是使用Interlocked来实现线程安全。。 而没有使用 内核锁

        static void Main(string[] args)
        {
            ConcurrentStack<int> stack = new ConcurrentStack<int>();

            stack.Push(1); 

            stack.Push(2);

            var result = 0;
            stack.TryPop(out result);

            Console.WriteLine(result);
        }

3. ConcurrentQueue   =>  同步版本使用 数组

        static void Main(string[] args)
        {
            ConcurrentQueue<int> queue = new ConcurrentQueue<int>();

            queue.Enqueue(1);

            var result = 0;
            queue.TryDequeue(out result);

            Console.WriteLine(result);
        }

4. ConcurrentDictionary

            ConcurrentDictionary<int, int> dic = new ConcurrentDictionary<int, int>();

            dic.TryAdd(1, 10);

            dic.ContainsKey(1);

            foreach (var item in dic)
            {
                Console.WriteLine(item.Key + item.Value);
            }

多线程中优先并发集合,但是 并发集合等价于 非同步集合 + lock/其他锁机制 , 不然并发集合没出现时, 咋处理并发呢?

源码要看的,看之前可以概念上认识,也就是黑盒


1.线程不安全的集合,也就是没有锁机制的集合
2 ConcurrentQueue 
3 ConcurrentDictionary<TKey, TValue> 
4 ConcurrentStack<T>   
5 ConcurrentBag<T>  
6.并发集合都有那些?各自是如何使用的? 概念上是怎样?各自是如何实现的? 实质上是怎样?源码也要有概念上的认识?粗粗的知道如何实现? 也算是如何设计一个并发的数据结构? 
7.各种锁机制在并发集合中的使用
8.如果仅仅是使用,概念上的认识, 不能形成竞争力.



 理解的标准:理解了就不难,关键怎样算理解了? 如何去理解呢? 这样理解的程度好不? 看着整体逻辑图,清清楚楚知道过程细节?
掌握的方法:有逻辑的分析,有逻辑的理解.
掌握的标准:是否心中有概念?什么是心中有概念? 前因后果,有逻辑的推演整个过程.
掌握的技巧: 1.不要太关注,难或易,不然就陷入被动了,任何事都要主动.(想到任何事的相应的主动状态.)
           2.遇到新知识，大量不懂的概念？怎么办？ =》存在浏览式，完成任务？为什么呢？不懂的心理 驱使快速完成来安慰自己。
		   3.遇到理解卡壳，怎么办？
		   4.遇到不知所措，怎么办？
		   5.遇到错误了,该怎么办?
		   6.遇到没效率的时候,该怎么办?
		   5.关注负面的东西,着眼于美好的东西.
		   6.不关注坏习惯,而是养成好习惯,关注点要正确?
是否复习：
