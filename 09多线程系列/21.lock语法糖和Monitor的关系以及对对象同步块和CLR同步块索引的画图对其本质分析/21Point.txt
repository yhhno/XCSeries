所有的都要记录下来. 边学边记. 抛弃深渊. 状态要预热呀. 还是要有激情的. 关注点要正确的. 体现各种形式上的"主动" , 用脑子学习思考.
找出自己的不足?心理素质还是最关键的. 不要习以为常? 还是心中要有概念. 不懂的地方一定要深挖,深挖了就简单了.哈哈 
效率啊  理解能力有待加强, 理论变成大白话, 一眼看本质,看透的能力要加强(核心竞争力呀)
无论什么都是要有个模型的? 比如理解模型? 思考模型? 对比模型? 等等
理解不够透彻? 大概了解就完成了,没有深入有逻辑,全过程推演.
理解了大概? 在了解如何实现?  真正的了解大概(有大前提,基本流程,在扣关键点), 真正的如何去实现?=> 这是个全过程嘛,=>主动起来, 还是要主动起来.
万事不要沾上"懒"字? 遇到新的该咋办?
真正的了解大概(有大前提,基本流程,在扣关键点)+1
为啥觉得很简答呢?=>很简单=>很好玩=>很有趣
你是谁?你从哪里来?你到那里去?
跨学科的应用?
精神头那里去了? 都没动力咋落实呀?



一：监视锁 一个线程进,一个线程出. 也就是单个线程出入.

限定线程个数的一把锁 ：Monitor,也就是有序的.

Enter 锁住某一个资源

Exit  退出某一个资源

class Program
    {
        static void Main(string[] args)
        {
            for (int i = 0; i < 5; i++)
            {
                Task.Factory.StartNew(() =>
                {
                    Run();
                });
            }

            Console.ReadLine();
        }

        static object lockMe = new object();//引用类型? 为什么要引用类型呢?
        static int nums = 0;
        static void Run()
        {
            for (int i = 0; i < 100; i++)
            {
                var b = false;//生成环境中的使用方式,有try b finnally
                try
                {

                    //类似SpinLock, SpinLock没有印象
                    Monitor.Enter(lockMe, ref b); //为什么要有b呢? 如果获取锁时,失败了,此时就不能退出了.,防止此类情况出现
                    Console.WriteLine(nums++);
                    //seLock.Release();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
                finally
                {
                    if (b) Monitor.Exit(lockMe); //严谨, 如果获取锁,才可以退出.  为啥没想到/
                }
            }
        }
    }

给一个什么感觉：为了严谨性，是不是为了加锁区域我都有try catch finally..而且还要用

if来判断。。太麻烦。  有没更方便的?==>前进的动力.

                lock (lockMe)  好简单哦
                {
                    Console.WriteLine(nums++);
                }

凡是简化我们编程的方式，基本上都叫语法糖

语法糖

--------------- 编译器 --------------

该是什么样的还是什么样。

.method private hidebysig static 
	void Run () cil managed 
{
	// Method begins at RVA 0x20a0
	// Code size 72 (0x48)
	.maxstack 3
	.locals init (
		[0] int32,
		[1] object,
		[2] bool,
		[3] bool
	)

	IL_0000: nop
	IL_0001: ldc.i4.0
	IL_0002: stloc.0
	IL_0003: br.s IL_003e
	// loop start (head: IL_003e)
		IL_0005: nop
		IL_0006: ldsfld object ConsoleApplication1.Program::lockMe  静态变量
		IL_000b: stloc.1  加载到局部变量索引为1 的位置上
		IL_000c: ldc.i4.0  
		IL_000d: stloc.2  
		.try  try语句
		{
			IL_000e: ldloc.1
			IL_000f: ldloca.s 2
			IL_0011: call void [mscorlib]System.Threading.Monitor::Enter(object, bool&)
			IL_0016: nop
			IL_0017: nop
			IL_0018: ldsfld int32 ConsoleApplication1.Program::nums
			IL_001d: dup
			IL_001e: ldc.i4.1
			IL_001f: add
			IL_0020: stsfld int32 ConsoleApplication1.Program::nums
			IL_0025: call void [mscorlib]System.Console::WriteLine(int32)
			IL_002a: nop
			IL_002b: nop
			IL_002c: leave.s IL_0039
		} // end .try
		finally
		{
			IL_002e: ldloc.2
			IL_002f: brfalse.s IL_0038

			IL_0031: ldloc.1
			IL_0032: call void [mscorlib]System.Threading.Monitor::Exit(object)
			IL_0037: nop

			IL_0038: endfinally
		} // end handler

		IL_0039: nop
		IL_003a: ldloc.0
		IL_003b: ldc.i4.1
		IL_003c: add
		IL_003d: stloc.0

		IL_003e: ldloc.0
		IL_003f: ldc.i4.s 100
		IL_0041: clt
		IL_0043: stloc.3
		IL_0044: ldloc.3
		IL_0045: brtrue.s IL_0005
	// end loop

	IL_0047: ret
} // end of method Program::Run


他的角度,格局,解释,  确实不一般,高一个等级. 也就是方向和起点,和程度,都不一样.
so,要和高级的人多混,不然,坑的都是自己? 慢慢的也就越来越偏,越来越难纠正.
二：lock/Monitor的内部机制    

因为众多的锁机制中，唯独只有Monitor有专用的语法糖。。。。所以说非常受重视。。。

本质就是利用堆上的同步块实现资源锁定。。。   同步块是啥?  如何实现资源锁定?



总结：  如何能总结出这个逻辑推理过程呢?
1. Enter中添加的对象，相当于把对象的同步块索引和CLR的同步块数组了关联。  此过程包括了同步块索引值的变化和clr的同步数组值的变化?也就是索引值变为1,添加到同步数组中,

   Exit中释放的资源，相当于把对象的同步快索引和CLR的同步块数组进行了解绑。 也就是把所以从同步数组中移除,并把同步块索引的改为-1?

注意事项：

1. 你锁住的资源一定要让你的可访问的线程必须能够访问到。。。  如何理解可访问的线程, 如何理解必须能够访问到? 所有访问这个资源的线程? 都能够访问导到这个值,访问不到或者访问到其他的值都不可以.

   所以锁住的资源千万不要使用值类型(每次的值都一样)和 访问线程内创建锁定资源.(创建的资源只能自己访问到)




1.监视锁,lock 两者的关系
2.lock的内部原理
3.语法糖,IL代码, 理解下为啥要用锁? 啥时候用锁?




 理解的标准:理解了就不难,关键怎样算理解了? 如何去理解呢? 这样理解的程度好不? 看着整体逻辑图,清清楚楚知道过程细节?
掌握的方法:有逻辑的分析,有逻辑的理解.
掌握的标准:是否心中有概念?什么是心中有概念? 前因后果,有逻辑的推演整个过程.
掌握的技巧: 1.不要太关注,难或易,不然就陷入被动了,任何事都要主动.(想到任何事的相应的主动状态.)
           2.遇到新知识，大量不懂的概念？怎么办？ =》存在浏览式，完成任务？为什么呢？不懂的心理 驱使快速完成来安慰自己。
		   3.遇到理解卡壳，怎么办？
		   4.遇到不知所措，怎么办？
		   5.遇到错误了,该怎么办?
		   6.遇到没效率的时候,该怎么办?
		   5.关注负面的东西,着眼于美好的东西.
		   6.不关注坏习惯,而是养成好习惯,关注点要正确?
是否复习：
