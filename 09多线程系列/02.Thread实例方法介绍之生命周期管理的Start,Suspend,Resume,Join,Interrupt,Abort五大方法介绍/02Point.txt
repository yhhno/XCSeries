所有的都要记录下来. 边学边记. 抛弃深渊. 状态要预热呀.


学习在clr中如何表示线程 用thread,还有操作系统的层次.
一：在clr中Thread这个名字来表示线程这个概念


本节课了解Thread的实例方法。。。 【还有id，ThreadState等状态】 什么是实例方法?
操作系统中有个osid,用clr来表示的话,它也应该有个id,name threadstate,
属性本来也是一种方法.

如果管理Thread生命周期  为什么没想到？

Start, Suspend(挂起), Resume(恢复), Intterupt(中断)，Abort(销毁)。。。这几个方法控制thread的的生到死.     在使用Thread的时候是用的非常多的。。。
Join(让主线程阻塞) 不算是生命周期管理，可以放到一个控制台中给大家讲


此时出现不是console程序,而是winform程序,就不想干了?
定期把内容打到text上. 如何理解?
1. Start演示

     thread = new Thread(new ThreadStart(() =>
            {
                while (true)
                {
                    try
                    {
					给它休眠一下,防止追加的特别快
					也就是说达到一个定时的效果.
					  //定时的效果(结合一个线程和Thread.Sleep)
                        Thread.Sleep(1000);

                        textBox1.Invoke(new Action(() =>
                                   {
                                       textBox1.AppendText(string.Format("{0},", index++));
                                   }));
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(string.Format("{0}, {1}", ex.Message, index));
                    }
					 finally
                    {
                        //定时的效果(结合一个线程和Thread.Sleep)
                        Thread.Sleep(1000);
                    }
                }
            }));

            thread.Start();


2. suspend演示  

 //这个方法是弃用的,也就是说你可以用,但不建议你用
            //逻辑严谨性
            //只有在线程运行时和线程休眠的时候,才可以挂起.
            if(thread.ThreadState==ThreadState.Running||thread.ThreadState==ThreadState.WaitSleepJoin)
            {
                thread.Suspend();
            }

先暂停，然后通过winddebug看一下thread 的状态。。。。




	0:011> .loadby sos clr
0:011> !threads
ThreadCount:      3
UnstartedThread:  0
BackgroundThread: 1   后台线程
PendingThread:    0
DeadThread:       0
Hosted Runtime:   no
                                                                         Lock  
       ID OSID ThreadOBJ    State GC Mode     GC Alloc Context  Domain   Count Apt Exception
   0    1  d20 00ead478     26020 Preemptive  02BFB8B4:00000000 00ea74b0 0     STA 
   5    2  760 00ebc938     2b220 Preemptive  00000000:00000000 00ea74b0 0     MTA (Finalizer) 
  10    3  2b8 00f2ea88   202b020 Preemptive  02BEAB60:00000000 00ea74b0 0     MTA 


  点击2b8,深入!clrstack 可以看到线程的调用堆栈

  然后点击线程对应的state 会出现下面的代码 来查看当前线程的状态
  0:017> !ThreadState ab024
    User Suspend Pending
    Legal to Join  可以合法的join
    CLR Owns
    CoInitialized
    In Multi Threaded Apartment
    Fully initialized
    Sync Suspended   同步暂停



3.Resume演示 用来恢复suspend的暂停功能。。。


if(thread.ThreadState==ThreadState.Suspended)
{
            thread.Resume();
}


4. Interrupt 演示  用来中断处于WaitSleepJoin状态的线程。。。。


while(true){
  continue.... 类似于while中的continue效果   这是一个特性呢
}

当你调用interrupt的时候，会抛出一个interrupt的异常。。。。 然后继续while虚幻
就有一个什么样的效果呢? 执行一次interrupt,抛出异常,然后继续执行while循环.所以间隔最多两倍暂停时间,

thread = new Thread(new ThreadStart(() => {
                while (true)
                {
                    try
                    {
                        //定时的效果(结合一个线程和Thread.Sleep)
                        Thread.Sleep(1000);
                        textBox1.Invoke(new Action(() =>
                        {
                            textBox1.AppendText(string.Format("{0},", index++));
                        }));
                    }
                    catch (Exception ex)
                    {

                        MessageBox.Show(string.Format("{0} ,{1}", ex.Message, index++)); 
						如果catch中也Index++的话此时texbox中就会,丢失一个数字.  1.2.3.5.6.7
                    }
                    finally
                    {
                        ////定时的效果(结合一个线程和Thread.Sleep)
                        //Thread.Sleep(1000);
                    }
                }
            }));
            thread.Start();
	



5. Abort演示 通过抛出异常的方式销毁一个线程。。。。



while(true){
  break.... 类似于while中的break效果   这是一个特性呢
}

Interrupt 和 Abort做对比。。。

6. Join演示  这是一个特性呢

task.wait();

Console.WriteLine("主线程开始执行");
            Thread thread = new Thread(new ThreadStart(() =>
            {
                Console.WriteLine("子线程正在执行");
                Thread.Sleep(2000);
                Console.WriteLine("子线程完成");
            }));
            thread.Start();
            thread.Join();//调用线程等待子线程执行完成才执行,[在此处等待子线程执行完成],也就是阻塞主线程.
            Console.WriteLine("主线程继续执行");
            Thread.Sleep(1000);
            Console.WriteLine("主线程执行完成");
            Console.Read();


当线程处于sleep时,通过windb可以查看thread的状态, 为Interruptable 可中断的,也就是所此时可以调用interrupt方法,来中断
	 0:007> !ThreadState 202b020
    Legal to Join
    CLR Owns
    CoInitialized
    In Multi Threaded Apartment
    Fully initialized
    Interruptible  可中断的


	结合windg来查看,不同的方法后,thread的状态.
	windg还可以做一些更高级的操作,比如死锁,cpu飚高.内存飚高等




	0.clr层次的线程表示,Thread,thread的实例方法,thread的属性(id,threadstate等)
1.管理thread生命周期的实例方法Start,supend,resume,interrupt,abort
1.start方法,做到一个定时效果
2.supend方法, 逻辑严谨性,WaitSleepJoin的理解,可以查看暂停后thread的状态,thread的调用堆栈
3.Resume方法,恢复暂停
4.interrupt方法, 抛出异常的方式来中断WaitSleepJoin状态的线程, 类似什么样的效果也算是一个特性,实际过程如何走? 如何体现?缺失数字
5.abort方法,抛出异常的方式销毁线程.类似什么样的效果也算是一个特性.
6.Join方法的,正确理解和类似功能的举例
7.windg的使用.
8.为啥他怎么那么有脉络呢? 那么清晰呢? 基础问什么这么扎实? 理解的那么透呢?

问题: winbg的使用上? 没用过? 为什么不是挖空心思去搞明白呢?




	理解的标准:理解了就不难,关键怎样算理解了? 如何去理解呢? 这样理解的程度好不? 看着整体逻辑图,清清楚楚知道过程细节?
掌握的方法:有逻辑的分析,有逻辑的理解.
掌握的标准:是否心中有概念?什么是心中有概念? 前因后果,有逻辑的推演整个过程.
掌握的技巧: 1.不要太关注,难或易,不然就陷入被动了,任何事都要主动.(想到任何事的相应的主动状态.)
           2.遇到新知识，大量不懂的概念？怎么办？ =》存在浏览式，完成任务？为什么呢？不懂的心理 驱使快速完成来安慰自己。
		   3.遇到理解卡壳，怎么办？
		   4.遇到不知所措，怎么办？
		   5.关注负面的东西,着眼于美好的东西.
是否复习：