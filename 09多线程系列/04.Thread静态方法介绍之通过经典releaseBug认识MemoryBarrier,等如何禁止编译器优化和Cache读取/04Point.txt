所有的都要记录下来. 边学边记. 抛弃深渊. 状态要预热呀. 还是要有激情的. 关注点要正确的. 体现各种形式上的"主动" , 用脑子学习思考.



4.Thread静态方法介绍之通过经典releaseBug认识MemoryBarrier,VolatileRead,Write如何禁止编译器优化和Cache读取

禁止编译器优化和Cache读取  如何理解?

一：thread中一些静态方法  【内存栅栏】 啥意思? 


1. MemoryBarrier

2. VolatileRead/Write 易变的读\写


这些方法到底有什么用处。。。。

在实际项目中，我们都喜欢用Release版本，而不是Debug。。。。 为什么? release版本性能高

因为Release中做了一些代码和缓存的优化。。。 比如说将一些数据从memory中读取到cpu高速缓存中。  cpu高速缓存 就性能非常高了,远高于memory 也就是cpu的一级缓存

代码和缓存的优化 有哪些呢? 有弊端吗?

正常的字段读取，都是在内存中的， realease优化，会把数据读取到cpu cache中。


演示下  为什么要演示呢?  如何演示呢?
二：release和debug到底性能差异有多大。。。

冒泡排序 O(N)2   1w * 1w = 1亿 对计算机的计算速度有个考验的.

从结果中可以看到，大概有5倍的差距。。。

有代码学习时,先认真,抓重点,过一遍,心中有个脉络,然后在动手.

    //先找文件路径,在读取,在转化成int,最后tolist. 然后循环5次. web和非web的路径是不一样的.
    //Select 是干嘛用? 当然不是现象中select
    //IEnumerable, List,ToList(),Select() 有了新的认识.
    var path = Environment.CurrentDirectory + "//1.txt";
    var list = System.IO.File.ReadAllLines(path).Select(i => Convert.ToInt32(i)).ToList();
    for (int i = 0; i < 5; i++) //为什么要循环5次呢
    {
        var watch = Stopwatch.StartNew();
        BubbleSort(list);
        watch.Stop();
        Console.WriteLine(watch.ElapsedMilliseconds);
    }
    Console.Read();



	原版
	  class Program
    {
        static void Main(string[] args)
        {
            var path = Environment.CurrentDirectory + "//1.txt";

            var list = System.IO.File.ReadAllLines(path).Select(i => Convert.ToInt32(i)).ToList();

            for (int i = 0; i < 5; i++)
            {
                var watch = Stopwatch.StartNew();

                var mylist = BubbleSort(list);

                watch.Stop();

                Console.WriteLine(watch.Elapsed);
            }

            Console.Read();
        }

        //冒泡排序算法
        static List<int> BubbleSort(List<int> list)
        {
            int temp;
            //第一层循环： 表明要比较的次数，比如list.count个数，肯定要比较count-1次
            for (int i = 0; i < list.Count - 1; i++)
            {
                //list.count-1：取数据最后一个数下标，
                //j>i: 从后往前的的下标一定大于从前往后的下标，否则就超越了。
                for (int j = list.Count - 1; j > i; j--)
                {
                    //如果前面一个数大于后面一个数则交换
                    if (list[j - 1] > list[j])
                    {
                        temp = list[j - 1];
                        list[j - 1] = list[j];
                        list[j] = temp;
                    }
                }
            }
            return list;
        }
    }


上面是一个引子?

由此可见我们要使用Realease版本，但是
在任何时候，不见得release都是好的。。有可能会给你引入一些bug。。。 什么样的bug呢



        static void Main(string[] args)
        {
            var isStop = false;

            var t = new Thread(() =>
            {
                var isSuccess = false;

                while (!isStop)
                {
                    isSuccess = !isSuccess;
                }
            });

            t.Start();

            Thread.Sleep(1000);
            isStop = true;
            t.Join();

            Console.WriteLine("主线程执行结束！");
            Console.ReadLine();
        }


上面这段代码在release环境下出现问题了。。。主线程不能执行结束。。。。


从代码中可以发现，有两个线程在共同一个isStop变量。。。 为什么没发现呢?

两个线程都会把isStop加载到各自的cpu cache中. 也就是说本来的共享变量,给优化成程序集内的变量
也就是t这个线程会将isStop加载到Cpu Cache中。。。 【release大胆的优化】  =>讲什么,吸收什么? 不思考呀.
然后t线程读取时，只读取cpu cache中的值，主线程更新的最新的值感受不到。永远是false。死循环了。


除了问题要解决呀.
两种方法解决：

1. 不要让多个线程去操作 一个共享变量，否则容易出问题。。。。

2. 如果一定要这么做(以性能为代价)，那就需要使用本节课所讲到的内容。。。
   Thread.MemoryBarrier 方法 ()
   按如下方式同步内存访问：执行当前线程的处理器在对指令重新排序时，不能采用先执行 MemoryBarrier 调用之后的内存存取，再执行 MemoryBarrier 调用之前的内存存取的方式=>不好理解,就不理解了吗? 该怎么办?

   如何理解内存访问?同步内存访问? 内存存取?
   Thread.VolatileRead()读取字段值。 无论处理器的数目或处理器缓存的状态如何，该值都是由计算机的任何处理器写入的最新值。
   如何理解 读取字段值? 如何理解处理器缓存?如何理解由计算机的任何处理器写入的最新值,也就是写入memory的值.?

   Thread.VolatileWrite()立即向字段写入一个值，以使该值对计算机中的所有处理器都可见。
   如何理解向字段写入一个值?  如何理解以使该值对计算机中的所有处理器都可见? 如何理解都可见?
   
   MemoryBarrier
   VolatileRead/Write

 两个方法的作用: 不要进行cpu缓存，每次读取数据都是从memrory中读取数据。。。 =>也就是说禁止cpu优化?

MemoryBarrier => 在此方法之前的内存写入都要及时从cpu cache中更新到 memory。。。

                 在此方法之后的内存读取都要从memory中读取，而不是cpu cache。。。



				  static void Main(string[] args)
        {
            var isStop = false;

            var t = new Thread(() =>
            {
                var isSuccess = false;

                while (!isStop)
                {
				    Thread.MemoryBarrier();
                    isSuccess = !isSuccess;
                }
            });

            t.Start();

            Thread.Sleep(1000);
            isStop = true;
            t.Join();

            Console.WriteLine("主线程执行结束！");
            Console.ReadLine();
        }



        static void Main(string[] args)
        {
            var isStop = 0;

            var t = new Thread(() =>
            {
                var isSuccess = false;

                while (isStop == 0)
                {
                    Thread.VolatileRead(ref isStop);此方法没有object类型的参数. 怎么办? 就卡壳了? 不能的?
                    isSuccess = !isSuccess;
                }
            });

            t.Start();

            Thread.Sleep(1000);
            isStop = 1;
            t.Join();

            Console.WriteLine("主线程执行结束！");
            Console.ReadLine();
        }

		Thread.yield() 导致调用线程执行准备好在当前处理器上运行的另一个线程。 由操作系统选择要执行的线程。
		放弃当前的时间片,时间片结束后下次调用, 在自旋锁中和底层中用的多



		1.程序Release 有什么优势,如何体现,有什么bug,为什么会出现,如何解决?
2.编译器优化,编译器cache读取,Realease做了什么优化,cpu cache,内存存取,



理解的标准:理解了就不难,关键怎样算理解了? 如何去理解呢? 这样理解的程度好不? 看着整体逻辑图,清清楚楚知道过程细节?
掌握的方法:有逻辑的分析,有逻辑的理解.
掌握的标准:是否心中有概念?什么是心中有概念? 前因后果,有逻辑的推演整个过程.
掌握的技巧: 1.不要太关注,难或易,不然就陷入被动了,任何事都要主动.(想到任何事的相应的主动状态.)
           2.遇到新知识，大量不懂的概念？怎么办？ =》存在浏览式，完成任务？为什么呢？不懂的心理 驱使快速完成来安慰自己。
		   3.遇到理解卡壳，怎么办？
		   4.遇到不知所措，怎么办？
		   5.遇到错误了,该怎么办?
		   5.关注负面的东西,着眼于美好的东西.
		   6.不关注坏习惯,而是养成好习惯,关注点要正确?
是否复习：