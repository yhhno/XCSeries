一：memcache的集群

1. memcahce本质上只是一个应用程序，一个进程。如何理解? 前因后果是什么?

2. 它不具备redis/mongodb 的 cluster操作。

   如果服务器不支持集群，服务器端无法做到。。。。这时候我们只能在客户端动手。



二：在客户端上进行的集群操作

1. 求模

   3个memcahce就是 % 3 

     key % 3  =0   => memcached 1

     key % 3  =1   => memcached 2
    
     key % 3  =2   => memcached 3


求模操作是一个非常简单的操作。

  既然简单，必然有它的代价。

《1》 如果我增加一台memcache服务器。

      这时候我们的算法就改变了。 

      key % 4 =0  => 1
      ....
      key % 4 =3  => 4


eg：key1= 32
    key2=19
    key3=7
    key4=15

如果只有3台memcached的情况下：

    32 % 3= 2   => memcached3
    19 % 3= 1   => memcached 2
     7 % 3= 1   => memcached 2
    15 % 3= 0   => memcached 1

如果是4台的情况下，memcache的分配情况：

    32 % 4 = 0   => memcached 1
    19 % 4 = 3   => memcached 4
     7 % 4=  3   => memcached 4
    15 % 4=  3    => memcached 4


从上面可以看到，由于新增一台服务器之后，导致求模算法变更，从而导致memcache 混乱现象。。。

原来所有的key全部失效。

《2》 如果我们当掉了一台memcache服务器 或者 由于成本的关系，我们去掉了一台memcache服务器。
      
      同样也会导致 memcache'中的绝大多数key的失效，导致内存浪费。


二：一致性哈希

1. 思想就是把所有的memcache放到一个圆上，圆是int.maxvalue= 21个亿点组成。

2. 我们的memcache是由 ip + port 组成。那么 ip+port 就可以将他hash成一个int数字。

   ip+port= 192.168.161.131:11211 => 9876

            192.168.161.131:11212 => 912344


3. 下面的话，就是我们的数据

    key1= 32   => hash =>  21122
    
    key2= 19   => hash => 2342434

    ....
   
    ....


4. 根据这个圆周，让key顺时针跑，找到自己最近的memcache节点。。。

   然后将该key存放到此memcache上面。

   从圆周图中可以看到，我们的

     key1 和 key3   => memcache3

     key4           => memcache1

     key2           => memcache2


5.  一致性哈希算法中如何面对“增加”或者“删除”服务器的情况。


    从图中可以看到，如果memcache1挂掉了，只会影响key4，并不会影响其他的key。

     这样的话，我们就把损失降低了到最少。
    
    增加和减少只会影响一部分的key，并不会影响到全局。
     
    



0.非常简单,必有代价?  一个极端的话,必有代价?
1.memcahced就是一个exe,所有数据都是放在exe的内存中?  如何理解exe的内存?
2.如何支持集群? 怎样才算是支持集群? 在服务端如何做? 在客户端如何做?  需要集群的前因后果?
3.集群的实现方式有几种? 什么是求模?
4.求模的不足? 添加或者减少服务器,影响绝大部分key? 不满足需要? 新方案? 一致性哈希的出现? 一致性哈希的情况下,增加和减少服务器,只会影响到一部分key?
5.