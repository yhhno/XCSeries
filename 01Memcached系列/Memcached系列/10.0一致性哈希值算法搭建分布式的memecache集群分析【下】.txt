
一：一致性hash中的极端情况。

1. 当遇到hash不顺畅的时候，有可能很多的key都在存在某一个memcache上面。

2. 或者memcache节点的hash值都在一块。那么这时候会导致某一个  memcache压力过大。


二：寻找解决办法

1. vitualnode概念。


   一个实节点 	=> 多个虚节点。   1 => 5 虚结点  


   3个memcache  => 15个虚结点。     


2. eg:   

   ip： 192.168.10.1  

                     => 192.168.10.1#1     => hash  => int
                     => 192.168.10.1#2	   ...
                     => 192.168.10.1#3 
                         ...
        
        192.168.10.2


                     => 192.168.10.2#1     => hash  => int
                     => 192.168.10.2#2     ...
                     => 192.168.10.2#3
                         ...

        192.168.10.3


                     => 192.168.10.3#1     => hash  => int
                     => 192.168.10.3#2     ...
                     => 192.168.10.3#3
                         ...

这个我们就有15个int，存放在这个圆周上。

通过对memcache2节点解读：

我们发现，现在有了虚节点之后，圆周上就会有一段不连续的节点归属于memcache2
这样我们就风险平摊，解决了 原始一致性hash 中的极端情况。


二：我们用简单的代码来实现一些如何用一致性hash的算法。

1. 





1.一致性哈希是什么? 原理是什么? 有什么不足?
2. 什么是hash不舒畅? 如何解决呢?
3.模拟一致性哈希? 模拟过程 就是抽象过程, 用抽象的语言表示真实的情况?  需要加强? 语言特性都是对应不同的需求的? 要熟练运用? 键值对,不一定都是以key为主,也可以以value为主? 思维的障? 破除?