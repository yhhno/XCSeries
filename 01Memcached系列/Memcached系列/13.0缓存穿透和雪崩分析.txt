
一：缓存的两种现象

1. 缓存的雪崩

   我们要从现象说起。

   从零开始的时候，我们直接由一个DB，随着流量的大量涌入，我们的db逐渐扛不住
   了，这个时候，我们在DB上面增加了缓存，当大量流量过来的时候，我们的cache
   帮助db拦截了很多的流量。当然并没有万无一失，还是有少数的流量进入db。


   久而久之的话，我们的db对cache已经形成了惯性的依赖。从而导致db走上了不归路。 依赖越严重,问题越突出? 靠山山倒,靠人人跑?


《1》. 当cache挂掉之后，db自然就扛不住了。 


   一般来说，db在这种情况下，开启必然再挂。之后等缓存重建完成之后，才能重新正常
   运行。
    
   携程： 【在午夜十二点的时候，会启动脚本重新跑memcache，重建缓存】

           这样保证我们的memcache数据是比较新鲜的。

   这种情况的问题，我们建议使用 一致性哈希 来尽可能的消除影响。 

   双备份。【只要业务不受影响，钱不是问题】 20台memcache，有10台是备份。


《2》 缓存时间的不分散。
      
      也就是说大量的item的过期时间比较集中。大量的item差不多同时过期，导致瘫痪。
      
      这个解决方案我们一半尽量要求memcache的item中过期时间相对分散。 


二：缓存穿透的问题

1. 举例

   比方说上层有1000个请求，其中有100个请求进入了db。。。

这100个请求，有50个write操作。 还有50个就是缓存穿透。


比方说我有一篇文章，articleID，同时文章内容是保存到memcache中的。

如果说这篇文章删掉了，自然db和memcache中都是没有这条数据【缓存】的。

如果大量的访问这个articleID，也会对db造成巨大的压力。

2. 解决方案

   如果我们发现某一个articleID在db中没有找到，我们会在memcache中增加一个item缓存，这个缓存
的key就是articleID，value="",ok，下次当你再次访问这个article，我们内存就返回“”回去。



1.运用的时候,总是有些特殊和极端的情况? 要考虑到?应对对策?
2.null的预防.