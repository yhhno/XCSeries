所说,全部记录下来.没追求的话,都只是完成. 必须有效率.
有逻辑的全过程:现在问题是我和他学,但最终是我要用,如果用我该如何运用的角度.来学习? 可以不.不要变成为了学而学?
同样不是为了模仿，而是学习技巧，最好自己也能总结出技巧来。
目前仅仅是模仿,不仅仅是全盘接受,做到心中有概念,它也是有错的,翻译有问题?
最终还是要自己来做,来试, 要慢慢从被动吸收,到主动吸收转换.

效率要提升起来,不然时间太慢了. 找找哪里费时间了.
记录(有时还会重新看)+看手机,看新闻,其实看的时候很投入可以节省时间.

你看着深渊，深渊也看着你。 哈哈。


0.心中有数(整体上的前因后果,大体的脉络,或者概念上的认识),掌握主动,
	   1.有逻辑
	   2.有技巧=>范围,目标,关注点,关键点,注意力集中,排除干扰因素,拒绝深渊.
	   3.有效率=> 过程中,针对不断出现的情况,运用上面的方式,不断破击,不断改进.
	   4.其他的都是反面案例,不可取.=>目前不是时刻都处在正确的状态,所以要试试调整. =>直至成为习惯

索引的介绍和创建结束后,我们来学习如何管理?

那管理是如何管理?
一：索引的管理 【manage indexes】  CURD操作。。
管理包含哪些呢? 索引保存在哪里? sharing是怎样的情况? 
官方文档在哪里? 此时需要整体上心里有数,每步有逻辑的分析?找不到怎么办? 换个思路? 百度嘛 哈哈
《1》 Views Indexes   查看索引?如何查看? 在哪里操作呢?gui 或者cmd? 
	 确定范围,确定目标
      1. 查看collections中的所有索引。。。

      2. 查看db中的所有索引。。。 foreach  抓住关键点,
	  如何查找db上的索引呢? db.有没直接方法, 没有,那从collection上着手.为什么collection上着手呢? 索引存在collection上.


pintjson( db.getCollectionNames())

var dblist=db.getCollectionNames(); 获得collecting集合,然后遍历执行.

dblist.forEach(function(dbname){
  print(dbname);
  var indexlist=db[dbname].getIndexes();
  printjson(indexlist);
});

	  db.getCollectionNames().forEach(function(collection) {
   indexes = db[collection].getIndexes();
   print("Indexes for " + collection + ":");
   printjson(indexes);
});



《2》 Remove Indexes  主键所以不能删
删除指定索引?
db.collection.dropIndex({"age":-1});=>拒绝深渊后,发现一个小疑问,为啥指定-1呢? 然后抓住不放深究,发现正序和倒叙的索引是不一样的呢? 在深入有什么呢? 目前不知道呢?  有待继续深挖.  哈哈
db.person.createIndex({"age":-1}); 指定的是key+1/-1,或者仅仅索引名字.  索引默认都是正序吗?
db.person.createIndex({"age":-1}); 我们可以思考呀, 删除索引,给名字就可以确定了, 但给个key能确定吗? 不能哦


			db.collection.dropIndex() 无参数 删除全部索引?  删除单个,那有没删除多个?全部呢? 

                 我们指定删除的字段。。。
				 删除稀疏索引时,他也是直接用文档,没思考呢? 哈哈  看他如何纠正,,最后他也没搞清楚 哈哈

    关键点:  You can also use the db.collection.dropIndexes() to remove all indexes, except for the _id index from a collection. 

《3》 Modify an Index 也就是说自己手工删除和重建新的.  自己总结关键


     修改相当于  delete => add
       
       rebuild   【碎片清理】

       

《4》 Rebuild Indexes  重建索引是怎样的一个流程呢? 删除后再重建,,有利于碎片整理,代价非常昂贵 因为数据多,索引多.
Mongodb会在一定周期内压缩compact索引.但如果collection size重大变化,或者索引占用太大的磁盘空间. 


      replica sets  主从备份。。。 如果primary关掉了，，从顶上去。。。
	  重建索引操作只能作用于一个实例,所以不会传导到从实例.




	  0.索引的管理
1.索引的查看  db如何看?
2.删除索引
3.修改索引,鸡肋
4.重建索引.
5.总结了下 模型



评价: 理解了蛮简单的. 为啥容易理解了呢,剔除了深渊啊 哈哈
掌握的方法:有逻辑的分析,有逻辑的理解.
掌握的标准:是否心中有概念?什么是心中有概念? 前因后果,有逻辑的推演整个过程.
掌握的技巧: 1.不要太关注,难或易,不然就陷入被动了,任何事都要主动.(想到任何事的相应的主动状态.)
           2.遇到新知识，大量不懂的概念？怎么办？ =》存在浏览式，完成任务？为什么呢？不懂的心理 驱使快速完成来安慰自己。
		   3.遇到理解卡壳，怎么办？
		   4.遇到不知所措，怎么办？
		   5.关注负面的东西,着眼于美好的东西.
是否复习：
