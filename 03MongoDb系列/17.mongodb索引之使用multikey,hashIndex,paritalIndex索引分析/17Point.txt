所说,全部记录下来.没追求的话,都只是完成. 必须有效率.
有逻辑的全过程:现在问题是我和他学,但最终是我要用,如果用我该如何运用的角度.来学习? 可以不.不要变成为了学而学?
同样不是为了模仿，而是学习技巧，最好自己也能总结出技巧来。
目前仅仅是模仿,不仅仅是全盘接受,做到心中有概念,它也是有错的,翻译有问题?
最终还是要自己来做,来试, 要慢慢从被动吸收,到主动吸收转换.

效率要提升起来,不然时间太慢了. 找找哪里费时间了.
记录(有时还会重新看)+看手机,看新闻,其实看的时候很投入可以节省时间.


什么样的效率最高呢？轻松愉快？ 那怎么样轻松愉快呢？ 仅仅是学习，没有任何评价性情绪？
类似，搞什么事，这样的状态都是最高效的，
相反，低效的做法，总是把太难了，不清楚的焦虑，不会的发愁等各种情绪带进了学习的过程。
也就是太注意负面了。负面的东西笼罩了自己，拔不出来，解脱不了。 那还谈什么继续学习呢，
基本的学习能力都没有了，更别谈高效了，一开始就打死了。


single fields indexes

conpound fileds indexes


一：多键值索引  是什么？ 如何查询呢？

其实所谓的多键值索引就是在array上面建立一个索引，mongodb会将array的每一个数字进行排序【索引】。。。。


比较奇葩的索引的方式， mysql，sqlserver中都是不存在。。


1. 创建方式

db.coll.createIndex( { <field>: < 1 or -1 > } )  single fields 创建方式是一样的。


db.plane.createIndex({"ratings":1})

db.plane.find()

db.plane.find({"ratings":[5,9]}).explain()  哈哈 它找不到 executestats这个参数哦。逻辑推理也不是很强嘛， 知识经验多了嘛。

心中是否有概念？
二:Hash索引 如何创建？创建流程？查找流程？

提到hash索引，mysql中也是有hash的。。。

相当于C#/Java Map/HashSet/HashTable

将字段的之通过hash函数变成一个int类型的一个数字。。。 %int.MaxValue
最终放到数组中。。。

hashindex支持sharing  如何理解？
1. 创建方式：

db.collection.createIndex( { _id: "hashed" } )

sharded cluster 我们是支持 hashed index

同时大家要知道，hash就是为了定值查找。。。


hash函数很重要？ 整个hash过程是否清晰？
Hashing Function     O(1)定制查找很牛逼了，很有优势   如果function比较懒，那么就容易造成 冲突 和 挂链。。。



db.person.find({"age":8}).sort({"age":1}).explain("executionStats")

/* 1 */
{
    "queryPlanner" : {
        "plannerVersion" : 1,
        "namespace" : "ctrip.plane",
        "indexFilterSet" : false,
        "parsedQuery" : {
            "item" : {
                "$eq" : "eee"
            }
        },
        "winningPlan" : {
            "stage" : "FETCH",
            "filter" : {
                "item" : {
                    "$eq" : "eee"
                }
            },
            "inputStage" : {
                "stage" : "IXSCAN",
                "keyPattern" : {
                    "item" : "hashed"
                },
                "indexName" : "item_hashed",
                "isMultiKey" : false,
                "isUnique" : false,
                "isSparse" : false,
                "isPartial" : false,
                "indexVersion" : 1,
                "direction" : "forward",
                "indexBounds" : {
                    "item" : [ 
                        "[6782435454978459636, 6782435454978459636]"
                    ]
                }
            }
        },
        "rejectedPlans" : []
    },
    "executionStats" : {
        "executionSuccess" : true,
        "nReturned" : 1,
        "executionTimeMillis" : 0,
        "totalKeysExamined" : 1,
        "totalDocsExamined" : 1,
        "executionStages" : {
            "stage" : "FETCH",
            "filter" : {
                "item" : {
                    "$eq" : "eee"
                }
            },
            "nReturned" : 1,
            "executionTimeMillisEstimate" : 0,
            "works" : 2,
            "advanced" : 1,
            "needTime" : 0,
            "needYield" : 0,
            "saveState" : 0,
            "restoreState" : 0,
            "isEOF" : 1,
            "invalidates" : 0,
            "docsExamined" : 1,
            "alreadyHasObj" : 0,
            "inputStage" : {
                "stage" : "IXSCAN",
                "nReturned" : 1,
                "executionTimeMillisEstimate" : 0,
                "works" : 2,
                "advanced" : 1,
                "needTime" : 0,
                "needYield" : 0,
                "saveState" : 0,
                "restoreState" : 0,
                "isEOF" : 1,
                "invalidates" : 0,
                "keyPattern" : {
                    "item" : "hashed"
                },
                "indexName" : "item_hashed",
                "isMultiKey" : false,
                "isUnique" : false,
                "isSparse" : false,
                "isPartial" : false,
                "indexVersion" : 1,
                "direction" : "forward",
                "indexBounds" : {
                    "item" : [ 
                        "[6782435454978459636, 6782435454978459636]"
                    ]
                },
                "keysExamined" : 1,
                "dupsTested" : 0,
                "dupsDropped" : 0,
                "seenInvalidated" : 0
            }
        }
    },
    "serverInfo" : {
        "host" : "localhost.localdomain",
        "port" : 27017,
        "version" : "3.2.8",
        "gitVersion" : "ed70e33130c977bda0024c125b56d159573dbaf0"
    },
    "ok" : 1.0
}



3: partial indexes  【New in version 3.2】  猜测下，部分索引，只建立局部数据的索引。

局部索引。。 mysql和sqlserver 都是没有的。。。

如果你是一个basic indexes。。。 你检索的索引是针对所有的文档。。。。

既然有所有，那么就有相对的词： 局部。。。 有一百个数据，针对50个建立索引，其余的50就是heap    这么奇特应该有应用场景
																如何理解堆？ 查找要逐条比对。
Partial indexes only index the documents in a collection that meet a specified filter expression. 

Create a Partial Index

db.restaurants.createIndex(
   { cuisine: 1, name: 1 },
   { partialFilterExpression: { rating: { $gt: 5 } } }
)

db.restaurants.createIndex(
   { cuisine: 1, name: 1 },
   { partialFilterExpression: { rating: { $gt: 5 } } }
)

db.person.createIndex(
   { "age": 1, },
   { partialFilterExpression: { "age": { $gt: 600 } } }
)


db.person.find({"age":820}).explain("executionStats")

可以用到更少的存储空间，多少的性能开销。。。。。



2.多键值索引。 给array中的数据建立索引
3.hash索引，hash函数，hash过程，查找过程，hash函数，hash 的强大
4.局部索引，特定情境的处理。



评价: 理解了蛮简单的.
掌握的方法:有逻辑的分析,有逻辑的理解.
掌握的标准:是否心中有概念?什么是心中有概念? 前因后果,有逻辑的推演整个过程.
掌握的技巧: 1.不要太关注,难或易,不然就陷入被动了,任何事都要主动.(想到任何事的相应的主动状态.)
           2.遇到新知识，大量不懂的概念？怎么办？ =》存在浏览式，完成任务？为什么呢？不懂的心理 驱使快速完成来安慰自己。
		   3.遇到理解卡壳，怎么办？
		   4.遇到不知所措，怎么办？
是否复习：