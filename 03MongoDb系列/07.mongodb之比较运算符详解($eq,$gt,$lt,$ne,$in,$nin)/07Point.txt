所说,全部记录下来.没追求的话,都只是完成. 必须有效率.
有逻辑的全过程:现在问题是我和他学,但最终是我要用,如果用我该如何运用的角度.来学习? 可以不.不要变成为了学而学?


现在看是具体的运算符的学习,最终来使用.
现在看是具体的运算符通过学习如何来使用.?
一：mongodb具体运算符。。。



他会怎样看官方文档,我会怎样看官方文档
   在介绍CURD之前，我们一定要知道哪些原子性的运算符。。。 为啥一定要先知道原子性的运算符?,编程的基础? 什么原子性?

  原子性运算符,做个评价  简单运算符咯.  归纳
1.比较运算符。。。   映射着编程中的什么呢?

  $eq    = "="
  $gt   (greater than )  >
  $gte                   >=  (equal)  看下就能猜到.
  $lt   (less than)      <
  $lte                   <=  (equal)
  $ne   (not equal)      !=
  $in                    in  阅读时,犯了想当然的错误.这个不仅是学习时的错误,也是个旧知识遗留错误,对比以前错误,有什么不一样.
                                                               以前的是数据结构的认识.现在是比较运算符.
															   映射到编程中的地方是不一样的吧
  $nin  (not in)         !in


2. eq:   因为value是可以存放20多种数据结构,so.判断相等就不仅仅是简单的value,自己能想到吗?

    { <field>: { $eq: <value> } }

   <1> 简单类型
   <2> 复杂类型（document，array）

       document 是否等于 document  => 逐字段比较  【C# 匿名类型的类的判等,是逐字段比较】


//第一个：匹配简单类型（int，string）；
db.inventory.find({"qty":15});

//第二个：匹配复杂类型
db.inventory.find({"item":{
        "name" : "cd",
        "code" : "123"
    }});

//第三种：array的匹配   复合类型?

//db.inventory.find({"tags":{$eq:"A"}})  //相当于forech查找

此时是犯了仅仅浏览的错误.根本都没深究.认真看.
db.inventory.find({"tags":{$in:["A"]}});  //如果采用in的话，我们会更加的简洁。,此时理解有误



3. $gt/$gte  value为简单类型

{field: {$gt: value} } 语法结构

db.inventory.find( { qty: { $gte: 25 } } ).sort({"qty":-1})


4. $lt/$lte value为简单类型

Syntax: {field: {$lt: value} }

db.inventory.find( { qty: { $lte: 20 } } ).sort({"qty":-1})


5. $ne  value为简单类型

Syntax: {field: {$ne: value} }

db.inventory.find( { qty: { $ne: 20 } } ).sort({"qty":-1})

6. $in

其实和sql中的in操作是一样的。。。where id in (1,2,3,4,5)


7: $nin
//db.inventory.update({ tags: { $in:["A","E"]} },{$set: { qty:100000000 }}) 此时的in其实是个or的效果.
db.inventory.find( { qty: { $nin: [ 5, 20 ] } } ).sort({"qty":-1});



评价:简单与否  很简单(但很重要,存在认识错误的可能.)
可以用在哪里: 理解了基本的逻辑运算符,,,是编程的基础.,不然不好编,为什么不好编? 不知道怎么去编?
编程的基础包括什么呢?
编程包括什么呢?
编程是个什么样的整体概念呢?
以前侧重学习的是数据结构的介绍和特性和应用.  仅仅编程的一小部分.
so。编程的整体概念是什么样子的呢

好像到目前为止,都只是关注如何做好某一件局部的事,有点头疼医头,脚痛医脚的感觉, 缺乏全局整体考虑.

0.还保留了一个问题,认识的局面性, 之前只是编程的一部分,以为是全部,
1.暴露了一个想当然的错误.
2,基本的操作符都认识错误, 基本的都搞错了,类似,元素错了,元素关系能对吗? 流程能对吗? 

 或者仅仅是修正以前错误的做法,错误的思维,错误的技巧. 当然积累和经验很重要
 但我们要的是出现问题,解决问题的能力? 此时不仅仅是经验，经验只是个基础。 这有包括些什么呢?
 是不是和算法分析有点像呢？



截至目前的全过程,还仅仅是局部的全过程呢
   持续的
在正确的范围内
用质量管理学
从局部到整体的
有效率的
思考过程中使用:
[全过程(有逻辑,前因后果),有血有肉的认识,拒绝浏览式的,有猜想(自己思考过),用为什么没想到来纠正,最后灵活地运用]
搞懂,搞清,搞透后,和其他知识串起来,毕竟不是孤零零的存在.

必须: 1.最重要的是为了用而学
      2.任何一个新东西,旧东西,会的,不会的,都必须用有逻辑的分析,去理解,去运用,最后成为习惯.本能
贯穿:what?how?why? 为什么没想到? 做个有血有肉的评价呗，习以为常的太多了,抛弃旧的,按照新的去想去做,
思维:拒绝填鸭式,拒绝片面的,必须有血有肉, 有效率(包括理解正确,不存在想当然,和抓住有效的主干和尽可能少的时间和尽可能深刻)
疑问:为啥没激情,没渴望,没迫切呢? 做到一心干一件事(就是为了能专心深刻无误的干完.)
问题:1.理解新东西 2.理解需求 3.为需求建立一个数学模型
积累:常用套路的总结,也就是什么问题,用什么样的手段.
手段:每个观点,每个技巧,不管是新的旧的,都要记录下来,保证一次学习的的最大效率,也为后面的复习提供最全的的信息,并学习他是如何介绍的?
