一：分布式事务

ACID[单机版的]

   将多个节点上的操作纳入一个执行单元里。【执行单元 要么一起成功，要么一起失败】

CAP理论:

Consistency(一致性)	        数据最终都能够落地 [立即落地(强一致性) 还是 某些时间再落地（最终一致性）]
Availability(可用性)            理想的响应性能 【1s？？10s?? 1min ? 1hour???】
Partition tolerance(分区容错性) 某些网络阻塞或机器挂掉不影响集群。


二：分布式事务实现方式 (CAP理论)

1. 2PC提交  [多个节点的CURD的操作]

将一个分布式消息 拆解成 多个单节点上的CURD，通过事务协调器来进行协调。

【准备阶段，执行阶段】，每个阶段都要想事务协调者汇报。 [性能低劣]

2PC性能比较低，完全依赖于 ‘事务协调器’， 但是可以保证强一致性。。。  【性能低劣】 + 【强一致性】

三：使用队列进行 ‘分布式事务处理’

1. ‘交钱’ 和 ‘拿饭’ 是两个动作。

   为了增加处理量，只需要给交钱的客户一个小票，然后在出货处等待叫号， 
   
  【小票来关联】

只要你有这个小票，就一定能拿到‘饭’的。。。   


【性能优越】+【最终一致性(20min,30min)】


四：WCF的分布式有DTC参与协调，它就是一个事务协调器，相当于2PC中的 事务协调器

    分布式事务，CAP理论中，追求最终一致性。

五：使用WCF实现分布式事务

步骤：

1. 服务契约上需要指定一定需要会话的binding，不是的话，会抛出异常。  [ServiceContract(SessionMode = SessionMode.Required)]

2. 操作契约上一定要指定该操作可以作为事务流的一部分。[TransactionFlow(TransactionFlowOption.Allowed)]

3. 实现方法上需要指定该方法纳入事务TransactionScope事务范围  [OperationBehavior(TransactionScopeRequired = true)]

4. config中指定支持会话的binding，并开启事务流支持。

Distributed Transaction Coordinator   协调跨多个数据库、消息队列、文件系统等资源管理器的事务。如果停止此服务，这些事务将会失败。如果禁用此服务，显式依赖此服务的其他服务将无法启动。


电商项目：很难实现分布式事务。。。【超卖现象】

