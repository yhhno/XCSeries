情绪上怎么样? 小事情，搞的定，一步一步来，不要有过多的任务压在心头，与完事开头难的矛盾， 退缩是不存在额，没有在怕的。
我是来学学习能力的，学习方法论的，不仅仅是知识？ 不是学完就万事大吉了，
这个点没有评价好坏，未来的预期也没有评价好坏？ 缺乏xx观？
每个东西，都要深挖，不能只是了解它的作用，
每个新东西，旧东西， 其实都不难，调整好状态，跨出第一步，步步踏实，有啥难的，一多半都是自己吓自己。

问题1：学习了解一个东西时的细节：它是什么？ 由什么组成？如何运转的？ 达到清楚的认识的效果。
问题2：之前看到这这张图，这都是啥呀，看不懂，就不想看啊，要是勉强硬看，也是浏览下文字，原因：这种类型的东西，之前没有学过，也没有遇到过类似的，一下子看这个抽象的东西，看不懂，二，或者说，是不是之前只是了解使用，没有深入到源码原理呢？ 三又或者是，确实比较难，在第一步就放弃了，四又或者是本身就没有自信去做这件事，又或者这步只是应付时间，而不是真正的想去学习，
问题3：这个图是wcf整体的架构，那架构时什么呢？
问题4：激活和承载如何实现的呢？
问题3：即时窗口和监视窗口是啥，有啥用，编码和序列化（序列化实体为二进制，二进制反序列化为实体）
问题3：知道概念，还有知道如何实现的，
问题5：当看到一个东西支持什么的时候，应该怎么想？ 比如NetTcpBinding支持安全验证，
问题6； fiddler网络传输监控  学习使用工具


问题1：学习了解一个东西时的细节：它是什么？ 由什么组成？如何运转的？ 达到清楚的认识的效果。
大家好，这节课，我们就给大家说两张图，第一张图叫通信图，第二个叫体系结构图，为什么介绍这两张图呢？就是可能有些学员的话，学会3节课，还不知道wcf到底是个什么东西？或者说呢 wcf到底里面包含了哪些？以及呢，在这个通讯中到底是经历过哪些流程，那么这个的话呢，他没有一个清楚的认识，ok，这就是本节课给大家解决的两个问题，

第一个问题的话呢，我们来看下，这个体系结构图，网上down一份，

问题2：之前看到这这张图，这都是啥呀，看不懂，就不想看啊，要是勉强硬看，也是浏览下文字，原因：这种类型的东西，之前没有学过，也没有遇到过类似的，一下子看这个抽象的东西，看不懂，二，或者说，是不是之前只是了解使用，没有深入到源码原理呢？ 三又或者是，确实比较难，在第一步就放弃了，四又或者是本身就没有自信去做这件事，又或者这步只是应付时间，而不是真正的想去学习，
问题3：这个图是wcf整体的架构，那架构时什么呢？
首先的话，我们就发现，这个是wcf整体的一个架构，基本上涵盖了wcf大部分内容，
问题4：激活和承载如何实现的呢？
那么首先的话，我们来看下wcf的激活和承载，那么激活与承载的话，就是我们wcf可以承载在windows激活程序，以及exe，以及windows服务，com+，ok，我们目前是承载在哪里呢 是承载在exe里面， 对不对，当然你可以承载在windows服务，以及wpf，winform都是可以的，这是一个承载，，
然后呢，是消息的一个传递， 那么消息传递有ws安全通道， 以及支持互通的ws，然后的话有http通道，tcp通道，事务流（它支持事务模式）命名管道（相当于tcp程序的本机通信，）消息队列，ok，在通道里面的话 还有一个编码器，编码器是什么意思呢？就是说我们可以通过tcp的话它采用的是什么？ 也就是说。net程序和net程序我们经常才用的是tcp通信，tcp通信的话它底层采用的是二进制的一个传输的模式，然后的话呢，如果你是tcp的话呢，它采用的是文本的这种模式进行通讯，ok，还有一个mtom 是一个文本的一个优化算法， 这个就是wcf中消息传递的一个机制，
然后呢，有一个服务运行时，服务运行时相当于是在服务通道中，在各个行为中进行拦截，比如说呢，服务实例上，实例上的行为，也就是控制你这个实例可以是单例或者是多例，然后消息检查，就是对message进行检查，比如说我可以修改下message的消息头，消息体，以及的话呢事务，可以让它支持事务，支持什么样的事务，，并发行为，参数筛选那么参数筛选的话，就是说我这个方法里面的话，比如说getdata（int value）我可以通过一个行为，可以检测下这个value，可以把它，比如说大于100，我不要，小于0的，我也不要， 那么这个的话，就是参数筛选的一个功能， 这个呢，我会放到后面的课程，给大家去讲，现在的话，主要让大家明白，wcf有一个服务运行时的操作，它可以对函数的参数进行筛选，调度的话，比如现在我可能有两个方法，对不对，getdata和getdata2，这个时候，我是两个函数，那么两个函数的话，我调度行为的话，我可以让它去调度那个方法，都是可以的，通过这个服务运行时，各种behavior进行操作，那么当然的话，我们在这个config里面也发现了servicebehavior节点，相当于什么呢？相当于这个 你可以认为是实例行为，对元数据也可以进行操作，对服务debug 也是两种行为吧， 行为也是不包括全部的，，所以说这个config也是他的一部分内容，
协定，有数据协定，数据协定是干嘛的，对这个，我以前也给大家讲过，对一个xsd的一个操作，这个的话，消息协定是对传输message的一个协定，以及服务协定对服务的标识，策略和绑定 我们在后面的课程，会给大家讲这三个协定，怎么去影响wsdl，

这个就是wcf整体包含的一个内容，希望大家课后去好好理解下，


ok，我们在来看下第二张图，那么第二张图的话呢 是一个通讯图，ok，首先我么从client端看起，那么client端呢，我们可能会调一些函数，对吧，就是我会调用一些aciton，action是什么？ action就是client.GetData（），它相当于action，你调action之后呢，它相当于 传给了底层的代理，底层的代理在哪里呢？我们F12，那这个的话就是给我生成了一个代理类ServiceClient，那么它的底层是调用了channelFactory， 那channelfactory底层呢 就是一个IInputchannel和IOutputchannel，那么在底层的话就是一些，比如说如果你是http的话，它会调用这个httpwebrequest 或者tcp会调用其他一些函数，，ok为什么会有封装呢，封装的话，它中间会有一些，比如说什么呢 会有一些cache的一些模式在里面，，ok调用了代理，，然后是一个事务层，和service端的事务层进行对应，然后编码层，编码层是编码成二进制还是text，然后是一个安全事务，然后，当然这中间还有其他的一些层，我们就省略了，主要的一些层，我们标识下，然后到最后是一个传输层，传输层的话就是tcp和http，然后把这个message传过去，当然你可以理解成这种0101类型的数据，，传到server端，和transport进行对应，如果说你不对应的话，是接受不了的额，所以说层与层是对应的额，一层层的编码，一层层的解码，解码后，给了这个调度器，然后经过序列化，最终调用到了这个action，，也就是说经过序列话之后，调用了IService的实现类中的函数，getdata函数，相当于这是一个整个的流程，，ok看到这个整个流程，可能大家有点迷糊，，
ok那么我们来解决几个问题，

问题3：即时窗口和监视窗口是啥，有啥用，编码和序列化（序列化实体为二进制，二进制反序列化为实体）
问题3：知道概念，还有知道如何实现的，
第一个的话呢，所谓的这些transport encoding security transaction，你怎么知道呢？对不对，你要拿出证据，ok，我们来看下这个证据在哪里，那么我，在前些课中，已经给大家讲过了，我们现在有很多的，比如说basichttpbinding其实叫做预定义的协议栈，也就是什么意思呢？ 也就是说这几个层加起来，就叫协议栈，多个协议在一起，我们就可以叫做协议栈，那么这个basichttpbinding包含两个元素，第一个是必须要有一个编码，你到底是要编码成二进制还是文本，这个取决于什么，取决于你这个地方的transport你是采用什么，采用http还是tcp，ok，可能大家有点糊涂，ok，那我们来看下，basichttpbinding中，他底层到底绑定的是那些层，那这个怎么看呢？ 我们下个断点，然后ctrl+d+i把即时窗口调出来，即时窗口调出来之后呢， 我们先new一个basichttpbinding，ok这个实例下面有一个createbindingelements函数，即时窗口不能用，用监视窗口，ctrl+D+W 输入 new BasicHttpbinding.CreateBindingElements(),ok,我们可以看到，，首先的话，我们可以看到，这是一个basichttpbinding，这个binding，我们发现有一个textmessageencodingbindingelement和httptransportbindingelement，那么这个对应的是什么，这个对应的就是我们这个地方的，一个是encoding和transport，也就是说 这个预定义的binding，basichttpbinding，也就是abc中的b，也就是说，我采用的是text模式，加上transport，传输的话，我采用的是http这个传输，编码和序列化，大家一定要区分，序列化的话，相当于 在代理时序列化， 编码的目的是什么？，是采用什么模式进行传输，之前用fiddler监控，basichttpbinding确实是采用text模式进行传输，

问题5：当看到一个东西支持什么的时候，应该怎么想？ 比如NetTcpBinding支持安全验证，
接下来，我们再接着看，NetTcpBinding，那个这个binding的话，它的底层预制了什么呢？同样监视窗口，new NetTcpBinding().CreateBindingElement()，我们发现他有4个协议元素，，一个协议栈有4个元素，最底层的元素是tcptransportbindingelement，上一层是windowsstreamsecoritybindingelement就是安全模式采用的是这个， 我们发现basichttpbinding的安全层是没有的，没有的就没有了，也就是说NetTcpBinding。支持安全验证的，再上面我们发现，是一个编码层，这个编码层是一个BinaryMessageEncodingelement,也就是说我NetTcpBinding是采用二进制编码，再上面是一个事务流， TransactionFlowBindingElement，或者叫做事务层， 那么事务层是什么？tcp的话支持事务，，相当于我通过windows的分布式事务协议，来参与嘛，【如何实现的？】
ok这个的话，就是四个层，我为什么知道有四个层，因为我通过具体的bingding来获取的额，
所有net开头的话，表示只能在net环境下使用，
ok还有一种binding是我们常用的。就是消息队列的一个binding，同样监视窗口，Netmsmqbinding().CreateBindingElemeng().,它有两个元素，一个是采用msmq的传输协议，一个是二进制编码，

接下来我们就给大家简单演示几个问题，

问题6； fiddler网络传输监控  学习使用工具
第一个对比Binarymessage和textmessage 我们通过网络传输来监控下，
首先宿主采用basichttpbinding，把宿主的生成文件，copy到虚拟机，部署启动起来，并修改地址为虚拟机ip地址，作为最终的服务地址，
然后调用两个工具，一个是fiddler 一个wireshark专门去监控tcp的

然后在serverclient客户端，添加服务引用， 添加调用代码，执行，
执行成功之后呢，可以看到，确实是用的http，它的内容确实是文本，没有加密，对不对，
这就是采用basichttpbinding，编码是文本，传输是http

接下来，修改为nettcpbinding，修改很简单了，直接修改配置文件， ，然后重新启动下，
运行下，出错了额，什么原因呢
地址有问题， 地址为 net.tcp://192.168.1.123:8434/service1,此时基地址好像没有用过
然后，再重启，启动成功了，，
启动成功之后，我们serviceclient客户端，就更新服务，更新之后，我们在来看下客户端的配置文件， ，我们发现，事务层采用的是windowstreamsecurity，安全机制，但我们不用安全， 必须要能想到，这是预定义的，是属于binding范围，修改的话，是在这里修改的，怎么修改，新建binding节点，自定义binding，替代默认binding，不启用安全  ，当然还是直接修改配置文件，
然后，再启动，，客户端更新服务引用 此时就没有安全了，
此时，wireshark 先监控下，然后再启动客户端，执行成功，
选好，核心的tcp通信，点击查看， tcp，二进制流。

因为wcf经常是内网使用的，所以把安全关了。

最重要的是，一定要理解这两张图，理解了这两张图，对大家学习wcf的话，还是非常有帮助的

下节课就可以讲如何操控wsdl中定义的这些内容，，你所有的协定，最终都会反映到wsdl中去，


一：WCF体系结构

1. 协定

2. 服务运行时

3. 消息传递

4. 激活和承载


二：WCF 通讯图

1. proxy

Service1Client (Cache)=> ChannelFactory => IInputChannel / IOutputChannel.... [http] HttpWebRequest 


2. Transaction

   Encoding

   Security

   Transport

《1》BasicHttpBinding [预定义的协议栈]  

Encoding (binary,text) 

Transport [Http tcp]

{System.ServiceModel.Channels.TextMessageEncodingBindingElement} [和序列化不同的概念]
{System.ServiceModel.Channels.HttpTransportBindingElement}

编码的目的就是规定采用什么方式进行网络传输。。。

《2》NetTcpBinding 

{System.ServiceModel.Channels.TransactionFlowBindingElement}       【事务层】 tcp支持事务
{System.ServiceModel.Channels.BinaryMessageEncodingBindingElement}  【二进制编码】
{System.ServiceModel.Channels.WindowsStreamSecurityBindingElement}
{System.ServiceModel.Channels.TcpTransportBindingElement}            【tcp方式传输】


《3》NetMsmqBinding

{System.ServiceModel.Channels.BinaryMessageEncodingBindingElement}
{System.ServiceModel.Channels.MsmqTransportBindingElement}


四：对比


1. 监控 BinaryMessage  和 TextMessage   


fiddler
POST http://192.168.23.187:8733/Service1/ HTTP/1.1
Content-Type: text/xml; charset=utf-8
VsDebuggerCausalityData: uIDPo+8h1o/8A/pLh8yYLU3/NmEAAAAAQ5uZZKBaDEeVfaYgCDQfU+EycmyJAhdNisyQ5Nl526gACQAA
SOAPAction: "http://tempuri.org/IService1/GetData"
Host: 192.168.23.187:8733
Content-Length: 160
Expect: 100-continue
Accept-Encoding: gzip, deflate
Connection: Keep-Alive

<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/"><s:Body><GetData xmlns="http://tempuri.org/"><value>1000</value></GetData></s:Body></s:Envelope>

wireshark
欠缺

2. WindowsStreamSecurityBindingElement tcp默认自带的。。。



