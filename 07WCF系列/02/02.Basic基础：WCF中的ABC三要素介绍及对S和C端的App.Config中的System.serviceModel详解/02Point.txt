
情绪上怎么样?
我是来学学习能力的，不仅仅是知识？

上节课soa概念和wcf的快速创建，本节课就比较深入的介绍wcf，对嘛，到了把控细节的时候了

问题来了，细节怎么把控呢？有没有一个模式呢？
问题：代理，生成代理，元数据，  代理如何实现的？
问题：元数据交换终结点 是啥？ 为啥有呢？

一：ABC 【endpoint】

1. A ? 地址

   Address 【你的家庭住地在哪，告诉我吧？】			 => 服务地址 http://localhost:8733/Design_Time_Addresses/ServiceLib/Service1/
   既然我们是一个rpc通讯  基于webservice的rpc通讯，client段怎么找到service端呢，起码要通过abc三点 client proxy代理，首先要知道地址在哪里（服务宿主公布的地址）a知道了，那b是什么呢

2. B ?
   
   Binding 【我该乘用什么交通工具呢？小黄车，mobike，11路车？】  => 服务通讯 【http，tcp，msmq, udp】
   client和service我们两个通讯。我是通过什么样的形式过去的呢，

3. C ? 契约

   Contract【去你家做什么？[魔兽争霸？王者农药？XBox？]】        => 服务边界
   我有魔兽争霸，王者农药，XBox，你们是为了玩那个而来的
   我用你的service是用你service下的getdata函数的，你service下有哪些，我去是用你service下的某一个函数的，有一个目的性。

   问题1：理解细节，如何生动形象，一看就懂。并且清楚准确， 以前看起来，稀里糊涂的

   这就是所谓的abc概念，然后呢来看下配置文件。（必要的流程描述是要有的。）
二：配置文件  层次图 一图胜千言

services，bindings，behaviors 主要是解决哪方面的问题，
默认的生成的配置文件只有services，behaviors ，bindings是没有的，才有默认配置
<system.serviceModel>
    <services>
	wcf对外公布的服务
      <service name="ServiceLib.Service1"> 服务的名字是什么
        <host>
          <baseAddresses>基地址是什么？ 有啥用，给endpoint使用
            <!--<add baseAddress = "http://localhost:8733/Design_Time_Addresses/ServiceLib/Service1/" />-->
            <!--表示开放出来的接口地址-->
			给endpoint使用
            <add baseAddress = "http://localhost:8733/Service" />
          </baseAddresses>
        </host>
        <!-- Service Endpoints -->
        <!-- 除非完全限定，否则地址相对于上面提供的基址-->
        <endpoint address="" 为空就采用基地址，不为空时为组合地址 binding="basicHttpBinding" contract="ServiceLib.IService1">  endpoint有abc三个配置，所以abc组合完了，就叫做endpoint，契约是此接口ServiceLib.IService1，采用这个契约这个接口的，也就是双方约定的
       
        </endpoint>
        <!-- Metadata Endpoints -->
        <!-- 元数据交换终结点 供相应的服务 用于 向客户端做自我介绍。 --> 已经将的非常清楚了，向客户端做自我介绍 什么意思呢 什么叫自我介绍呢？因为我们客户端 这地方是一个代理。我要生成一个代理，那我怎么知道你服务的内容有哪些呢，到底怎么公布出来呢，大家有没想过这个问题，这个公布出来，专门通过一个endpoint进行公布，它的服务地址是什么，http://localhost:8733/Service1/mex， 此地址浏览器不可访问，可以控制台添加服务引用，用fiddler去查看，元数据地址可以访问，元数据有哪些东西呢， 有了这些元数据之后，他就可以生产强类型，不然你的强类型怎么出来呢，客户端添加服务引用后，它相当于给你生成了一个代理，生成依赖于元数据
        <!-- 此终结点不使用安全绑定，应在部署前确保其安全或将其删除-->
        <endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange"/>
      </service>
    </services>

	然后我们接下来，看下behaviors
    <behaviors>
      <serviceBehaviors>
        <behavior>
          <!-- 为避免泄漏元数据信息，
          请在部署前将以下值设置为 false -->
          <!--httpGetEnabled表示http是否可以访问到元数据-->
          <serviceMetadata httpGetEnabled="True" httpsGetEnabled="True"/>
          <!-- 要接收故障异常详细信息以进行调试，
          请将以下值设置为 true。在部署前设置为 false 
          以避免泄漏异常信息 -->
          <serviceDebug includeExceptionDetailInFaults="False" />就是如果你调用getdata，跑错了怎么办？ 我是返回给客户端还是不返回给客户端，这是一个很难的问题，按道理说，如果你给第三方使用过的话，千万不要抛异常，有可能会泄露我们的一些信息，
        </behavior>
      </serviceBehaviors>
    </behaviors>
  </system.serviceModel>


1. system.serviceModel  所有的wcf配置都在此节点上

《1》services：对endpoint进行配置。
《2》bindings: 对所有的B进行参数配置（打开时间，关闭时间，传输时间等等。。）
《3》behaviors：对影响wcf运行时的一些方法进行配置 【服务线程数，服务实例，事务等等】



address：为空的时候，默认就是BaseAddress

组合的概念：endpoint  address = BaseAddress+ endpoint address

basicHttpBinding：wcf预定义的绑定。。。 【基于http】


元数据交换终结点供相应的服务用于向客户端做自我介绍  基于这个契约的IMetadataExchange

公布元数据地址http://localhost:8733/Service1/mex


 <serviceMetadata httpGetEnabled="true" httpsGetEnabled="true"/>； 就是不让你通过http get访问。 就是元数据通过http方式，公开与不公开


<serviceDebug includeExceptionDetailInFaults="False" />
是否给client端抛出service 的clr异常。。



之前都是servce端的配置，
接下来我们来看client段的配置

客户端添加了服务引用之后，客户端配置文件也会生成system.servicemodel节点一个binding一个client 客户端没什么好说的，和service端对应，

bindings 默认是没有的额，下面是自定义的

配置好bindings
 <bindings>
      <basicHttpBinding>
        <binding name="myBasicHttpbing" openTimeout="00:30:00" sendTimeout="00:30:00"></binding>
      </basicHttpBinding>
    </bindings>

使用配置
  <endpoint address="" binding="basicHttpBinding" bindingConfiguration="myBasicHttpbing"  contract="ServiceLib.IService1" >


  问题：以前存在一个问题，老是一开始就想它是怎么实现的额？这样一开始就卡壳了。  想知道怎么实现是没有错的，但一开始是了解它怎么了，如何使用，然后在了解为什么？