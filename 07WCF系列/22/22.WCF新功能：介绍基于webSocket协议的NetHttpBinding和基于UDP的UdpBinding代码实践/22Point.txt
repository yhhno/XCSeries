
wcf,rabbitmq,asp.net core 分布式视频，鬼谷子，麻宁这么好的东西，我怎么能忍受它放在那里睡大觉呢？ 不赶快吸收吸收，就算装装逼也好呀，是不是？=>

情绪上怎么样? 小事情，搞的定，一步一步来，不要有过多的任务压在心头，与完事开头难的矛盾， 退缩是不存在额，没有在怕的。=》  主动的话，这些问题就可能不存在，反而有其他更好地东西出现
我是来学学习能力的，学习方法论的，不仅仅是知识？ 不是学完就万事大吉了，=》本质
这个点没有评价好坏，未来的预期也没有评价好坏？
每个东西，都要深挖，不能只是了解它的作用，
每个新东西，旧东西， 其实都不难，调整好状态，跨出第一步，步步踏实，有啥难的，一多半都是自己吓自己。
既然心理作用这么大，我们可以怎么做呢？  之前用代入感，现在用成功者，也就是未来者（儿子清华，女儿北大）， =》积极主动
来句革命性的，这些东西真的有那么重要的吗？遇到它我不想学，产生退缩，我的一切都完了吗？ 当然不是的，我当然不是整天要面对不是这些事情，这些都是实现方式之一，人需要有哲学的角度，出一套指导思想，把一切都简略的画出来，然后去填空，而目前呢，只是在做填空的那一步，就像一个没有思想的人，那就是一个不知道为什么这么做的人在做事情，此时积极的发挥不出来，消极的全部放大，导致进展不下去。 
我们是思考抽象的高层次东西，怎么可以困在低层次的范围内呢？ 对不对？

必须要有整体上的认识，才可以去理解其中的概念，名词，底层的流程，抽象的流程，抽象的概念 大局观
各个点的知识知道了，但流程是什么呢？ 如何联系在一起呢？逻辑呢？  如何才算是理解透彻？概念的透彻，流程的透彻
什么是理解透彻呢？ 就是画一张图来概括，一定要学会这种方式， 知识点都串起来了，形象生动。记忆深刻  
##note###重大问题，基础知识不系统，不全面，有缺失，而且还不清晰牢固

之前总结，反思了很多东西，为什么效果平平呢？ 很大可能是激情没有涉及，（我一定杀20个人呢，）=>起势的东西没有。=》有了起势的结果是什么？=》遇到新东西一定搞明白，事情一定要完成，还有呢？
我就是要知道，既然是学习知识，首先先学到知识，然后在学到学习方法，如何实现呢？
感觉越学越简单，越容易，他妈的就是很简单嘛。
我相信只要我持续的思考，学习，我一定能掌握一套东西，然后学任何的东西都得心应手，都透彻，然后都应用的很好《=《精神层面最重要，不然就没有行动上的启动了，更别说方法的改进了和知识点的累积了》=>有一个方针，或者标准 如成才四标准和人际关系三种关系

 解决IT企业的信息孤岛问题。=》根本就没理解这句话的含义，，不够聪明。不够，缺点啥呢 另外，我们往往仅仅着眼于运用，更进一步是实现，但是都不是从0开始，演变也不清楚，当然更别谈什么导致了演变，环境的变化，（这是基本情况的梳理） 更别谈了，种种的归类，总结，对比（这是提炼出理论，抽象的东西）

 他学习得到东西和我学习得到的东西，为啥不一样？ 是由什么造成的呢？ 我也来对比下，（当然分自学和别人教授两种情况了）
问题的出现，都是能力的欠缺或者是不足造成的额， 此时的重点是补全能力，而不是关注表面的东西，======》》》》总结能力，必须总结，这是最终的关键地方
如果我没有了学习视频，自我学习一个技术，一个领域咋办呢？

问题7：谁有什么？ 一定要搞清楚，不能乱套用，都不清晰，当然稀里糊涂的，一定要界定清楚，说明学习时方式有问题，或者总结时有问题=》引申个大问题，你遇到的各种问题是因为你不具备某种能力，如果你具备了能力，这就不是问题，而是做事的步骤而已，它就不会拦着你，此时就不知道怎么办？心态也变得不好，（为什么有了问题就心态不好呢，长久的不能解决问题造成的），出现的次数多了，当你再遇到问题时，就是一个扭曲的心态了， 扩散到一个的方方面面，那这个人就出了问题， 就在你出了问题后，你也不知道该怎么做？ 去纠正也不知道怎么做？只能头疼医头，脚疼医脚，一个问题接着一个问题，貌似解决了问题，但是心态一点都没有改变，更有可能因为问题的不断出现，导致心态越来越差
问题2：交互，只想到在powshell中去操作，而且还有可能困在这个操作中，觉得好难哦，根本就没想到交互，用C#代码交互， 这说明知识面不够，仅仅满足于当前，没有更进一步的思考。
问题8：都是承载wcf，iis中有什么不同呢？=》环境变了，其他的东西变了吗？=》要察觉到环境变了，=》然后看到底细节有哪些不同，=》webconfig有什么不同？ 我们们发现
问题9: 对哦，既然这个项目不是部署到iis上的，所有当你调试的时候，能够启动成功，说明就是运行在iis环境上，=》察觉
问题10：很多情况就是我们对整个流程不清楚的情况下，去看概念，去应用，这样是不正确的
问题5:在听到这段话的时，蒙蒙的，不知道是啥意思？不理解，  其实很简单了，你要了解这个逻辑过程，再来理解这些操作就很好理解了，就是client在message上加东西，然后service端获取。再验证client加的东西，，很多时候别人都只会说加用户名密码，不会说背后的逻辑过程，这样的话，我们不知道这个逻辑过程，就不能理解说的是什么？为什么要这么做？=>同样的道理，直接看到回绝这个请求，我们根本不理解它是怎么做的？
问题10：此时就真正理解了扩容是啥意思？ 理解了分流，单体宕机，uat升级。=》真正的理解还是需要例子的额，之前只听到加一台机器，但是听了没啥感觉。其实是没有真正落实每一步。逻辑的每一步，只是听到了大概。不知道细节
问题0：存在一个问题。把这个这节课讲到的东西，负载均衡等，都给搞清楚搞明白。就结束了，不在思考了不再考虑其他问题了。类似的问题是一次调用完成没问题，就结束了， 一个维度搞定就结束了  等等
问题2:因为wcf就是ws标准的一个产品嘛  =》一个东西的来龙去脉一定要搞清楚
问题1：优化？优化啥？ 啥是优化？   理解一个新概念，有个小demo，才印象深刻
问题1： 察觉问题能力，此处多台机器配置修改问题，（不光于此，还要有预想到的情景 在量级，等维度）
问题8：学习源码，那怎么学习呢？有个脉络，方向，每次学习也是有目标，方向的，这样才不会乱了阵脚

能力的总结
1.轻松的的心态，把所有的经历都专注在你要做的事情上，其他的任何东西都不要，本身要搞清楚，搞透彻，(关键是找准主方向)，然后延伸，发散，优化，总结等（满足于当前，没有更进一步的思考。）=》发散与集中，战略上发散，战术上集中
2.一个大的工具如wcf，一个小的方面，如wcf中behavior，都需要了解知识点，概念，运作机制，然后再一步一步的走下去，这样才算是理解透彻，甚至还包括修改参数带来的影响。=》这是学习知识的问题
3.找准主方向，一切都会迎刃而解的，关键如何找到主方向呢？ =》主方向是脉络清晰的升级，更进一步。
4.要开心快乐。
5.逻辑过程+运行机制+主方向


开始本节课前，应该思考这些东西 0.积极的心态 1,这节课讲的是什么，大概概况，解决的问题，2。新知识还是旧知识 3.旧的话自己的本身的认识是什么？用到饿了那些什么样的基础知识 4.新知识的话，该怎么办？5.根据用途猜想下它的实现 6.
结束本节课后，应该思考这些东西 1.学到的知识是什么？心中是否清晰？2.自己独立思考下 3.和自己预想的有什么不一样？ 4.有什么方法或者思维或者见识可以借鉴 5.总结下

#重点#极大的自信心和态度。
#重点#问题14：IEndpointBehavior 此时看到IEndpointBehavior心中没有点感觉，=》说明之前的学习是应付，没有真正的理解=》或者说之前总结的技巧，没有形成习惯
为什么高手做事情总是有思路，一步接着一步走， 出错了，还能定位到大概的范围VS做事情没思路，不知道如何下手，出错了还不能定位位置，纠错也不知道怎么办?=>结合反序列化器，这件事思考下



问题1：之前看到websocket 看到它支持双工，不知道它是干嘛的，一头雾水  为啥呢？
问题2；这里提到双工，心中没啥概念，说明当时学的没记住
问题3:运行时，状态查看，也是一个思路
问题3：看到协议栈不知道是啥了。
  问题3：为什么tcp和udp不能使用基地址呢？ 而websocket可以使用呢
问题4：websocket如何实现发布订阅， 或者说发布订阅的主方向是什么呢？

大家好，本节课我们就和大家来说wcf中，提供的两个新功能，
问题1：之前看到websocket 看到它支持双工，不知道它是干嘛的，一头雾水  为啥呢？
第一个功能叫做websocket  
第二个功能叫做udp通信，
ok，我们首先来说websocket
大家一提到websocket的话，可能会想到这是html5中支持的 对不对，第一个想到的肯定是html5，那当然这个地方存在一个误区，就是说呢，websocket和http到底是一个什么关系，我们知道websocket的话，我们经常说websocket协议，对不对，那么http的话呢，我们也认为它是http协议， 所以所两个协议之间的话呢，它不是一个东西， 虽然说websocket有一部分是基于http的， ，当时这两个东西，你可以认为是一个交集的关系，，大家千万不要认为websockt是基于http的，  它不是的，
ok，画个图，
知道这个东西之后，我们再来看下，websocket的话呢， 我们知道他是一个基于长连接的，
问题2；这里提到双工，心中没啥概念，说明当时学的没记住
ok这个协议的话呢，wcf为了适应发展的话呢，它支持了websocket，在websocket之前呢，我们知道wcf有一个什么，有一个双工，对吧，双工的话呢，他本质上是两个oneway的操作，对不对，我们在讲契约的时候，讲到了这个双工，大家应该清楚，如果说不清楚的话，在回去看下，
ok，现在wcf支持了websocket之后，给我们了另一种选择，
ok，接下来的话呢，我们来看下websocket怎么去使用。
首先我们要清楚websocket他在wcf中的binding是nethttpbinding
既然wcf封装websocket为binding，我们使用也是非常简单的
默认情况下 websocket是基于双工的，也就是说你一定要双工这种模式，不是双工，但是你一定要基于双工的代码
service代码 是双工的
namespace WcfService
{
    /// <summary>
    /// Service端的契约
    /// </summary>
    [ServiceContract(CallbackContract = (typeof(ICallback)))]
    public interface ILogin
    {
        [OperationContract]
        void Login(string username);
    }

    /// <summary>
    /// 这里就相当于 “Client”的 契约
    /// </summary>
    [ServiceContract]
    public interface ICallback
    {
        [OperationContract]
        void Notify(string msg);
    }
}

实现呢
这里实现的是service端的契约
public class LoginService : ILogin
    {
        public static Dictionary<string, ICallback> channelDic = new Dictionary<string, ICallback>();

        public void Login(string username)
        {
            //获取当前client的对象 channel
            var callback = OperationContext.Current.GetCallbackChannel<ICallback>();

            channelDic[username] = callback;

            Console.WriteLine("当前username={0} 已登录", username);
        }

        public static void Modify()
        {
            while (true)
            {
                var input = Console.ReadLine();

                if (!string.IsNullOrEmpty(input))
                {
                    foreach (var item in channelDic)
                    {
                        item.Value.Notify(input);
                    }
                }
            }
        }
    }

配置文件
 <bindings>
      <netHttpBinding>
        <binding name="mynetHttpBinding">
          <security mode="None"></security>
          <webSocketSettings transportUsage="WhenDuplex"/>
        </binding>
      </netHttpBinding>
    </bindings>
transportUsage的三个选项
始终(Always) - 强制使用 WebSocket。
从不(Never) - 阻止使用 WebSocket。 尝试使用具有此设置的双工协定将导致异常。
双工时(WhenDuplex) - 这是默认值。


     <endpoint address="HomeService" binding="netHttpBinding" bindingConfiguration="mynetHttpBinding"
                  contract="WcfService.ILogin">
          <identity>
            <dns value="localhost" />
          </identity>
        </endpoint>


编译下，启动
client添加服务引用
我们看下client端，自动生成的配置
  <client>
      <endpoint address="ws://192.168.23.1:8732/HomeService" binding="netHttpBinding"
        bindingConfiguration="NetHttpBinding_ILogin" contract="ServiceReference1.ILogin"
        name="NetHttpBinding_ILogin">
        <identity>
          <dns value="localhost" />
        </identity>
      </endpoint>
    </client>
地址以ws开头，告诉我们当前采用的是websocket这个协议嘛
添加调用代码
namespace WcfClient
{
    class Program
    {
        static void Main(string[] args)
        {
            var instance = new InstanceContext(new MyLoginCallback());

            ServiceReference1.LoginClient loginClient = new ServiceReference1.LoginClient(instance);

            loginClient.Login("mary");

            Console.Read();
        }
    }

    public class MyLoginCallback : ILoginCallback
    {
        public void Notify(string msg)
        {
            Console.WriteLine(msg);
        }
    }
}
打开fiddler
启动client端
发现service，有输出，当前用户登录。
查看fiddler，发现协议是websocket，返回的内容也变了，有long 长连接 心跳
然后在service 输入hello
看到client 也输出了hello
在查看fiddler，
确实是websocket协议，返回是二进制内容。

问题3：看到协议栈不知道是啥了。
ok，接下来就有个问题，既然是采用websocket协议的话呢，我们想看什么呢？ 我们想看它的binding中到底协议栈是什么样的？
问题3:运行时，状态查看，也是一个思路
ctrl+d+i  ctrl+d+w
我们发现它加密是二进制加密，transport是http  它属于一个自定义的binding， 也就是说在http上采用的是二进制，说明这也是wcf一个伤筋动骨的东西， 也是wcf为了适配现代化的发展，然后支持了websocket，就和我们说到的支持restful是一样的，也是一个伤筋动骨的东西，



ok，我们接下来就说下一个把，
下一个是udp的通信，
udp的话，在最开始之前，wcf是不支持的， 后来是加上了
那这个是怎么来操作的呢
udp的话，大家都知道它是一个数据暴走的一个协议，对吧，比如说我们以前看cctv5足球，它采用就是udp的一个协议， 我们经常会看到一个卡机，或者丢失部分数据，

问题3：为什么tcp和udp不能使用基地址呢？ 而websocket可以使用呢
不知道udp地址怎么写？ 百度呀，或者官方文档搜索呀
https://msdn.microsoft.com/zh-cn/library/hh556229(v=vs.110).aspx

配置文件
    <services>
      <service name="WcfService.HomeService">
        <endpoint address="soap.udp://192.168.23.194:8733" binding="udpBinding" contract="WcfService.IHomeService">
          <identity>
            <dns value="localhost"/>
          </identity>
        </endpoint>
        <endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange"/>
        <host>
          <baseAddresses>
            <add baseAddress="http://192.168.23.194:8732"/>
          </baseAddresses>
        </host>
      </service>

服务协议
namespace WcfService
{
    [ServiceContract]
    public interface IHomeService
    {
        [OperationContract]
        string DoWork(string msg);
    }
}
实现

public class HomeService : IHomeService
    {
        public string DoWork(string msg)
        {
            Console.WriteLine(msg);

            return string.Format("datetime={0},msg={1}", DateTime.Now, msg);
        }
    }

服务端启动，
client添加服务引用
client配置地址
 <client>
      <endpoint address="soap.udp://192.168.23.194:8733/" binding="udpBinding"
        bindingConfiguration="UdpBinding_IHomeService" contract="ServiceReference1.IHomeService"
        name="UdpBinding_IHomeService">
        <identity>
          <dns value="localhost" />
        </identity>
      </endpoint>
    </client>
client端调用代码

namespace WcfClient
{
    class Program
    {
        static void Main(string[] args)
        {
            HomeServiceClient client = new HomeServiceClient();

            for (int i = 0; i < 100; i++)
            {
                var result = client.DoWork("hello world!");

                Console.WriteLine(result);
                System.Threading.Thread.Sleep(1000);
            }

            Console.Read();
        }
    }
}
启动client端，发现client和service端都有输出
然后我们通过wireshark去看下
发现是udp+二进制

udpbinding协议栈是采用udp+二进制


  ok，这就是本节课给大家介绍的两个功能，大家可以在自己的场景中去选择，
  如果说你有使用udp的环境的话， 可以去使用

问题4：websocket如何实现发布订阅， 或者说发布订阅的主方向是什么呢？
  然后websocket协议的话呢，如果大家要做一个聊天室，或者说是想做这种类似发布订阅这种模式 可以去试下这个websocket
  当然实际上来说呢真实的项目用websocket相对来说比较少，因为毕竟有其他的东西来代替，比如nodejs中的socket.io 它也是可以支持websocket的
所以说现在语言特别多，替代的方案也特别多，所以说大家格局自己的需要去使用把，

一：WCF新功能

1. websocket通信  NetHttpBinding

 html5

websocket协议

http协议

websocket 和 http 是一个交集关系。。。 【长连接】

双工【两个oneway操作】

始终(Always) - 强制使用 WebSocket。
从不(Never) - 阻止使用 WebSocket。 尝试使用具有此设置的双工协定将导致异常。
双工时(WhenDuplex) - 这是默认值。

《1》 使用NetHttpBinding

《2》 websocket是基于双工模式的代码。。。

2. Binding中到底协议栈是什么样的？？？

http + binary 【伤筋动骨的东西】

<endpoint address="ws://192.168.23.1:8732/HomeService" binding="netHttpBinding"
        bindingConfiguration="NetHttpBinding_ILogin" contract="ServiceReference1.ILogin"
        name="NetHttpBinding_ILogin">
        <identity>
          <dns value="localhost" />
        </identity>
      </endpoint>

nodejs  sockect.io

2. udp通信  UdpBinding  【tcp】

   cctv5 足球 【卡机，丢失数据】

udp地址怎么写？      string serviceAddress = "soap.udp://224.0.0.1:40000";

https://msdn.microsoft.com/zh-cn/library/hh556229(v=vs.110).aspx

binary + udp 模式进行传输。。。。

