
wcf,rabbitmq,asp.net core 分布式视频，鬼谷子，麻宁这么好的东西，我怎么能忍受它放在那里睡大觉呢？ 不赶快吸收吸收，就算装装逼也好呀，是不是？=>

情绪上怎么样? 小事情，搞的定，一步一步来，不要有过多的任务压在心头，与完事开头难的矛盾， 退缩是不存在额，没有在怕的。=》  主动的话，这些问题就可能不存在，反而有其他更好地东西出现
我是来学学习能力的，学习方法论的，不仅仅是知识？ 不是学完就万事大吉了，=》本质
这个点没有评价好坏，未来的预期也没有评价好坏？
每个东西，都要深挖，不能只是了解它的作用，
每个新东西，旧东西， 其实都不难，调整好状态，跨出第一步，步步踏实，有啥难的，一多半都是自己吓自己。
既然心理作用这么大，我们可以怎么做呢？  之前用代入感，现在用成功者，也就是未来者（儿子清华，女儿北大）， =》积极主动
来句革命性的，这些东西真的有那么重要的吗？遇到它我不想学，产生退缩，我的一切都完了吗？ 当然不是的，我当然不是整天要面对不是这些事情，这些都是实现方式之一，人需要有哲学的角度，出一套指导思想，把一切都简略的画出来，然后去填空，而目前呢，只是在做填空的那一步，就像一个没有思想的人，那就是一个不知道为什么这么做的人在做事情，此时积极的发挥不出来，消极的全部放大，导致进展不下去。 
我们是思考抽象的高层次东西，怎么可以困在低层次的范围内呢？ 对不对？

必须要有整体上的认识，才可以去理解其中的概念，名词，底层的流程，抽象的流程，抽象的概念 大局观
各个点的知识知道了，但流程是什么呢？ 如何联系在一起呢？逻辑呢？  如何才算是理解透彻？概念的透彻，流程的透彻
什么是理解透彻呢？ 就是画一张图来概括，一定要学会这种方式， 知识点都串起来了，形象生动。记忆深刻  
##note###重大问题，基础知识不系统，不全面，有缺失，而且还不清晰牢固

之前总结，反思了很多东西，为什么效果平平呢？ 很大可能是激情没有涉及，（我一定杀20个人呢，）=>起势的东西没有。=》有了起势的结果是什么？=》遇到新东西一定搞明白，事情一定要完成，还有呢？
我就是要知道，既然是学习知识，首先先学到知识，然后在学到学习方法，如何实现呢？
感觉越学越简单，越容易，他妈的就是很简单嘛。
我相信只要我持续的思考，学习，我一定能掌握一套东西，然后学任何的东西都得心应手，都透彻，然后都应用的很好《=《精神层面最重要，不然就没有行动上的启动了，更别说方法的改进了和知识点的累积了》=>有一个方针，或者标准 如成才四标准和人际关系三种关系

 解决IT企业的信息孤岛问题。=》根本就没理解这句话的含义，，不够聪明。不够，缺点啥呢 另外，我们往往仅仅着眼于运用，更进一步是实现，但是都不是从0开始，演变也不清楚，当然更别谈什么导致了演变，环境的变化，（这是基本情况的梳理） 更别谈了，种种的归类，总结，对比（这是提炼出理论，抽象的东西）

 他学习得到东西和我学习得到的东西，为啥不一样？ 是由什么造成的呢？ 我也来对比下，（当然分自学和别人教授两种情况了）
问题的出现，都是能力的欠缺或者是不足造成的额， 此时的重点是补全能力，而不是关注表面的东西，======》》》》总结能力，必须总结，这是最终的关键地方
如果我没有了学习视频，自我学习一个技术，一个领域咋办呢？

问题7：谁有什么？ 一定要搞清楚，不能乱套用，都不清晰，当然稀里糊涂的，一定要界定清楚，说明学习时方式有问题，或者总结时有问题=》引申个大问题，你遇到的各种问题是因为你不具备某种能力，如果你具备了能力，这就不是问题，而是做事的步骤而已，它就不会拦着你，此时就不知道怎么办？心态也变得不好，（为什么有了问题就心态不好呢，长久的不能解决问题造成的），出现的次数多了，当你再遇到问题时，就是一个扭曲的心态了， 扩散到一个的方方面面，那这个人就出了问题， 就在你出了问题后，你也不知道该怎么做？ 去纠正也不知道怎么做？只能头疼医头，脚疼医脚，一个问题接着一个问题，貌似解决了问题，但是心态一点都没有改变，更有可能因为问题的不断出现，导致心态越来越差
问题2：交互，只想到在powshell中去操作，而且还有可能困在这个操作中，觉得好难哦，根本就没想到交互，用C#代码交互， 这说明知识面不够，仅仅满足于当前，没有更进一步的思考。
问题8：都是承载wcf，iis中有什么不同呢？=》环境变了，其他的东西变了吗？=》要察觉到环境变了，=》然后看到底细节有哪些不同，=》webconfig有什么不同？ 我们们发现
问题9: 对哦，既然这个项目不是部署到iis上的，所有当你调试的时候，能够启动成功，说明就是运行在iis环境上，=》察觉
问题10：很多情况就是我们对整个流程不清楚的情况下，去看概念，去应用，这样是不正确的
问题5:在听到这段话的时，蒙蒙的，不知道是啥意思？不理解，  其实很简单了，你要了解这个逻辑过程，再来理解这些操作就很好理解了，就是client在message上加东西，然后service端获取。再验证client加的东西，，很多时候别人都只会说加用户名密码，不会说背后的逻辑过程，这样的话，我们不知道这个逻辑过程，就不能理解说的是什么？为什么要这么做？=>同样的道理，直接看到回绝这个请求，我们根本不理解它是怎么做的？
问题10：此时就真正理解了扩容是啥意思？ 理解了分流，单体宕机，uat升级。=》真正的理解还是需要例子的额，之前只听到加一台机器，但是听了没啥感觉。其实是没有真正落实每一步。逻辑的每一步，只是听到了大概。不知道细节
问题0：存在一个问题。把这个这节课讲到的东西，负载均衡等，都给搞清楚搞明白。就结束了，不在思考了不再考虑其他问题了。类似的问题是一次调用完成没问题，就结束了， 一个维度搞定就结束了  等等
问题2:因为wcf就是ws标准的一个产品嘛  =》一个东西的来龙去脉一定要搞清楚
问题1：优化？优化啥？ 啥是优化？   理解一个新概念，有个小demo，才印象深刻
问题1： 察觉问题能力，此处多台机器配置修改问题，（不光于此，还要有预想到的情景 在量级，等维度）
问题8：学习源码，那怎么学习呢？有个脉络，方向，每次学习也是有目标，方向的，这样才不会乱了阵脚

能力的总结
1.轻松的的心态，把所有的经历都专注在你要做的事情上，其他的任何东西都不要，本身要搞清楚，搞透彻，(关键是找准主方向)，然后延伸，发散，优化，总结等（满足于当前，没有更进一步的思考。）=》发散与集中，战略上发散，战术上集中
2.一个大的工具如wcf，一个小的方面，如wcf中behavior，都需要了解知识点，概念，运作机制，然后再一步一步的走下去，这样才算是理解透彻，甚至还包括修改参数带来的影响。=》这是学习知识的问题
3.找准主方向，一切都会迎刃而解的，关键如何找到主方向呢？ =》主方向是脉络清晰的升级，更进一步。
4.要开心快乐。
5.逻辑过程+运行机制+主方向


开始本节课前，应该思考这些东西 0.积极的心态 1,这节课讲的是什么，大概概况，解决的问题，2。新知识还是旧知识 3.旧的话自己的本身的认识是什么？用到饿了那些什么样的基础知识 4.新知识的话，该怎么办？5.根据用途猜想下它的实现 6.
结束本节课后，应该思考这些东西 1.学到的知识是什么？心中是否清晰？2.自己独立思考下 3.和自己预想的有什么不一样？ 4.有什么方法或者思维或者见识可以借鉴 5.总结下

#重点#极大的自信心和态度。
#重点#问题14：IEndpointBehavior 此时看到IEndpointBehavior心中没有点感觉，=》说明之前的学习是应付，没有真正的理解=》或者说之前总结的技巧，没有形成习惯
为什么高手做事情总是有思路，一步接着一步走， 出错了，还能定位到大概的范围VS做事情没思路，不知道如何下手，出错了还不能定位位置，纠错也不知道怎么办?=>结合反序列化器，这件事思考下



问题1： 察觉问题能力，此处多台机器配置修改问题，（不光于此，还要有预想到的情景 在量级，等维度）  mysql做了一个迁移啥意思？
问题2：画个图，就类似于小demo的效果， 印象深刻。=>主要的目的是对这个东西的流程清楚，
问题3:长连接，长轮询，配置项
问题3.1 集中化配置管理，是怎样的一个流程？原本是程序执行从本地去读取配置文件信息，配置信息自动化生成或者手工添加 现在呢，要把配置信息放到一个集中化管理的地方，需要手工在管理平台添加，然后订阅apollo的client去获取， 那配置信息是什么呢？键值对？ 其实就是键值对， wcf配置信息一看那么多，其实就是要一个服务地址，，当时看这么多的配置信息，就蒙了。=》主方向+逻辑过程缺失
问题4：如何去使用一个新工具呢？=》其实使用也是梳理一个逻辑过程的过程，类似于画图 
问题5：灰度发布是什么意思？
问题6：apollo的客户端的运行机制，主脉络搞清楚
问题6.1  client对wcf，多个wcf对apollo，对apollo而言wcf就是客户端
问题8：学习源码，那怎么学习呢？有个脉络，方向，每次学习也是有目标，方向的，这样才不会乱了阵脚
问题9：这个通知如何实现，配置读取的机制是啥？




本节课就和大家继续聊下，wcf的优化
既然我们要做一个分布式的应用，对吧，必然会存在一个什么问题？  也就是一个配置的一个问题  那配置什么样的问题呢？
问题1： 察觉问题能力，此处多台机器配置修改问题，（不光于此，还要有预想到的情景 在量级，等维度）  mysql做了一个迁移啥意思？
比如说我们以前是一台机器，我们把所有的数据呢放到配置文件里面去， 这样的话，我们改起来还是很方便的，
如果说你有10台wcf，那么配置文件是不是要修改10次，对吧，你要修改10次，假如你要修改某一处的配置文件的话如mysql做了一个迁移，是需要修改10次的wcf的配置文件，这是很麻烦的，对吧
ok，接下来，我们来看下如何做一个集中化配置的搭建
我们采用这个携程的apollo
思路大家应该也明白，
问题2：画个图，就类似于小demo的效果， 印象深刻。=>主要的目的是对这个东西的流程清楚，
画个图
问题3:长连接，长轮询，配置项
首先一台apollo，它是一个web的形式，可操作， 也就是有一个ui管理地方，有一点像zookeeper，但是的话呢，它是一个成品，不像zookeeper只是一个技术一个细节。
有一个wcf1，有一个wcf2，有一个wcf3.wcf都可以订阅apollo， wcf自身还带了一个长连接，有时候保持这个长连接，长连接的话，可能有问题，或者某一时刻出现了网络问题，那这时候可以通过长轮询进行轮询，  
ok，具体的细节，我们就不说了， 主要说，它类似于zookeeper，也就是说我订阅之后呢， 如果说你apollo有数据的变更，会实时的推送给订阅的wcf，这样wcf就可以实时拿到最新的变量值，比如说我们把这个ConnectionString.MongodbString，  RedisString.都作为配置项，统一的塞入到apollo去，，相当于什么呢，相当于以前分散的配置，我们集中化了，解决的痛点： 将分散的config配置集中化管理。。。
这就是apollo来解决的一个问题，

问题3.1 集中化配置管理，是怎样的一个流程？原本是程序执行从本地去读取配置文件信息，配置信息自动化生成或者手工添加 现在呢，要把配置信息放到一个集中化管理的地方，需要手工在管理平台添加，然后订阅apollo的client去获取， 那配置信息是什么呢？键值对？ 其实就是键值对， wcf配置信息一看那么多，其实就是要一个服务地址，，当时看这么多的配置信息，就蒙了。=》主方向+逻辑过程缺失

问题4：如何去使用一个新工具呢？=》其实使用也是梳理一个逻辑过程的过程，类似于画图 
接下来我们就要去看下，如何去搭建
思路大家应该都明白，
ok，首先查看文档
https://github.com/ctripcorp/apollo/wiki/Quick-Start
找到net客户端文档
https://github.com/ctripcorp/apollo/wiki/.Net%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97
apollo在centos中搭建
前提我们要装centos和mysql和java
我们通过xshell去连接centos
新建个目录
检查java环境 这个地方大家一定要装下java，因为毕竟apollo是用java来开发的， 所以说这个是必须的额，
把安装包导入到刚才创建的文件夹中，
导入mysql语句 两个db
这样mysql方面的东西就解决了=>因为apollo本身还有配置项的 都需要存储一些东西的
解压刚才导入的zip
它的启动文件是demo.sh
我们先把它这个文件改下，
因为apollo要把这些配置放到mysql中，所以它一定要能连接mysql
修改完配置文件，
启动apollo
启动要用一些时间，
安装好了之后，有地址 我们打开地址 ui管理地址  有默认的用户名密码
登录进去，
发现有一个测试项目
问题5：灰度发布是什么意思？
我们发现确实做的还是蛮好看的，包括有发布 发布历史，回滚授权，灰度发布，等等
这个的话就是特别，很牛的一个地方， 也是比较完善的一个集中化配置的一个项目
ok接下来呢
apollo已经搭建好了，我们继续来说客户端把，


问题6：apollo的客户端的运行机制，主脉络搞清楚
问题6.1  client对wcf，多个wcf对apollo，对apollo而言wcf就是客户端
我们来看下client客户端
client我们怎么来使用呢，我们要在客户端加两个节点，一个是appid，还有在你本机上加一个环境，也就是标识你当前的 机器所属的环境，因为是这样的额， 因为apollo的话，它可以支持几个环境，比如说我们最基础的有一个开发环境dev，还有一个fat，fat是什么意思，fat是给测试用的，还有一个是什么呢？Uat环境，uat环境是什么意思呢？就是我测试已经测试通过了，要上到uat环境，uat环境，相当于准生产环境，因为他的服务器来自于生产，就是你生产环境不是有一个集群嘛，那我从集群中拉两台机器过来，都uat环境， 最后就是一个生产环境pro，如果说你是集中化配置的话，你肯定也要支持这四个环境，对不对，因为你每个环境的redis或者mongodb的地址肯定是不一样的，你不是说我生产的mongodb的地址和开发的mongodb的地址用同一个，肯定是不行的，相当于你apollo一定要支持四个环境的config地址，相当于你同一个配置有四个地址的， 相当于四个备份嘛，
四个环境一定要支持， 每台机器上你都要配置下，你当前的机器属于什么环境，这怎么做呢？
在c盘创建一个opt文件夹，opt文件夹下创建两个文件夹，data和settings  data文件夹是做缓存用的， 也就是什么意思  也就是我们从apollo推送过来的最新数据 我们也会缓存一份到opt文件夹下的data目录， 然后settings是表明当前机器是一个什么环境，也就是四个环境之一，创建一个server.properties文件，写上例如 env=DEV，因为我们是本地开发，如果说你是uat，这个地方就要改成uat了，当本机运行的时候，它会读取这个文件，

appid
服务地址=》这样说明四个环境可以在同一个apollo，也可以不在同一个apollo
 <appSettings>
    <!-- Change to the actual app id -->
    <add key="AppID" value="1001"/>
    <!-- Should change the apollo config service url for each environment -->
    <add key="Apollo.DEV.Meta" value="http://192.168.23.193:8080"/>
    <add key="Apollo.PRO.Meta" value="http://192.168.23.193:8080"/>
  </appSettings>

问题8：学习源码，那怎么学习呢？有个脉络，方向，每次学习也是有目标，方向的，这样才不会乱了阵脚
配置完了之后，我们看代码如何写？  这个代码还是有很高质量的额，要学习下，
https://github.com/ctripcorp/apollo.net

 public static void Main(string[] args)
        {
            ApolloConfigDemo apolloConfigDemo = new ApolloConfigDemo();
            apolloConfigDemo.PrintEnvInfo();
            Console.WriteLine("Apollo Config Demo. Please input key to get the value. Input quit to exit.");
            while (true)
            {
                Console.Write("> ");
                string input = Console.ReadLine();
                if (input == null || input.Length == 0)
                {
                    continue;
                }
                input = input.Trim();
                if (input.Equals("quit", StringComparison.CurrentCultureIgnoreCase))
                {
                    Environment.Exit(0);
                }
                apolloConfigDemo.GetConfig(input);
            }
        }
首先它本机的环境信息打出来
    apolloConfigDemo.PrintEnvInfo();
你输入你想要获取的配置key
然后获取配置
apolloConfigDemo.GetConfig(input);

此时我们要在apollo管理平台新建个项目
在项目中，添加配置项，
然后发布配置项，

然后启动client，看是否能获取的到配置型
输入reidskey 可以获取
输入mongodb  返回undefined

这时候如果说我把，rediskey的值在管理后台修改了的话呢？ 再发布

问题9：这个通知如何实现，配置读取的机制是啥？
client会受到一个通知对不对， 远程的config刷新了，

这说明了什么？ 说明我已经拿到了服务端推过来的key，大家一定要明白，它是打到你的内存里面去了， 不是说你在apollo中进行获取，相当于我们内存里面它有一个变量，首先的话，是从内存中的变量中，去夺取， 获取不到的话，他就会到本节的opt/data中去获取， 如果也获取不到， 它就要到apollo中去获取，，这是一个流程的问题，
不是说每次执行apolloConfigDemo.GetConfig(input);，都是从apollo中去获取，

然后我们看下缓存，opt文件夹下的data。。有一个缓存，这个缓存的目的是什么呢？在于如果apollo挂掉了，程序不受影响，或者说程序的执行不受影响，因为他会在本机的文件中去读取，这就防止了节点宕机的一个问题



一：Apollo 【携程】 集中化配置

1. 分布式环境下的痛点

10台wcf。。配置文件 是不是要修改十次？？？


 《1》配置分散，修改起来麻烦

      ConnectionString. mysql
      MongodbString.
      RedisString.

解决的痛点： 将分散的config配置集中化管理。。。

https://github.com/ctripcorp/apollo/wiki/.Net%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97


2. https://github.com/ctripcorp/apollo/wiki/Quick-Start

前提： mysql
       centos
       java

《1》 安装包： https://pan.baidu.com/s/1pL4wTx5  

unzip apollo-quick-start.zip

vim demo.sh [数据库连接串]

《2》 ./demo.sh start


《3》.net客户端：　https://github.com/ctripcorp/apollo.net


1001+dev+application.json  这个Cache的目的，在于如果apollo挂掉了，，，那么程序执行不收影响。。。
