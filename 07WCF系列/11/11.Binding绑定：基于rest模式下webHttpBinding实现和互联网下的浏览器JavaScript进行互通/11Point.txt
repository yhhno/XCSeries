一：Restful  【webhttpbinding】+ http （json）

1. 本质

《1》用URL定位唯一资源		      http://www.baidu.com

《2》用HTTP动态描述对 该’资源‘的操作（CURD）。。。

    get: 从baidu.com获取数据
    post: 像baidu.com提交数据
    put: modify
    delete: delete

2. 背景

  在移动互联网上时代盛行，出现了各种客户端，比如 ’安卓‘，’IOS‘，’小爬虫‘，从http模式下的restful就可以对这些客户端
  实现完整的统一【跨语言互通】。

3. Restful 相比 soap和传统模式http 有什么不同， 解决了什么问题？

   eg：比如Student表的修改：

      原来的模式是：【mvc】
 
      http://localhost:80/Student/Get/1
      http://localhost:80/Student/Add
      http://localhost:80/Student/Modify
      http://localhost:80/Student/Delete


      【看到什么现象？（我们发现url中有动词出现？）】


       而使用restful模式后:

       http://localhost:80/Student/1  [get] 
       http://localhost:80/Student  [post]
       http://localhost:80/Student  [put]
       http://localhost:80/Student  [delete]

      http://localhost:8732/HomeService/Student/1
      http://localhost:8732/HomeService/Student [Post]

       可以看到，url中不出现任何动词，
       除了get，其他类型的url保持一致。

       这个就是restful实现的用动词转移...

       restful的标准就是在url中不可以出现动词。。。【标准】


3. Soap更加专注于企业内部网（erp，oa），更加关注安全，事务等细节，由于内部网，，性能，网络带宽不用关心。
   
   Restful 更加关注于internet上的网络传输，所以比soap更加的节省带宽。

DELETE http://192.168.23.187:8732/HomeService/Student HTTP/1.1
Content-Type: application/json;charset=UTF-8
Accept: */*
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)
Keep-Alive: TRUE
Host: 192.168.23.187:8732
Content-Length: 1
Expect: 100-continue
Connection: Keep-Alive

1



HTTP/1.1 200 OK
Content-Length: 21
Content-Type: application/json; charset=utf-8
Server: Microsoft-HTTPAPI/2.0
Date: Mon, 13 Nov 2017 14:31:58 GMT

{"Action":"DoDelete"}


WebInvoke，WebGet 相当于MVC的Route。。。【定义路由】


  public class WebPostUtils
    {
        public static string DoPost(string url, string param, string method)
        {
            string msg = string.Empty;

            byte[] postData = Encoding.UTF8.GetBytes(param);

            HttpWebRequest myRequest = (HttpWebRequest)WebRequest.Create(url);
            myRequest.Method = method;

            myRequest.ContentLength = postData.Length;
            myRequest.ContentType = "application/json;charset=UTF-8";
            myRequest.Timeout = 1000 * 120;
            myRequest.Accept = "*/*";
            myRequest.UserAgent = "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)";
            myRequest.Headers.Add(HttpRequestHeader.KeepAlive, "TRUE");

            Stream newStream = myRequest.GetRequestStream();

            newStream.Write(postData.ToArray(), 0, postData.Length);

            newStream.Flush();
            newStream.Close();

            using (HttpWebResponse myResponse = (HttpWebResponse)myRequest.GetResponse())
            {
                if (myResponse.StatusCode == HttpStatusCode.OK)
                {
                    StreamReader reader = new StreamReader(myResponse.GetResponseStream(), Encoding.UTF8);

                    msg = reader.ReadToEnd();
                }
            }

            return msg;
        }
    }