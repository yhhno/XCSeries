
wcf,rabbitmq,asp.net core 分布式视频，鬼谷子，麻宁这么好的东西，我怎么能忍受它放在那里睡大觉呢？ 不赶快吸收吸收，就算装装逼也好呀，是不是？=>

情绪上怎么样? 小事情，搞的定，一步一步来，不要有过多的任务压在心头，与完事开头难的矛盾， 退缩是不存在额，没有在怕的。=》  主动的话，这些问题就可能不存在，反而有其他更好地东西出现
我是来学学习能力的，学习方法论的，不仅仅是知识？ 不是学完就万事大吉了，=》本质
这个点没有评价好坏，未来的预期也没有评价好坏？
每个东西，都要深挖，不能只是了解它的作用，
每个新东西，旧东西， 其实都不难，调整好状态，跨出第一步，步步踏实，有啥难的，一多半都是自己吓自己。
既然心理作用这么大，我们可以怎么做呢？  之前用代入感，现在用成功者，也就是未来者（儿子清华，女儿北大）， =》积极主动
来句革命性的，这些东西真的有那么重要的吗？遇到它我不想学，产生退缩，我的一切都完了吗？ 当然不是的，我当然不是整天要面对不是这些事情，这些都是实现方式之一，人需要有哲学的角度，出一套指导思想，把一切都简略的画出来，然后去填空，而目前呢，只是在做填空的那一步，就像一个没有思想的人，那就是一个不知道为什么这么做的人在做事情，此时积极的发挥不出来，消极的全部放大，导致进展不下去。 
我们是思考抽象的高层次东西，怎么可以困在低层次的范围内呢？ 对不对？

必须要有整体上的认识，才可以去理解其中的概念，名词，底层的流程，抽象的流程，抽象的概念 大局观
各个点的知识知道了，但流程是什么呢？ 如何联系在一起呢？逻辑呢？  如何才算是理解透彻？概念的透彻，流程的透彻
什么是理解透彻呢？ 就是画一张图来概括，一定要学会这种方式， 知识点都串起来了，形象生动。记忆深刻  
##note###重大问题，基础知识不系统，不全面，有缺失，而且还不清晰牢固

之前总结，反思了很多东西，为什么效果平平呢？ 很大可能是激情没有涉及，（我一定杀20个人呢，）=>起势的东西没有。=》有了起势的结果是什么？=》遇到新东西一定搞明白，事情一定要完成，还有呢？
我就是要知道，既然是学习知识，首先先学到知识，然后在学到学习方法，如何实现呢？
感觉越学越简单，越容易，他妈的就是很简单嘛。
我相信只要我持续的思考，学习，我一定能掌握一套东西，然后学任何的东西都得心应手，都透彻，然后都应用的很好《=《精神层面最重要，不然就没有行动上的启动了，更别说方法的改进了和知识点的累积了》=>有一个方针，或者标准 如成才四标准和人际关系三种关系

 解决IT企业的信息孤岛问题。=》根本就没理解这句话的含义，，不够聪明。不够，缺点啥呢 另外，我们往往仅仅着眼于运用，更进一步是实现，但是都不是从0开始，演变也不清楚，当然更别谈什么导致了演变，环境的变化，（这是基本情况的梳理） 更别谈了，种种的归类，总结，对比（这是提炼出理论，抽象的东西）

 他学习得到东西和我学习得到的东西，为啥不一样？ 是由什么造成的呢？ 我也来对比下，（当然分自学和别人教授两种情况了）
问题的出现，都是能力的欠缺或者是不足造成的额， 此时的重点是补全能力，而不是关注表面的东西，======》》》》总结能力，必须总结，这是最终的关键地方
如果我没有了学习视频，自我学习一个技术，一个领域咋办呢？

问题7：谁有什么？ 一定要搞清楚，不能乱套用，都不清晰，当然稀里糊涂的，一定要界定清楚，说明学习时方式有问题，或者总结时有问题=》引申个大问题，你遇到的各种问题是因为你不具备某种能力，如果你具备了能力，这就不是问题，而是做事的步骤而已，它就不会拦着你，此时就不知道怎么办？心态也变得不好，（为什么有了问题就心态不好呢，长久的不能解决问题造成的），出现的次数多了，当你再遇到问题时，就是一个扭曲的心态了， 扩散到一个的方方面面，那这个人就出了问题， 就在你出了问题后，你也不知道该怎么做？ 去纠正也不知道怎么做？只能头疼医头，脚疼医脚，一个问题接着一个问题，貌似解决了问题，但是心态一点都没有改变，更有可能因为问题的不断出现，导致心态越来越差
问题2：交互，只想到在powshell中去操作，而且还有可能困在这个操作中，觉得好难哦，根本就没想到交互，用C#代码交互， 这说明知识面不够，仅仅满足于当前，没有更进一步的思考。
问题8：都是承载wcf，iis中有什么不同呢？=》环境变了，其他的东西变了吗？=》要察觉到环境变了，=》然后看到底细节有哪些不同，=》webconfig有什么不同？ 我们们发现
问题9: 对哦，既然这个项目不是部署到iis上的，所有当你调试的时候，能够启动成功，说明就是运行在iis环境上，=》察觉
问题10：很多情况就是我们对整个流程不清楚的情况下，去看概念，去应用，这样是不正确的
问题5:在听到这段话的时，蒙蒙的，不知道是啥意思？不理解，  其实很简单了，你要了解这个逻辑过程，再来理解这些操作就很好理解了，就是client在message上加东西，然后service端获取。再验证client加的东西，，很多时候别人都只会说加用户名密码，不会说背后的逻辑过程，这样的话，我们不知道这个逻辑过程，就不能理解说的是什么？为什么要这么做？=>同样的道理，直接看到回绝这个请求，我们根本不理解它是怎么做的？
问题10：此时就真正理解了扩容是啥意思？ 理解了分流，单体宕机，uat升级。=》真正的理解还是需要例子的额，之前只听到加一台机器，但是听了没啥感觉。其实是没有真正落实每一步。逻辑的每一步，只是听到了大概。不知道细节
问题0：存在一个问题。把这个这节课讲到的东西，负载均衡等，都给搞清楚搞明白。就结束了，不在思考了不再考虑其他问题了。类似的问题是一次调用完成没问题，就结束了， 一个维度搞定就结束了  等等
问题2:因为wcf就是ws标准的一个产品嘛  =》一个东西的来龙去脉一定要搞清楚
问题1：优化？优化啥？ 啥是优化？   理解一个新概念，有个小demo，才印象深刻
问题1： 察觉问题能力，此处多台机器配置修改问题，（不光于此，还要有预想到的情景 在量级，等维度）
问题8：学习源码，那怎么学习呢？有个脉络，方向，每次学习也是有目标，方向的，这样才不会乱了阵脚
做了设置，
问题1：问题的抛出很重要，这样来龙去才清楚，
问题5：说明webconfig 服务契约，等终归是配置，不是真正的执行程序，他们这些是要传入到执行程序里的=》脉络清楚=》脉络清楚的速度，叫做天赋
问题3：识别要求，分析成出方案。=》它既想给java使用（遵循ws标准），又想呢给C#使用（走net 也就是二进制的）

能力的总结
1.轻松的的心态，把所有的经历都专注在你要做的事情上，其他的任何东西都不要，本身要搞清楚，搞透彻，(关键是找准主方向)，然后延伸，发散，优化，总结等（满足于当前，没有更进一步的思考。）=》发散与集中，战略上发散，战术上集中
2.一个大的工具如wcf，一个小的方面，如wcf中behavior，都需要了解知识点，概念，运作机制，然后再一步一步的走下去，这样才算是理解透彻，甚至还包括修改参数带来的影响。=》这是学习知识的问题
3.找准主方向，一切都会迎刃而解的，关键如何找到主方向呢？ =》主方向是脉络清晰的升级，更进一步。
4.要开心快乐。
5.逻辑过程+运行机制+主方向


开始本节课前，应该思考这些东西 0.积极的心态 1,这节课讲的是什么，大概概况，解决的问题，2。新知识还是旧知识 3.旧的话自己的本身的认识是什么？用到饿了那些什么样的基础知识 4.新知识的话，该怎么办？5.根据用途猜想下它的实现 6.
结束本节课后，应该思考这些东西 1.学到的知识是什么？心中是否清晰？2.自己独立思考下 3.和自己预想的有什么不一样？ 4.有什么方法或者思维或者见识可以借鉴 5.总结下

#重点#极大的自信心和态度。
#重点#问题14：IEndpointBehavior 此时看到IEndpointBehavior心中没有点感觉，=》说明之前的学习是应付，没有真正的理解=》或者说之前总结的技巧，没有形成习惯
为什么高手做事情总是有思路，一步接着一步走， 出错了，还能定位到大概的范围VS做事情没思路，不知道如何下手，出错了还不能定位位置，纠错也不知道怎么办?=>结合反序列化器，这件事思考下

问题1：总结一个坑，已经使用或者自制一些提供效率的工具，这两个概念
问题1：问题的抛出很重要，这样来龙去才清楚，
问题2:逻辑过程缺失  需要注意的是这个配置，不能随着服务引用到client端，
问题2：网路抖动是啥问题？ 超时  带宽很低  超时啥意思？你会这个操作不能超过1min=》认真理解每一个概念
问题3：怎么少了反编译 这个概念呢？
问题3：识别要求，分析成出方案。=》它既想给java使用（遵循ws标准），又想呢给C#使用（走net 也就是二进制的）
问题4:默认生成的有两个endpoint，这个说明了什么？ =》脑子活泛
问题5：说明webconfig 服务契约，等终归是配置，不是真正的执行程序，他们这些是要传入到执行程序里的=》脉络清楚=》脉络清楚的速度，叫做天赋

问题6：微软提供的工具包，sdk是这个意思呀， 可视化  svrstrceviewer.exe=>了解的层次，范围 尽可能全面，不能说，教什么就些什么 对吧。


问题1：总结一个坑，已经使用或者自制一些提供效率的工具，这两个概念
大家好，那么本节课也是本系列wcf课的最后一节课，既然作为最后一节课，我们就介绍一些，wcf使用中可能遇到的一些坑，以及一些提高效率的一些工具
第一个坑就是 传输数据量的坑， 如果大家有用到wcf的话，可能会遇到一个64k限制的一个问题，
什么意思呢，就是说wcf在transport中做了64k的限制，maxReceivedMessageSize此属性做了设置，
问题1：问题的抛出很重要，这样来龙去才清楚，
首先给大家演示下，把这个问题给抛出来

故意数据非常非常大
class Program
    {
        static void Main(string[] args)
        {
            HomeServiceClient client = new HomeServiceClient("BasicHttpBinding_IHomeService");

            var result = client.DoWork(string.Join(",", Enumerable.Repeat(1, 100)));

            Console.WriteLine(result);

            Console.Read();
        }
    }


{"远程服务器返回了意外响应: (413) Request Entity Too Large。"}

其他信息: 已超过传入消息(65536)的最大消息大小配额。若要增加配额，请使用相应绑定元素上的 MaxReceivedMessageSize 属性。

方法：maxReceivedMessageSize的值修改大点，1000000000大概是10G，也就是一次网络传输最大一次10g
问题2:逻辑过程缺失  需要注意的是这个配置，不能随着服务引用到client端，
需要注意的是这个配置，不能随着服务引用到client端，
传输是从点到点的，既然要修改传输量的话，两个点都要修改
client修改也是在自定义binding中修改的


<system.serviceModel>

    <bindings>
      <basicHttpBinding>
        <binding name="mybasic" maxReceivedMessageSize="1000000000" />
      </basicHttpBinding>
    </bindings>
    <behaviors>
      <serviceBehaviors>
        <behavior name="">
          <serviceMetadata httpGetEnabled="true" httpsGetEnabled="true"/>
          <serviceDebug includeExceptionDetailInFaults="false"/>
        </behavior>
      </serviceBehaviors>
    </behaviors>
    <services>
      <service name="WcfService.HomeService">
        <endpoint address="HomeService" binding="basicHttpBinding" bindingConfiguration="mybasic" contract="WcfService.IHomeService">
          <identity>
            <dns value="localhost"/>
          </identity>
        </endpoint>
        <endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange"/>
        <host>
          <baseAddresses>
            <add baseAddress="http://192.168.23.194:8732"/>
          </baseAddresses>
        </host>
      </service>
    </services>
  </system.serviceModel>

这个的话，就解决了这个限制的会这个问题， 所以说大家一定要注意这个坑，

问题2：网路抖动是啥问题？ 超时  带宽很低  超时啥意思？你会这个操作不能超过1min=》认真理解每一个概念
第二个问题就是网络抖动的问题， 超时， 默认情况下，它超时是1分钟，
 那么一分钟，我们该怎么解决呢？就是有的时候，我们会遇到网络它这个带宽特别特别低，那这时候呢，你可能在传输200k的时候呢，如果说超过1min，这时候呢，他就会挂掉，就是说会强制报错，因为你这个超时问题，导致网络强制给你中断，那这个超时的话，有四个值可以设置，
 
     <basicHttpBinding>
        <binding name="mybasic" 
                 sendTimeout="00:10:00"
                  receiveTimeout="00:10:00"  有send 就有receive=》脑子活泛
                  openTimeout="00:10:00"  有open说明了什么？=》脑子活泛
                  closeTimeout="00:10:00"
                 maxReceivedMessageSize="1000000000" />
      </basicHttpBinding>
ok，这就是一个超时的设置，包括这个链接的打开时间，关闭时间 发送时间，接受时间，
ok，接下来的话呢，这些设置默认是多少、  
怎么去看？
问题3：怎么少了反编译 这个概念呢？
这时候我们可以反编译代码
/ System.ServiceModel.HttpBindingBase
[__DynamicallyInvokable, DefaultValue(65536L)]
public long MaxReceivedMessageSize
{
	[__DynamicallyInvokable]
	get
	{
		return this.httpTransport.MaxReceivedMessageSize;
	}
	[__DynamicallyInvokable]
	set
	{
		this.httpTransport.MaxReceivedMessageSize = value;
		this.httpsTransport.MaxReceivedMessageSize = value;
	}
}

// System.ServiceModel.Channels.Binding
[__DynamicallyInvokable, DefaultValue(typeof(TimeSpan), "00:10:00")]
public TimeSpan ReceiveTimeout
{
	[__DynamicallyInvokable]
	get
	{
		return this.receiveTimeout;
	}
	[__DynamicallyInvokable]
	set
	{
		if (value < TimeSpan.Zero)
		{
			throw DiagnosticUtility.ExceptionUtility.ThrowHelperError(new ArgumentOutOfRangeException("value", value, SR.GetString("SFxTimeoutOutOfRange0")));
		}
		if (TimeoutHelper.IsTooLarge(value))
		{
			throw DiagnosticUtility.ExceptionUtility.ThrowHelperError(new ArgumentOutOfRangeException("value", value, SR.GetString("SFxTimeoutOutOfRangeTooBig")));
		}
		this.receiveTimeout = value;
	}
}

ILSpy查看源代码、

ok，这是第二个问题？

ok，接下来是第三个服务，
问题3：识别要求，分析成出方案。=》它既想给java使用（遵循ws标准），又想呢给C#使用（走net 也就是二进制的）
比如Homeservice，它既想给java使用（遵循ws标准），又想呢给C#使用（走net 也就是二进制的），这就存在一个矛盾，如何将homeservice发布成两种格式呢？也就是我们把这个binding进行合体， 我这个homeservice想使用所有的binding，
ok我们去看下如何去解决这个问题？
问题4:默认生成的有两个endpoint，这个说明了什么？ =》脑子活泛
目前来看，我们又一个基地址， 目前公布的是basichttpbinding，而且又公布了一个元数据，我们这时候在公布一个tcp的

?xml version="1.0" encoding="utf-8"?>
<configuration>
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.6.1"/>
  </startup>
  <system.serviceModel>

    <bindings>
      <basicHttpBinding>
        <binding name="mybasic"
                 sendTimeout="00:10:00"
                  receiveTimeout="00:10:00"
                  openTimeout="00:10:00"
                  closeTimeout="00:10:00"
                 maxReceivedMessageSize="1000000000" />
      </basicHttpBinding>

      <netTcpBinding>
        <binding name="mytcp"  sendTimeout="00:10:00"
                  receiveTimeout="00:10:00"
                  openTimeout="00:10:00"
                  closeTimeout="00:10:00"
                 maxReceivedMessageSize="1000000000" >
          <security mode="None"/>
        </binding>
      </netTcpBinding>
    </bindings>
    <behaviors>
      <serviceBehaviors>
        <behavior name="">
          <serviceMetadata httpGetEnabled="true" httpsGetEnabled="true"/>
          <serviceDebug includeExceptionDetailInFaults="false"/>
        </behavior>
      </serviceBehaviors>
    </behaviors>
    <services>
      <service name="WcfService.HomeService">
        
        <endpoint address="HomeService" binding="basicHttpBinding" bindingConfiguration="mybasic" contract="WcfService.IHomeService">
          <identity>
            <dns value="localhost"/>
          </identity>
        </endpoint>

        <endpoint address="net.tcp://192.168.23.194:8730" binding="netTcpBinding"
                  bindingConfiguration="mytcp" contract="WcfService.IHomeService">
          <identity>
            <dns value="localhost"/>
          </identity>
        </endpoint>

        <endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange"/>
        
        <host>
          <baseAddresses>
            <add baseAddress="http://192.168.23.194:8732"/>
          </baseAddresses>
        </host>
      </service>
    </services>
  </system.serviceModel>
</configuration>

这就说明，我们当前给个三个endpoint
我们废话不多说，编译下，启动下，
目前有两个端口，那是不是有两个端口，我们通过服务引用看下，不就知道饿了，
这个时候我们发现 client生成的配置，多了一个binding，有两个
那既然client有两个binding，我到底用哪个呢？
问题5：说明webconfig 服务契约，等终归是配置，不是真正的执行程序，他们这些是要传入到执行程序里的=》脉络清楚=》脉络清楚的速度，叫做天赋
Homeserviceclient的构造函数可以决定?  
启动下client，我们看看是否用的是tcp。我们可以用wireshark去看下，，
一看真的是
接下来 我们换basic， 然后我们用fiddler来看 是不是http
一看真的是


问题6：微软提供的工具包，sdk是这个意思呀， 可视化  svrstrceviewer.exe=>了解的层次，范围 尽可能全面，不能说，教什么就些什么 对吧。
接下来去看第四个
微软官方提供的工具
1.可视化编辑配置文件工具
接下来，我们通过可视化工具来编辑下app.config
首先我们要把这个工具找到，对吧
C:\Program Files (x86)\Microsoft SDKs=》这个是微软工具包目录， sdks是工具包？
C:\Program Files (x86)\Microsoft SDKs\Windows\v8.1A\bin\NETFX 4.5.1 Tools




一：传输数据量的坑。。【64k限制】

1. maxReceivedMessageSize：默认65536， 可设置上线long.MaxValue

			   int.MaxValue 大概21G

Tranport => 64k  【maxReceivedMessageSize】

演示：

{"远程服务器返回了意外响应: (413) Request Entity Too Large。"}

其他信息: 已超过传入消息(65536)的最大消息大小配额。若要增加配额，请使用相应绑定元素上的 MaxReceivedMessageSize 属性。

<system.serviceModel>

    <bindings>
      <basicHttpBinding>
        <binding name="mybasic" maxReceivedMessageSize="1000000000" />
      </basicHttpBinding>
    </bindings>
    <behaviors>
      <serviceBehaviors>
        <behavior name="">
          <serviceMetadata httpGetEnabled="true" httpsGetEnabled="true"/>
          <serviceDebug includeExceptionDetailInFaults="false"/>
        </behavior>
      </serviceBehaviors>
    </behaviors>
    <services>
      <service name="WcfService.HomeService">
        <endpoint address="HomeService" binding="basicHttpBinding" bindingConfiguration="mybasic" contract="WcfService.IHomeService">
          <identity>
            <dns value="localhost"/>
          </identity>
        </endpoint>
        <endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange"/>
        <host>
          <baseAddresses>
            <add baseAddress="http://192.168.23.194:8732"/>
          </baseAddresses>
        </host>
      </service>
    </services>
  </system.serviceModel>


二：超时问题 【默认一分钟】

1. 网络抖动或者带宽很低的时候，默认为1分钟。

     <basicHttpBinding>
        <binding name="mybasic" 
                 sendTimeout="00:10:00"
                  receiveTimeout="00:10:00"
                  openTimeout="00:10:00"
                  closeTimeout="00:10:00"
                 maxReceivedMessageSize="1000000000" />
      </basicHttpBinding>

默认时间到底是多少，怎么去看？？？ 【maxReceivedMessageSize】


// System.ServiceModel.HttpBindingBase
[__DynamicallyInvokable, DefaultValue(65536L)]
public long MaxReceivedMessageSize
{
	[__DynamicallyInvokable]
	get
	{
		return this.httpTransport.MaxReceivedMessageSize;
	}
	[__DynamicallyInvokable]
	set
	{
		this.httpTransport.MaxReceivedMessageSize = value;
		this.httpsTransport.MaxReceivedMessageSize = value;
	}
}

// System.ServiceModel.Channels.Binding
[__DynamicallyInvokable, DefaultValue(typeof(TimeSpan), "00:10:00")]
public TimeSpan ReceiveTimeout
{
	[__DynamicallyInvokable]
	get
	{
		return this.receiveTimeout;
	}
	[__DynamicallyInvokable]
	set
	{
		if (value < TimeSpan.Zero)
		{
			throw DiagnosticUtility.ExceptionUtility.ThrowHelperError(new ArgumentOutOfRangeException("value", value, SR.GetString("SFxTimeoutOutOfRange0")));
		}
		if (TimeoutHelper.IsTooLarge(value))
		{
			throw DiagnosticUtility.ExceptionUtility.ThrowHelperError(new ArgumentOutOfRangeException("value", value, SR.GetString("SFxTimeoutOutOfRangeTooBig")));
		}
		this.receiveTimeout = value;
	}
}

ILSpy查看源代码


三：一个service配置多个endpoint（混合使用）

1. 一个service开放多个混合端口 tcp + http + udp + msmq 等等。。。

  HomeService  想给JAVA使用【ws规范】，又想给C#使用 [net binary]。。。。

  我想使用所有的binding。。。


<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.6.1"/>
  </startup>
  <system.serviceModel>

    <bindings>
      <basicHttpBinding>
        <binding name="mybasic"
                 sendTimeout="00:10:00"
                  receiveTimeout="00:10:00"
                  openTimeout="00:10:00"
                  closeTimeout="00:10:00"
                 maxReceivedMessageSize="1000000000" />
      </basicHttpBinding>

      <netTcpBinding>
        <binding name="mytcp"  sendTimeout="00:10:00"
                  receiveTimeout="00:10:00"
                  openTimeout="00:10:00"
                  closeTimeout="00:10:00"
                 maxReceivedMessageSize="1000000000" >
          <security mode="None"/>
        </binding>
      </netTcpBinding>
    </bindings>
    <behaviors>
      <serviceBehaviors>
        <behavior name="">
          <serviceMetadata httpGetEnabled="true" httpsGetEnabled="true"/>
          <serviceDebug includeExceptionDetailInFaults="false"/>
        </behavior>
      </serviceBehaviors>
    </behaviors>
    <services>
      <service name="WcfService.HomeService">
        
        <endpoint address="HomeService" binding="basicHttpBinding" bindingConfiguration="mybasic" contract="WcfService.IHomeService">
          <identity>
            <dns value="localhost"/>
          </identity>
        </endpoint>

        <endpoint address="net.tcp://192.168.23.194:8730" binding="netTcpBinding"
                  bindingConfiguration="mytcp" contract="WcfService.IHomeService">
          <identity>
            <dns value="localhost"/>
          </identity>
        </endpoint>

        <endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange"/>
        
        <host>
          <baseAddresses>
            <add baseAddress="http://192.168.23.194:8732"/>
          </baseAddresses>
        </host>
      </service>
    </services>
  </system.serviceModel>
</configuration>



四：WCF一些有用的工具

在Microsoft SDKs下有一些非常好玩的工具包。  SvcConfigEditor.exe

目录：C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.6.1 Tools

1. 可视化编辑config文件：SvcConfigEditor.exe


 <system.serviceModel>

    <bindings>
      <basicHttpBinding>
        <binding name="mybasic"
                 sendTimeout="00:10:00"
                  receiveTimeout="00:10:00"
                  openTimeout="00:10:00"
                  closeTimeout="00:10:00"
                 maxReceivedMessageSize="1000000000" />
      </basicHttpBinding>
    </bindings>
    <behaviors>
      <serviceBehaviors>
        <behavior name="">
          <serviceMetadata httpGetEnabled="true" httpsGetEnabled="true"/>
          <serviceDebug includeExceptionDetailInFaults="false"/>
        </behavior>
      </serviceBehaviors>
    </behaviors>
    <services>
      <service name="WcfService.HomeService">
        
        <endpoint address="HomeService" binding="basicHttpBinding" bindingConfiguration="mybasic" contract="WcfService.IHomeService">
          <identity>
            <dns value="localhost"/>
          </identity>
        </endpoint>

        <endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange"/>
        
        <host>
          <baseAddresses>
            <add baseAddress="http://192.168.23.194:8732"/>
          </baseAddresses>
        </host>
      </service>
    </services>
  </system.serviceModel>



服务类型: WcfService.HomeService

终结点设置:

        约定: WcfService.IHomeService

        绑定: basicHttpBinding

        绑定配置: (Default)

        终结点地址: http://192.168.23.194:8732/HomeService

