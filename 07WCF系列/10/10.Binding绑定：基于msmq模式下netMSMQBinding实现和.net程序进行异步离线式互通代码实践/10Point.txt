情绪上怎么样? 小事情，搞的定，一步一步来，不要有过多的任务压在心头，与完事开头难的矛盾， 退缩是不存在额，没有在怕的。=》  主动的话，这些问题就可能不存在，反而有其他更好地东西出现
我是来学学习能力的，学习方法论的，不仅仅是知识？ 不是学完就万事大吉了，=》本质
这个点没有评价好坏，未来的预期也没有评价好坏？
每个东西，都要深挖，不能只是了解它的作用，
每个新东西，旧东西， 其实都不难，调整好状态，跨出第一步，步步踏实，有啥难的，一多半都是自己吓自己。
既然心理作用这么大，我们可以怎么做呢？  之前用代入感，现在用成功者，也就是未来者（儿子清华，女儿北大）， =》积极主动
来句革命性的，这些东西真的有那么重要的吗？遇到它我不想学，产生退缩，我的一切都完了吗？ 当然不是的，我当然不是整天要面对不是这些事情，这些都是实现方式之一，人需要有哲学的角度，出一套指导思想，把一切都简略的画出来，然后去填空，而目前呢，只是在做填空的那一步，就像一个没有思想的人，那就是一个不知道为什么这么做的人在做事情，此时积极的发挥不出来，消极的全部放大，导致进展不下去。 
我们是思考抽象的高层次东西，怎么可以困在低层次的范围内呢？ 对不对？

必须要有整体上的认识，才可以去理解其中的概念，名词，底层的流程，抽象的流程，抽象的概念 大局观
各个点的知识知道了，但流程是什么呢？ 如何联系在一起呢？逻辑呢？  如何才算是理解透彻？概念的透彻，流程的透彻
什么是理解透彻呢？ 就是画一张图来概括，一定要学会这种方式， 知识点都串起来了，形象生动。记忆深刻
##note###重大问题，基础知识不系统，不全面，有缺失，而且还不清晰牢固

之前总结，反思了很多东西，为什么效果平平呢？ 很大可能是激情没有涉及，（我一定杀20个人呢，）=>起势的东西没有。
我就是要知道，既然是学习知识，首先先学到知识，然后在学到学习方法，如何实现呢？
感觉越学越简单，越容易，他妈的就是很简单嘛。
我相信只要我持续的思考，学习，我一定能掌握一套东西，然后学任何的东西都得心应手，都透彻，然后都应用的很好


问题1： 新技术，新方案的基础知识点不足，也就是说学习方式不对，不能一上来，就想着理解这个东西，不符合逻辑，先学概念，知识点，在学原理，应用，(如直联，联机，离线等概念)=》带来一个重要的问题，每个概念都必须以新方式重新理解。以前的理解有问题，
问题2：规模的增长，导致问题的爆炸，
问题3：他这种思考的方式是什么？ 我怎么才能像他这样思考呢？

大家好，我们接着上节课来讲，上节课我们讲到了，一个跨语言通信，一个是net下的同语言的联机模式，那么本节课呢，我们给大家讲下，tcp的离线模式，那么何为离线模式，就是说，我将原来直联的这中模式呢，直接改成了状态式的这种访问，

问题1： 新技术，新方案的基础知识点不足，也就是说学习方式不对，不能一上来，就想着理解这个东西，不符合逻辑，先学概念，知识点，在学原理，应用，(如直联，联机，离线等概念)=》带来一个重要的问题，每个概念都必须以新方式重新理解。以前的理解有问题，
举个例子，在以前的情况下，有一个client和一个sevice端，两者之间的通讯是怎么通讯的饿呢？我以前是这样的一个通讯，直联式的一个通讯，（就是两者直接相连），现在的话呢，变成什么样的通讯呢？ 一个client和一个service端以及一个msmq  什么是msmq等一下，我给大家说。 这时候中间多了一个消息队列，相当于我所有的请求呢，都是直接丢给消息队列，然后呢，我们service还直接到这个消息队列上去取，那这种模式，由原来的这种直联式的，变成了这种断开式的，，
问题2：规模的增长，导致问题的爆炸，
大家可以看看这两者有什么好处，比如说，我有多了一个client，在直联式，也是直接读service，然后回来，，如果说再多一个client，我也是连上去，然后再回来，那可能说这种模式，觉得很麻烦了，对不对，如果说我这里再加一个service呢，所有的client，都可能要和service2直联，其实这时候我只有两个service，3个client，大家有没觉得比较复杂了，，那这个就是直联式的一个遗憾吧，就是说，如果你客户端和service端多了的话，这个就导致你调用特别复杂，
如果我采用离线模式的话，会是什么样子呢？  如果说我三个client，都直接和msmq直接打交道，对吧，两个service和msmq打交道，这样就解决了我这个问题，client直接把所有的消息丢给消息队列，那消息队列的话呢，有service来进行处理，不像直联式一样，，这样就解除了依赖，对不对，你看上面多复杂，下面就不复杂了，对不对，这个就是消息队列的一个好处，
msmq是微软提供，基于windows系统里面的
接下来，我们说下，消息队列到底有什么好处。 我们对照着目录

问题3：他这种思考的方式是什么？ 我怎么才能像他这样思考呢？
ok，首先的话，我们来看，第一个好处，削峰，削峰是什么削峰呢， 就是说，比如说，队列就像一个三峡大坝一样，对不对，三峡可以拦截上游凶猛的洪水，否则下游年年洪灾，，这个就相当于什么呢，消息队列的上游就是clients，client它会把所有的洪水都丢给msmq，丢给消息队列，如果你的client端有10个 100个，上千个，对不对，所有的消息都是在消息队列中承载，相当于它是一个三峡，一个大坝的作用，相当于一个蓄洪的作用，对不对，大家可以想一下，它相当于一个大池子，所有的流量都来了，来了就在这个池子里囤积着，那由谁来消费呢，由下游来消费，下游就是我这个service，我可以无限的扩容这个service，对不对，比如说我扩容一百个，来消费这个消息队列，这个好处大家可以看得到吧，就相当于一个蓄洪的作用，
ok，第二个的话，是同步架构异步化， 同步架构异步化是什么意思呢？ 就是直联式是同步方式，离线式是异步方式，同步形式什么意思呢 我请求到你service，必须等你的response，相当于一来一回，rpc的那种通讯，对不对，任何client，等待service都是一来一回的，而离线式是单向的，就是什么意思呢？就是说我上游的话，我只关系消息队列，下游的话，我也只关心消息队列，大家请记住我说的这几句话，它的依赖关系不一样的，依赖关系以前呢，直联式的话，我client1既要关心service1，又要关心service2.对不对，那这样依赖关系就有两个，相当于在我的client段有两个wcf引用，那如果说，你改成消息队列的话呢，client2，他其实没有引用了额，最多也就引用个wcf的binding，因为client2和下游不关心了嘛，相当于这个队列把上游和下游切开了，上游之和队列发生关系，下游也是和队列发生关系，也就是，上游和下游的依赖关系给拆解了，上游不知道下游是谁，下游也不知道上游是谁，大家之和三峡发生关系，所以队列可以让系统模块化，有利于横行扩容，，那对不对，是不是横向扩容，如果我这个service可以承载1000个，client像双11特别多，只要我用消息队列来承载，当然现在的消息队列，可能是一个消息队列集群，
ok，然后的话呢，并发请求串行化， 什么意思？以前的话呢，我client端，我只要来个请求，我就实时的调service，可能存在一个并发的问题，比如说我client开了10个线程，去读这个service，相当于10个并行，对不对，比如说，我现在的client2调了service1和service2.我开了多线程去跑，那这个时候会不会有一个并发的问题，可能这个时候我就需要一个锁机制了，或者说我client2开了10个线程，来调serice1，可能会导致一个并发，，这个大家心里要有个数，那如果说我变成消息队列的这种模式的话呢，我们就发现了什么？ 消息队里是什么?既然是消息队列，所以它是一个先进先出的机制，既然是一个队列，就是一个无锁的结构，对不对，所以这个地方，天然就是一个串行化，把以前的并行变成了串行，那串行的话，我service就一个一个去读，对不对，这就不存在一个锁机制的问题，
ok，第四个好处，提高系统稳定性， 下游宕机挂掉，不影响上游业务，因为大家都解耦了，比如，淘宝的下单，与物流公司对接平台，挂了额，大家就相互不影响，很正常对不对，，大家可以想一下，我这个消息队列的下游的某一个service挂了，我上游不和下游发生关系，之和消息队列打交道， ok，如果说你下游挂了额，service丢了一个，没关系，可能我这个处理能力慢一点，但就不见得影响你上游，对不对，很简单的道理，大家可以理论联系实际，一个三峡

ok接下来就要说到一些遗憾的东西，

wcf下面的消息队列，wcf目前只支持自家的msmq，这是我认为wcf团队，最不给力的地方，为什么？因为msmq的话呢，其实是集成在windows系统里面，在哪里呢？ 我的电脑，右键，管理，服务和应用程序下， 既然是windows自带的话， 有什么不好的地方呢  也就是msmq是什么东西，那我就要解释下 了，
1.首先它是一个windows自带的消息队列，第二点它是基于硬盘的，第三点基于单机的额，无集群，也就不存在高可用高并发，，这三点就决定了msmq它是一个很low的东西，严格来说它是一个90年代的产品，现在的互联网业务用到msmq还是非常非常少的，
所以说，为什么在binding选择分类的时候，为什么会把离线模式放到同语言分类下，因为其他的语言压根也不会用它（msmq），你让java去用微软的消息队列，基本上没有，
因为毕竟 因为现在的语言的消息队列也特别多，比如ActiveMQ（java），ZeroMQ（号称最快），Kafka（大数据流式），Redis（也是消息队列），当然还有rabbitmq
现在有很多的分布式消息队列，wcf都不支持，
项目场景小，可以试用下，

接下来讲解，如何去配置msmq
其实搭建还是非常方便的，
  <endpoint address="net.msmq://localhost/private/ctrip" bindingConfiguration="mymsmq"
            binding="netMsmqBinding" contract="WcfService.IHomeService">
        </endpoint>
首先你是消息队列，你必然有个消息队列地址  net.msmq://localhost/private/ctrip   private是路径  ctrip是名称
然后把安全给关了，自定义bindings
  <bindings>
      <netMsmqBinding>
        <binding name="mymsmq">
          <security mode="None"/>
        </binding>
      </netMsmqBinding>
    </bindings>
	配置endpoint
	bindingConfiguration="mymsmq"
重新编译，部署 启动
出错，
netMsMQBinding 必须要是 操作契约是 IsOneWay模式
修改operation契约
 [ServiceContract]
    public interface IHomeService
    {
        [OperationContract(IsOneWay =true)]
        void DoWork(string msg);
    }

重新编译，启动，查看他的wsdl
client端添加服务引用
添加调用代码，
启动客户端，本机的消息队列里没有消息数量，service端控制台输出， 也就是客户端发送了消息到消息队列，service端消费了消息队列的数据  此时类似于直联模式

如果关闭service端，启动客户端，发送1000条消息，我们可以看到消息队列中有1000个消息，未被消费  此时是离线模式
接着我把service端打开， 看到没，控制台输出了1000条 瞬间的，此时消息队列中的消息为0个，这就说明我service已经把消息，消费完了，   同时也验证了 service和client端是解耦状态， 对不对， 我这个下游挂不挂，和你这个上游没有关系，我上游挂不挂也和你下游没有关系，大家之和你消息队列交互

队列消息队里里还有一个坑，什么坑，一个message是4m的限制。如果说你是大于4m的话，它是塞不进去的，wcf也不报错，很麻烦的，

ok这个就是本节课和大家介绍的所有东西，最主要的话是，大家一定要理解消息队列的思想，毕竟消息队列在我们的互联网开发中，特别重要的，
微软的大家就了解下，其他的消息队列大家去了解下，在很多互联网开发场景中用的到，

一：使用队列的好处

1. 削峰

  队列就是三峡，三峡可以拦截上游凶猛的洪水，否则下游年年洪灾。

  所以队列的好处就是可以有效避免底层系统被流量冲垮。。。

2. 同步架构异步化【解耦】
  
  上游和下游的依赖关系被拆解，上游不知道下游是谁，下游也不知道上游是谁，大家之和三峡发生关系，
  
  所以队列可以让系统模块化，有利于横向扩容。

3. 并发请求串行化【无锁模式】

  既然是队列，也就是FIFO，先行先出，也就不存在锁机制的问题了。

4. 提高系统稳定性

   下游宕机挂掉，不影响上游业务，因为大家解耦了，比如淘宝下单，与物流公司对接平台挂了，大家就不相互影响。

二：MSMQ是什么东西：

1. 它是一个windows自带的消息队列。

2. 它是基于硬盘的。。

3. 基于单机的。。。无集群【高可用，可并发】

以上三点，就决定是一个很low的东西。。。【90年代】

给人感觉，wcf还是保留在2000年代 状态。。。


三：WCF模式下的消息队列

1. WCF目前只支持自家的MSMQ。。。这也是我认为WCF团队最不给力的一个地方，居然没有开发对接第三方的消息队列组件，

   比如支持ActiveMQ，ZeroMQ，Kafka，Redis。唯一一个由RabbitMQ自家的WCF Binding,也放弃更新了。

如果你是企业网的开发。。。OA，ERP。。。可以适量使用。。。

2.  这种90年代的单机版硬盘化的MSMQ，现实场景比较小，小系统还可以接受。大家主要理解这种MQ思想。

net.msmq://localhost/private/ctrip 【ctrip=>队列名，【其他是默认格式】】

 <endpoint address="net.msmq://localhost/private/myqueue" bindingConfiguration="myMsmqBinding"
           binding="netMsmqBinding" contract="WcfService.IHomeService">


netMsMQBinding 必须要是 操作契约是 IsOneWay模式


3. 在线模式 、 离线模式

MSMQ的一个Message是4M的限制。。。


大家一定要理解MQ的思想，在互联网开发中特别重要。。。