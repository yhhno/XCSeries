情绪上怎么样? 小事情，搞的定，一步一步来，不要有过多的任务压在心头，与完事开头难的矛盾， 退缩是不存在额，没有在怕的。=》  主动的话，这些问题就可能不存在，反而有其他更好地东西出现
我是来学学习能力的，学习方法论的，不仅仅是知识？ 不是学完就万事大吉了，=》本质
这个点没有评价好坏，未来的预期也没有评价好坏？
每个东西，都要深挖，不能只是了解它的作用，
每个新东西，旧东西， 其实都不难，调整好状态，跨出第一步，步步踏实，有啥难的，一多半都是自己吓自己。
既然心理作用这么大，我们可以怎么做呢？  之前用代入感，现在用成功者，也就是未来者（儿子清华，女儿北大）， =》积极主动
来句革命性的，这些东西真的有那么重要的吗？遇到它我不想学，产生退缩，我的一切都完了吗？ 当然不是的，我当然不是整天要面对不是这些事情，这些都是实现方式之一，人需要有哲学的角度，出一套指导思想，把一切都简略的画出来，然后去填空，而目前呢，只是在做填空的那一步，就像一个没有思想的人，那就是一个不知道为什么这么做的人在做事情，此时积极的发挥不出来，消极的全部放大，导致进展不下去。 
我们是思考抽象的高层次东西，怎么可以困在低层次的范围内呢？ 对不对？

必须要有整体上的认识，才可以去理解其中的概念，名词，底层的流程，抽象的流程，抽象的概念 大局观
各个点的知识知道了，但流程是什么呢？ 如何联系在一起呢？逻辑呢？  如何才算是理解透彻？概念的透彻，流程的透彻
什么是理解透彻呢？ 就是画一张图来概括，一定要学会这种方式，
##note###重大问题，基础知识不系统，不全面，有缺失，而且还不清晰牢固

之前总结，反思了很多东西，为什么效果平平呢？ 很大可能是激情没有涉及，（我一定杀20个人呢，）=>起势的东西没有。
我就是要知道，既然是学习知识，首先先学到知识，然后在学到学习方法，如何实现呢？
感觉越学越简单，越容易，他妈的就是很简单嘛。


问题1：画图，抉择（当时看到这么多的binding，为啥没有一点想法呢？）
问题3：总结，事后在梳理， 或者不同标准的归类，
问题2：借鉴，效果很明显的方式。
问题4：性能的比较
问题5:遗憾就是不足， http与tcp的不同，学了wcf如何工作，对于了解thrift如何工作是否也有作用呢？就是没有类似的经验，所以一看到就蒙，想也想不明白，
问题6：讲了原理，就讲实践， 其实别看20多分钟，认真记录10分钟就可以了， 不用一看到就吓的不行，理性分析总结。，合理对策，
问题6：讲了原理，就讲实践， 其实别看20多分钟，认真记录10分钟就可以了， 不用一看到就吓的不行，理性分析总结。，合理对策，


大家好，从本节课开始就和大家说下binding， binding的话呢， 在第二节课，就跟大家讲过了，binding是一些预定义的协议栈，	  对吧，是提前已经组装好了， ，不同的binding，它的协议栈是不一样的额，不管什么binding，transport和encoding是必不可少的额，、

问题1：画图，抉择（当时看到这么多的binding，为啥没有一点想法呢？）
ok，在wcf中的协议栈，还是特别多的，我们如何来抉择呢？
ok，我画了一张简单的图，这些也是我们平时用的比较多的binding，
binding的选择，首先我们来看下，你是webservice标准还是restful标准（在互联网上和js互通 json）
webservice采用的是xml格式的 soap
如果你是采用webservice标准，你是要跨语言，还是同语言，
如果说你要跨语言（基于http），比如说你完成一些基础通信 比如说最基本的，也就是说只包含transport和encoding，（这是抽象层面的概念，往往我们只关注抽象层面的东西，或者以为抽象层面的东西就是全部呢，）你用基础通信的话，你用basichttpbinding就可以了，如果说你还要一些带事务和安全的通信，这时候你可以使用wshttpbinding，也就是basichttpbinding的增强，
ok，如果你不跨语言，你同语言的haul（基于tcp），你是用联机模式还是离线模式，如果你用离线模式，ok，就是用netmsmqbinding，如果你是联机模式，也就是说互联的rpc模式，如果说你是跨机访问，你可以使用nettcpbinding，如果说你是本机访问的话，你可以使用netNamePipedbinding，其实我们在实际开发中，netNamePipedbinding用的很少，毕竟你本机，开两个wcf，本机访问这种情况很少，我们基本上都用nettcp来替代，因为你毕竟用wcf，所以说你要做的肯定是跨机器访问，很少本机内访问， 主要用的就这六个binding，当然还有其他的binding，可用可不用，至于这六种binding，如何选择，就根据大家的需要。 这六种可以覆盖百分之99的需求，，

问题3：总结，事后在梳理， 或者不同标准的归类，
ok这些，我也做了些总结，

问题2：借鉴，效果很明显的方式。
你说说，画个图一目了然，这说什么什么？ 思维导图，但是不是只有有逻辑的东西，才可以这么用，

问题4：性能的比较
然后有一个性能的比较

问题5:遗憾就是不足， http与tcp的不同，学了wcf如何工作，对于了解thrift如何工作是否也有作用呢？就是没有类似的经验，所以一看到就蒙，想也想不明白，
然后就是一个遗憾，我们发现wcf，第一个他和现代的一些语言或一些组件已经脱节了，比如说怎么脱节，比如说wcf最大的遗憾就是tcp模式不支持跨语言互通，比如说我们一直在做一个先决的条件，就是你tcp只能在net环境下互通，那请问为什么tcp模式下，net不能和其他语言互通呢?比如说我们java和net我为什么一定要在http层面上，进行互通呢，而且这个性能很低，那么我为什么不能用tcp，net和java互通呢，当然这件事情是没有一个标准，什么意思呢》 我net采用的是二进制，然后有一些协议栈，你java 根本就没有这样的与net匹配的这种协议，无法解析，对吧，不像http，http的话，它有一个ws的标准，也就是三件套，它有soap wsdl xsd，那在tcp标准系阿是没有这样的一个标准，java也不会来实现你这个标准，没有人牵头做一个tcp模式下的标准，导致wcf不能和java在tcp模式下，和net互通，如果说能实现tcp互通的话，那这还是非常厉害的，当然微软也不会去写这么一个适配的组件，这个也是微软这么多年，基本上没有大发展的地方，在wcf上面，
当然如果你真想用tcp模式的互通的话，那请用这个thrift  代替wcf，因为google开源的这个thrift的话，它有不同语言版本的适配，所以说的话呢，这个thrift可以实现多语言的tcp模式互通，

好了，这个就是给大家介绍的一个选择的问题，

问题6：讲了原理，就讲实践， 其实别看20多分钟，认真记录10分钟就可以了， 不用一看到就吓的不行，理性分析总结。，合理对策，

既然basichttpbinding可以实现跨语言互通，演示下，
net和java互通
先开启服务端，采用的binding是basichttpbinding，地址，
写好代码，编译，部署，启动 我们来看下它的wsdl是没有问题的额，
接着我们来看java怎么去解析
打开eclipse，新建maven project 这个大家可以下载下eclipse，配下maven， 选择控制台程序，
然后在创建好的项目右键，新建other 选择web service client  输入服务地址，下一步，
生成了，强类型的代理代码，但是他没有配置文件，直接以webservice形式进行引用，
接下来写调用代码， 调用代码完全可以猜出来，
 public static void main( String[] args ) throws RemoteException
    {
    	IHomeServiceProxy proxy=new IHomeServiceProxy();
    	
    	String result= proxy.doWork("i'm java");
    	
    	System.out.println(result);
    }

运行下， java客户端输出结果，wcf的控制台也输出结果，
这样就实现了Java和net互通，  确实也做到了，
还是非常简单的，


然后演示下，同语言，tcp 跨机访问 采用nettcpbinding
首先修改service端的appconfig，一定要把安全去掉，不然访问起来还是非常麻烦的，因为这个binding是带安全认证的， 方法：自定义binding，
还有别忘了，endpoint的address，通讯地址它不使用基地址，需要单独写出来，服务公布地址，使用基地址
然后，编译，部署，启动，
当然此时只能用wireshark去监控，因为本机是监控不了的额，我们就用虚拟机，不数字啊虚拟机上，tcp的监控是用fiddler是看不了的额，

然后client端，添加服务引用， 添加调用代码， 这也是wcf的一个好处，他只要改下binding的话，背后的东西都会自动帮你改掉，也就是换协议还是非常方便的 ，
打开wireshark 选择虚拟机的网络适配器，
通过tcp的层面把通信内容抓到，
好了额，这个就是同语言的跨机互通，

最后一个就是同语言，本机访问，
很简单，修改配置文件，修改binding，修改自定义bindings，修改地址
然后编译，本机启动， 
出错
我们不带端口，因为他是通过windows内核通信的， 但是公布服务地址还是使用基地址，不带端口
启动成功，
然后更新，client服务引用个，
运行下，client，成功，
client控制台，显示正确信息，  service控制台显示正确信息，
这是采用本地，命名管道binding，通信，

这就是本节课，给大家介绍的而所有的东西了，  本节课最重要的一点是如何去选择，


一. 认识wcf支持的预定义绑定

binding就是提前定制好的协议栈  【transport + encoding】

《1》 ws*开头的绑定。。【用于跨语言互通的】

       第一种： webservice模式  【BasicHttpBinding,WSHttpBinding】
       第二种： restful模式     【WebHttpBinding】

《2》 net开头的绑定。。【用于.net程序间的互通】
  
       第一种：直连式的访问 【netTcpBinding,NetNamedPipedBinding】
       第二种：断开时的访问 【netMSMQBinding】

《3》 两种绑定的性能
  
  NetNamedPiped> netTcp > MsmqBinding > basic > WS
  
《4》 遗憾
  
   和现代的一些语言，一些组件脱节了。。

  WCF最大的遗憾就是tcp模式不支持跨语言互通，google开源的thrift就支持了这种模式，当然没人牵头做这种事情。
  不像webservice有的ws标准。


  java不会实现这样的tcp协议栈标准。。。 导致wcf 和java 不能进行tcp互通。。。

  thrift 代替 wcf。。。 ，它可是现实不同语言的tcp模式互通。。。


二：使用basicHttpBinding 实现跨语言互通  【java】

    public static void main( String[] args ) throws RemoteException
    {
    	IHomeServiceProxy proxy=new IHomeServiceProxy();
    	
    	String result= proxy.doWork("i'm java");
    	
    	System.out.println(result);
    }

三：tcp通讯 ，netNamedPipeBinding通讯

命名管道 是和 windows内核进行互通。。。






